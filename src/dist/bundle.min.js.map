{"version":3,"sources":["webpack:///bundle.min.js","webpack:///webpack/bootstrap 42dd0a2bb09af8464d54","webpack:///./node_modules/css-loader/lib/css-base.js","webpack:///./node_modules/style-loader/lib/addStyles.js","webpack:///./src/HJN.graph.init.js","webpack:///./src/HJN.utils.js","webpack:///./src/HJN.graph.js","webpack:///./src/main.js","webpack:///./src/HJN.css?8e10","webpack:///./src/HJN.css","webpack:///./node_modules/style-loader/lib/urls.js","webpack:///./libs/dygraph.css?0b95","webpack:///./libs/dygraph.css"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","cssWithMappingToString","item","useSourceMap","content","cssMapping","btoa","sourceMapping","toComment","concat","sources","map","source","sourceRoot","join","sourceMap","unescape","encodeURIComponent","JSON","stringify","list","toString","this","mediaQuery","alreadyImportedModules","length","id","push","addStylesToDom","styles","options","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","newStyles","base","css","media","part","insertStyleElement","style","target","getElement","insertInto","Error","lastStyleElementInsertedAtTop","stylesInsertedAtTop","insertAt","nextSibling","insertBefore","appendChild","firstChild","before","removeStyleElement","parentNode","removeChild","idx","indexOf","splice","createStyleElement","document","createElement","attrs","type","addAttrs","createLinkElement","link","rel","el","keys","forEach","key","setAttribute","obj","update","remove","result","transform","singleton","styleIndex","singletonCounter","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","updateLink","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","autoFixUrls","undefined","convertToAbsoluteUrls","fixUrls","blob","oldSrc","isOldIE","fn","memo","apply","arguments","window","all","atob","selector","styleTarget","HTMLIFrameElement","contentDocument","head","e","querySelector","DEBUG","newList","mayRemove","textStore","replacement","filter","Boolean","__webpack_exports__","HJN_init_ChartRegist","chartName","__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__","title","ver","html_chart","getElementById","body","innerHTML","html_nav","dropFieldName","__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__","ShowLogTextInit","chart","Graph","init","chartD","DropField","GetConfig","getFunctionByKey","CreateSampleTatLogAndChartShow","json","jsonText","GetJsonConfig","value","eTatOriginal","Execute","ChartShow","eTat","fileReader","createFilter","Plot","List","createSeries","text","ShowLogText","ChartRegistDetail","cTps","showBalloon","replace","Dygraph","synchronize","graph","selection","zoom","element","addEventListener","preventDefault","data_transfer","dataTransfer","types","files","FileReader","funcOnloadend","file","evt","readyState","DONE","filesIdx","filesArrayBuffer","textArray","isNewETAT","getTatLogArray","xy","date","isError","getterOfLine","createGetterOfLine","getterOfXY","createGetterOfXY","line","next","isEoF","ByInterval","parse","x","y","fileIdx","pos","len","array","byteLength","sTatIdx","console","error","err","size","lastModifiedDate","toLocaleString","reader","onloadend","readAsArrayBuffer","msg","ShowText","maxY","Number","MIN_VALUE","maxYIdx","cTpsUnit","unit","cTpsIdx","conc","findIndex","SetDetailDateTime","GetSliderRangedEtat","Add","CTPS","N","seriesSet","rangeTagPlus","rangeTagMinus","rangeTagUnit","rangeCycle","detailRangePlus","detailRangeMinus","detailRangeUnit","cycle","rangeUnit","dt","Math","floor","detailDateTime","from","to","eTatDetail","tatMap","cash","getRangedCash","search","setRangedCash","setDetailRange","clearTimeout","timer","setTimeout","radio","plot","rangePlus","rangeMinus","PointClickCallback","point","seriesConfig","xval","yval","ETPS","EMPS","EAPS","selected","ready","ShowBalloon","isTouchableDevice","PointDblClickCallback","tpsPlot","Render","adjustPlotToY","toX","maxTime","concMax","format","label","ckBox","rangePlusTag","rangeMinusTag","rangeUnitTag","ETAT","max","STAT","CONC","sort","a","b","divCheckedPlots","div","className","CheckBox","CheckRadio","Copyright","TouchPanel","DateToString","D2S","N2S","Cash","setZeroTimeout","Logger","CopyToClipboard","binarySearch","MappedETat","Config","virtualSystemByJson","__WEBPACK_IMPORTED_MODULE_0__HJN_graph_init_js__","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","Uint8Array","last","slice","begin","end","subarray","Array","predicate","TypeError","thisArg","find","average","_average","detectDeviceType","event","_deviceType","changedTouches","removeEventListener","DispatchEventTouchToMouse","isStopTouch","touchHandler","ev","__TOUCH_TYPES","touchstart","touchmove","touchend","__TOUCH_INPUTS","INPUT","TEXTAREA","SELECT","OPTION","input","textarea","select","option","bSame","__ajqmeclk","touches","oEv","getAttribute","tagName","touch","tmpClientX","clientX","tmpClientY","clientY","startTouch","abs","Date","t","newEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","stopImmediatePropagation","stopPropagation","configId","def","val","onFunc","_keyConf","__keyConfig","getValue","v","fieldId","getValueByKey","env","number","nDown","nUp","func_F_SYNC_UPPER","DrawCallback","func_F_SYNC_DETAIL","func_S_SIMU_000","func_S_SIMU_001","Property","_type","_config","cKey","GetterOfLine","maxLength","buf","confLF","str","min","String","fromCharCode","Filter","_fileReader","confF_TIME_FROM","S2D","confF_TIME_TO","confF_TIME","isNaN","confF_TAT_FROM","confF_TAT_TO","MAX_VALUE","confF_TAT","confF_TEXT","confF_TEXT_LEN","confF_TEXT_POS","confF_TEXT_COL","confF_TEXT_REG","RegExp","confF_IS","confF_SEP","charCodeAt","_isIn","getRecordAsText","test","arr","colPos","GetterOfXY","confSEP","confTIME_COL","confTIME_POS","confTIME_LEN","confTIME_FORM","confTIME_YMD","paseDateConf","YYYY","MM","DD","hh","mm","ss","ppp","isYMD","confTIME_UNIT","confTAT_COL","confTAT_POS","confTAT_LEN","confTAT_FORM","confTAT_UNIT","confENDIAN","isLittle","ArrayBuffer","DataView","setUint32","Uint32Array","dateAndValue","parseNumber","log","ds","split","pm","sec","pow","_parseLong","buffer","getUint32","reduceRight","reduce","posMax","sep","nextPos","posX","arrX","strX","posY","arrY","strY","getObjctById","getConfig","getConfigHtml","getHtml","getFunction","func","message","history","h","timeStr","time","sequenceIdx","status","sequenceTime","buff","set","conf","parseInt","substr","match","NaN","config","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","isLocal","minus","ret","datetime","getTimezoneOffset","round","Intl","NumberFormat","S2N","sub","ms","eval","_cash","_ranges","_size","_arg2arr","args","_getKey","getCash","lastTime","count","data","setCash","cashVal","range","global","handleMessage","messageName","timeouts","shift","postMessage","attachEvent","mode","_mode","_logText","_timestamp","_logtime","ts","lastTimestamp","iHtmlBody","ShowIHtmlBody","elementId","execCommand","low","high","isEqual","valueOf","middle","valMiddle","tmp","_tatMap","MappedArray","_abscissa","_conf","step","_row","start","term","rowLv","ceil","e2","cap","_map","_arr","abscissa","eTatArr","boxNum","k","getKey","isMappedMap","_createMappedMappedArray","_createMappedArray","mKey","has","keyValue","indexes","idxArr","lastIndexOf","prefix","ol","_pre","_ols","_ole","_html","_nameHtml","_name","__config","_onFunctions","on","getFunctionById","attribute","labeledForm","typedAttribute","pLabel","sLabel","check","cssClass","classStr","Heap","delFunc","_func","node","_delFunc","_heap","_upHeap","_downHeap","_del","pop","_deletable","_deleteMap","del","some","top","Random","uniform","random","exponential","poisson","lambda","xp","exp","VirtualSystem","resourcesJson","_resources","_log","_start","_end","_simulator","getTime","_now","VirtualResource","thread","timeout","q","qWait","debug","setClients","userName","num","model","baseModel","getModel","holds","tatMin","tat","sequence","times","thinkTimeMin","thinkTime","r","vApp","VirtualApp","setEvent","removeEvent","execute","events","_finish","getResouce","note","hold","free","resources","tran","holding","reverse","_userName","_sequence","_times","_thinkTime","_thinkTimeMin","_baseMessage","_message","_history","_startTime","_sequenceTime","_sequenceIdx","logger","logLv","isLog","resource","highText","errCode","_holdHeap","_holdingQty","user","resourceText","_waitHeap","logText","modify","deleted","startTime","addHistory","getAmount","system","seq","tatAdd","setSequenceTime","abend","holdedResource","logID","logMesseage","isHolding","abendTime","release","holdings","forceTime","now","nextTime","holdCapacity","waitCapacity","queueWait","_system","_waitTimeout","_waitCapacity","_holdTimeout","_holdCapacity","_isScheduled","_interval","queuedTime","app","apps","holdTimeoutTime","nextWaitTimeout","nextHoldTimeout","amount","vApps","marginQty","addQty","vSys","models","clients","cStart","cEnd","HJN","scale","color","tpsN","detailN","chartIdName","globalName","isMain","SERIESES","process","visiblity","renderer","height","isVisiblity","windowId","menuId","menuPlaceOnId","chartId","dyData","dySeries","UNIT_CTPS","labels","order","attr","strokeWidth","drawPoints","connectSeparatedPoints","stepPlot","fillGraph","axis","UNIT_RANGE","g","is_initial","setText","onchange","syncMode","xAxisRange","yAxisRange","toPrecision","addMenu","that","serieses","divLegend","formName","htmlText","destroy","resize","resizes","getElementsByClassName","onClickSetVisibility","ck","elements","checked","setVisibility","dWidth","clientWidth","width","innerWidth","innerHeight","setSeriesSet","floorTime","eTps","sTat","eMps","eAps","dFrom","dTo","maxTat","aveTmp","eTatIdx","concTmp","concNum","XSec","YMax","YNext","cTpsUnits","concTerm","getElementsByName","lastChild","xAxisLabelFormatter","gran","opts","isTop","diffTime","yAxisLabelFormatter","yAxisRanges","diff","days","drawHighlightPointCallback","ctx","cx","cy","drawTatLine","heigth","tXs","toDomXCoord","tXe","tY","toDomYCoord","drawLine","drawPoint","plots","lineDashSegments","beginPath","lineWidth","lineCap","strokeStyle","setLineDash","moveTo","lineTo","stroke","fillStyle","arc","PI","fill","textAlign","fillText","rawData_","trans","clearRect","canvas","setIndexByName_","highlightCallback","pts","row","seriesName","hoverXY","pointClickCallback","annotation","annotationClickHandler","annotationDblClickHandler","minX","xRangeMin","xRangeMax","xRangeUnit","xVal","firstRow","xyData","yVal","lastRow","visibility","inputs","updateOptions","resetZoom","titleHeight","legend","showLabelsOnHighlight","labelsSeparateLines","axes","axisLabelFormatter","axisLabelWidth","independentTicks","logscale","y2","drawGrid","gridLinePattern","includeZero","axisLineColor","gridLineColor","pointSize","ylabel","y2label","highlightCircleSize","drawCallback","highlightSeriesOpts","series","labelsKMB","interactionModel","mousedown","defaultInteractionModel","willDestroyContextMyself","dblclick","animatedZooms","canvas_","canvas_ctx_","addIcon_ZoomReset","ann","shortText","anns","ctps","maxX","setAnnotations","legendFormatter","getStyle","html","xHTML","isVisible","yHTML","labelHTML","isHighlighted","getAccordionTag","labelText","isChecked","getInputTag","arg","menuLabel","getATag","preLabel","fileName","funcName","getFuncTag","divMenuId","divMenu","menuDownloadImg","menuDownloadCsv","menuDownloadLog","menuDownloadConc","accordion","_id","menuOpenCsv","menuSaveConfig","menuLoadConfig","menuFilterApply","menuFilterClear","menuSimulatorSimulate","menuSimulatorEditor","divSimulator","jsonEditor","divSimulatorEditor","readOnly","chartDownloadUl","chartViewUl","prev","menuHelpAbout","strFuncName","file_list","save","HJN.Plot.List","HJN.chart.fileReader","_config_File","HJN.chartD.fileReader","menuDownloadBlob","menuBuffToBlob","isSameType","sample","alert","jsonObj","confD","tmpPlots","scrollHeight","getElementsByTagName","dataurl","toDataURL","bin","bom","csv","eTatCsv","separator","maxSize","offset","buff2","arrayBuffer","navigator","msSaveBlob","msSaveOrOpenBlob","divChart","idName","parentElement","__WEBPACK_IMPORTED_MODULE_0__HJN_css__","__WEBPACK_IMPORTED_MODULE_1__libs_dygraph_css__","__WEBPACK_IMPORTED_MODULE_2__HJN_graph_init_js__","eve","hmr","locals","location","baseUrl","protocol","host","currentDir","pathname","fullMatch","origUrl","unquotedOrigUrl","trim","$1","newUrl"],"mappings":"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","file":"bundle.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 5);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tvar styleTarget = fn.call(this, selector);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[selector] = styleTarget;\n\t\t}\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(8);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = HJN_init_ChartRegist;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = CreateSampleTatLogAndChartShow;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__ = __webpack_require__(4);\n\r\n\r\n\r\n// import {Dygraph} from '../libs/dygraph.js';\r\n// import Dygraph from '../libs/extras/synchronizer.js';\r\n\r\n\r\n/* *****1*********2*********3*********4*********5*********6*********7******* */\r\n/**\r\n * HTMLから呼ばれるサンプル実装\r\n * \r\n * @param {string}\r\n *            [chartName=HJN.chartName=\"chart\"] グラフを作成するHTMLタグ名\r\n * @return {ETAT} 終了時刻のTAT（応答時間）時系列データ\r\n * @example window.addEventListener(\"DOMContentLoaded\",function(eve){\r\n *          HJN.init.ChartRegist(\"chart\"); });\r\n */\r\n// export {HJN_init_ChartRegist};\r\nfunction HJN_init_ChartRegist(chartName){ // #70\r\n\r\n\t\"use strict\";\r\n\t// 引数１ ：デフォルトHJN.chartName(\"chart\")\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartName = chartName = chartName || __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartName;\r\n\t// タイトルを設定する #57\r\n\tdocument.title = \"tat log diver \" + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].ver; \r\n\t// htmlを作成する #52\r\n\tvar html_chart = document.getElementById(\"hjn_\" + chartName) || document.body;\r\n\thtml_chart.innerHTML = ''\r\n\t    + '<div id=\"' + chartName + '\"></div>'\r\n        + '<div id=\"' + chartName + 'D\"></div>'\r\n        + '<textarea id=\"lineViewer\" class=\"lineViewer\">logdata</textarea>';\r\n\t// 手前にメニュ－用htmlを作成する #52\r\n\tvar html_nav = document.createElement('nav');\r\n\thtml_nav.innerHTML = ''\r\n\t    + '<header>'\r\n        + '<div id=\"Simulator\"></div>' // #53\r\n        + '<div class=\"statusbar\">'\r\n        + '  <iframe id=\"fileInfo\"></iframe>'\r\n        + '</div>'\r\n        + '<div class=\"hjnBurgerTray\">'\r\n        + '  <input id=\"hjnBoxBuger\" type=\"checkbox\" class=\"hjnBurger hjnResize\" checked=\"checked\" />'\r\n        + '    <label for=\"hjnBoxBuger\" class=\"hjnCtrlBox\"><span></span></label>'\r\n        + '  <div class=\"hjnBurgerTitle\">'\r\n        + '    <input id=\"hjnBoxPlaceOn\" type=\"checkbox\" class=\"hjnBoxSwitch hjnResize\" />'\r\n        + '      <label for=\"hjnBoxPlaceOn\" class=\"hjnCtrlBox\"><span></span></label>'\r\n        + '    <p>'\r\n        + '      <a class=\"hjnLabel4Input\" href=\"../jsdoc/index.html\"'\r\n        + '                target=”_hirosejnJSDoc3”>TAT log diver</a><BR>'\r\n        + '      <a class=\"hjnLabel4Input\" href=\"https://github.com/hirosejn/\"'\r\n        + '                target=”_hirosejnGit”>&copy;2017 Junichiroh Hirose</a>'\r\n        + '    </p>'\r\n        + '  </div>'\r\n        + '  <div class=\"hjnBurgerWrap\">'\r\n        + '    <div class=\"hjnAccordion\">'\r\n        + '      <div id=\"' + chartName + '_menu\"></div>'\r\n        + '      <div id=\"' + chartName + 'D_menu\"></div>'\r\n        + '    </div>'\r\n        + '  </div>'\r\n        + '</div>'\r\n        + '</header>';\r\n\thtml_chart.parentNode.insertBefore(html_nav, html_chart);\r\n\t\r\n\tvar dropFieldName = chartName;\t// ファイルドロップを受け付けるタグ名\r\n\t__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogTextInit(); // 処理時間計測の初期化\r\n\r\n\t// グラフのインスタンスを作成し初期化する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart = new __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Graph(chartName, \"HJN.chart\");\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.init();\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD = new __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Graph(chartName + \"D\", \"HJN.chartD\");\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.init();\r\n\t// ドロップフィールドに、処理を登録する(注：dygraphはイベントリスナーを登録しないとクリック時にエラーが出る）\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.DropField(dropFieldName);\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.DropField(dropFieldName+ \"D\");\r\n\r\n\t// 初期表示データを自動生成する // #53\r\n\t__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"b\" /* Config */].GetConfig(\"Simulator\").getFunctionByKey(\"S_SIMU\")(); // #53\r\n\t\r\n}\r\n\r\n/**\r\n * データを自動生成し表示する\r\n * \r\n * @param {String|Number}\r\n *            [json = HJN_util.virtualSystemByJson.GetJsonConfig(0)]\r\n *            シミュレーション条件JSONテキスト、もしくはサンプルJSON番号\r\n */\r\nfunction CreateSampleTatLogAndChartShow(json){ // #53\r\n    \"use strict\";\r\n    var jsonText;\r\n    if (typeof(json) === \"number\") { // #53\r\n        jsonText = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"m\" /* virtualSystemByJson */].GetJsonConfig(json);\r\n    } else{\r\n        jsonText = json || __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"m\" /* virtualSystemByJson */].GetJsonConfig(0);\r\n    }\r\n    // JSON Editorを更新する\r\n    document.getElementById(\"SimulatorEditor\").value = jsonText;\r\n    // 初期表示データを自動生成する\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTatOriginal = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"m\" /* virtualSystemByJson */].Execute(jsonText);\r\n    // データを表示する\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.ChartShow(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTatOriginal);\r\n}\r\n\r\n/**\r\n * HJN.init.ChartShow: 終了時刻とtatの配列をグラフ表示する\r\n * \r\n * @param {ETAT}\r\n *            HJN.chart.eTatOriginal 終了時刻とtatを含む配列\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.ChartShow = function(eTatOriginal){\r\n    // フィルタしたeTatを取得する #34\r\n    var eTat = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.createFilter().filter(eTatOriginal);\r\n    \r\n    // グラフを初期表示する\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List = []; // #53\r\n    // 上段\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.update(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.createSeries(eTat));\r\n    var text = \"上段表示 [\" + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTat.length + \"]\";\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(text, \"elaps\");       // 処理時間ログ出力\r\n\r\n    // 下段(非同期）\r\n   __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"l\" /* setZeroTimeout */]( function(){\r\n        __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.update(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.ChartRegistDetail(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cTps));\r\n        __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.showBalloon();    // 上段のBalloonを描画する\r\n        var text = \"下段表示 [\" + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.eTat.length + \"]\";\r\n        __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(text, \"elaps\");\r\n        text = \"<mark>Simulated data</mark>[\"\r\n            + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTat.length.toString()\r\n                .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') + \"]\"; // 整数文字列のカンマ編集\r\n        __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(text, \"msg\");\r\n        // 上下段のマウス操作同期設定 #49\r\n        var sync = Dygraph.synchronize(\r\n                 [ __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.graph, __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.graph ],\r\n                 {selection: true, zoom: false});\r\n    });\r\n}\r\n\r\n/**\r\n * HJN.init.DropField: HTMLタグに、CSVファイルのドロップを受付けイベントを登録する\r\n * \r\n * @param {string}\r\n *            dropFieldName ファイルのドロップイベントを受けるフィールド名\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.DropField = function (dropFieldName) {\r\n\t\"use strict\";\r\n\t// 第一引数で指定された名前の ID 属性のエレメントを取得する\r\n\tvar element = document.getElementById(dropFieldName);\r\n\t\r\n\t// ドラッグ操作中に実行されるイベント（マウスカーソルが要素内に滞在中）\r\n\telement.addEventListener(\"dragover\" , function (e){\r\n\t\te.preventDefault();   // ドロップを許可し受け入れを表明\r\n\t});\r\n\t\r\n\t// ドロップ時に実行されるイベント\r\n\telement.addEventListener(\"drop\", function (e){\r\n\t\t\tvar data_transfer = e.dataTransfer;\t\t// DataTransfer オブジェクトを取得する\r\n\t\t\tif(!data_transfer.types) return;\t\t// ファイルのコンテンツタイプを取得できたことを確認する\r\n\t\t\tvar files = data_transfer.files;\t// ファイルのリストを取得する\r\n\t\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.FileReader(files);\r\n\t\t\te.preventDefault();\t\t// デフォルトのドロップ機能を無効化\r\n\t});\r\n};\r\n\r\n/**\r\n * HJN.init.FileReader: 指定されたファイルを読込んで処理する\r\n * \r\n * @param {Object}\r\n *            files ファイルハンドラ\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.FileReader = function (files){  // #15\r\n\t\"use strict\";\r\n\tfor(var i = 0; i < files.length; i++){\t// データを順番に取得する\r\n\t\ttry{\r\n\t\t\t// ファイルを取得する\r\n\t\t\tvar file = files[i];\r\n\t\t\t// ログ出力用にファイル名（サイズ）を編集する\r\n\t\t\tvar textArray =\t\"<BR><mark><b>\" + file.name + \"</b></mark> \" +\r\n\t\t\t\t\t\t\t\"[\"+ file.size + \"byte] \" + \r\n\t\t\t\t\t\t\tfile.lastModifiedDate.toLocaleString() +\"<BR>\";\r\n\t\t\t// ファイルの読み込みに成功したら、その内容をドロップエリアに追記して表示する\r\n\t\t\tvar reader = new FileReader();\r\n\t\t\treader.onloadend = funcOnloadend.bind(this, files[i], i);\r\n\t\t\t// ファイルにArrayBufferで参照を取得する（loadイベントを起こす）\r\n\t\t    reader.readAsArrayBuffer(files[i]);\r\n\t\t}catch(e){\r\n\t\t\t// 第一引数のテキストアレイの内容を#fileInfoのiframeに表示する\r\n\t\t\tvar msg = \"The \" + i + \"th dropped object is not a file\";\r\n\t\t\t__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowText( [\"<mark>\"+msg+\"</mark>\"] );\r\n\t\t\tconsole.error(\"[%o]%o\",msg,e );\r\n\t\t}\r\n\t}\r\n\r\n\t// 内部関数：ファイルを読み込みｸﾞﾗﾌを表示する（指定ファイルを読み込んだ後に呼び出される） #23\r\n    function funcOnloadend(file, i, evt) {\r\n        if (evt.target.readyState === FileReader.DONE) { // DONE == 2\r\n            var filesIdx = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].files.length;\r\n            // ファイルの先頭2行をログ表示する\r\n            __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].filesArrayBuffer[filesIdx] = evt.target.result;\r\n            __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogTextInit();              // 情報表示 : 初期化\r\n            __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(textArray, \"msg\");  // 情報表示：ドロップファイル情報\r\n            // 指定ファイルを読み込む\r\n            // CSVファイルを上段用eTatに展開する[{x:, y:,pos:,len:},...] 全件展開する\r\n            if (i === 0 && __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.isNewETAT()){\r\n                // 新規モードかつ、同時複数ファイル指定時の最初のファイルのとき、新たに作成する\r\n                __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].files = [file];\r\n                __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTatOriginal = getTatLogArray(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].filesArrayBuffer, filesIdx);\r\n            } else { // 2件目以降のファイルのとき、もしくは、追加モード\"ADDDATA\"のとき、追加する\r\n                __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].files.push(file);\r\n                __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTatOriginal = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTatOriginal.concat(\r\n                        getTatLogArray(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].filesArrayBuffer, filesIdx));\r\n            }\r\n            \r\n            // 全ファイルを読み込んだらグラフを描画する\r\n            if (__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].files[__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].files.length - 1] === file){ // 指定ファイル群の最後のファイルを処理しているとき\r\n                // フィルタしたeTatを取得する #34\r\n                var eTat = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.createFilter().filter(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTatOriginal);\r\n\r\n                // 上段グラフを描画する（ eTatから上段用 時系列分析データ(seriesSet)を展開する）\r\n                __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.update(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.createSeries(eTat));\r\n                __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"上段表示\", \"elaps\");\r\n\r\n                // 下段用データの展開とグラフ描画（非同期処理）\r\n                __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List = [];\r\n                __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"l\" /* setZeroTimeout */](function(){\r\n                    // 下段グラフを描画する（下段用 時系列分析データ(seriesSet)を展開する）\r\n                    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.update(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.ChartRegistDetail(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cTps));\r\n                    // 上段のBalloonを描画する(上段update時にはplots登録されていないので、ここで処理）\r\n                    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.showBalloon();\r\n                    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"下段表示\", \"elaps\");\r\n                    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"<mark>\"+ __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].files[0].name +\r\n                            \"[\"+ __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTat.length +\r\n                            \"]を表示しました</mark>\", \"msg\");\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\t// 内部関数： 指定ファイルの先頭ｎ行を、改行文字<BR> のテキストに変換してリターンする\r\n\tfunction topLines(file, n) {\r\n\t    var fileInfo = \"\",\r\n\t        line;\r\n\t    try{    // 先頭からnレコード取得\r\n\t        var getterOfLine = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.createGetterOfLine(file);\r\n\t        for (var i = 0; i < n; i++) {\r\n\t            line = getterOfLine.next();\r\n\t            fileInfo += line.str + \"<BR>\";\r\n\t        }\r\n\t    }catch (e) {\r\n\t        alert(\"[HJN.init.DropField 改行コードの無いファイルは扱えません]\");\r\n\t        console.error(e);\r\n\t    }\r\n\t    return fileInfo;\r\n\t}\r\n\r\n    // 内部関数： CSVファイルを読み込み、TatLog用アレイ[{x:日時, y:値, pos:レコード開始位置,\r\n    // len:レコード長},...]に展開する\r\n\tfunction getTatLogArray(files, idx) { // arg0:csvﾌｧｲﾙのファイルﾊﾟｽ\r\n\t    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"----- read file -----------------------------\",\"calc\");\r\n\t    var file = files[idx], // #23\r\n\t        eTat = [],\r\n\t        xy = {date: 0, value: 0, isError: false },\r\n\t        i = 0,  // timelog用\r\n\t        getterOfLine = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.createGetterOfLine(file),\r\n\t        getterOfXY = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.createGetterOfXY(),\r\n\t        line = getterOfLine.next();     // 先頭行の初期処理\r\n\t    while (!line.isEoF) {               // 以降最終行まで処理する\r\n\t        try {\r\n\t            __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ByInterval(i++, line); // 一定時刻毎に進捗を出力する\r\n\t            xy = getterOfXY.parse(line);\r\n\t            if(!xy.isError){\r\n\t                eTat.push( {x: xy.x, y: xy.y, fileIdx: idx, // #23\r\n\t                    pos: line.pos, len: line.array.byteLength, sTatIdx: 0} );\r\n\t            }\r\n\t            line = getterOfLine.next(); // #24\r\n\t        } catch (e) {   /* 改行だけレコードをスキップ */\r\n\t            console.error(e);\r\n\t            console.err(\"err: %o\",e);\r\n\t        }\r\n\t    }\r\n\t    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[0:file readed & got eTat]---------------\",\"calc\");\r\n\t    return eTat;\r\n\t}\r\n};\r\n\r\n\r\n\r\n/**\r\n * 詳細グラフ用機能： 表示対象期間のcTpsから、eTps範囲を取得し、詳細Seriesを生成する。併せてPlotsを登録する。\r\n * \r\n * @param {xMs}\r\n *            cTps 日時（ミリ秒単位）\r\n * @return {seriesSet} dygraph用時系列データ配列\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.ChartRegistDetail = function(cTps){\r\n\t\"use strict\";\r\n\t// CTPSの最大値となるplotを取得する\r\n\tvar maxY =Number.MIN_VALUE,\r\n\t\tmaxYIdx = -1;\r\n\tcTps.forEach(function(c, i){\r\n\t\tif (maxY < c.y){\r\n\t\t\tmaxY = c.y;\r\n\t\t\tmaxYIdx = i;\r\n\t\t}\r\n\t});\r\n\tif(0 <= maxYIdx){\t// #26\r\n\t\t// 秒単位より大きいとき、最大値を含む時刻(秒)に補正する #38\r\n\t\tvar x = cTps[maxYIdx].x;\r\n\t\tif(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cTpsUnit.unit >= 1000){\r\n\t\t\tvar cTpsIdx = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.conc.findIndex(function(e,i){return e.y === cTps[maxYIdx].y;});\r\n\t\t\tx = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.conc[cTpsIdx].x;\r\n\t\t}\r\n\t\t// slider rangeに、下段の表示時刻を設定する\r\n\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.SetDetailDateTime(x);\r\n\t\t// eTpsの範囲を取得し、詳細用seriesSet(HJN.chartD.seriesSet）を設定する\r\n\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.createSeries(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.GetSliderRangedEtat());\r\n\t\t// plotsアイコン用 HJN.Plot.Listに、下段表示したplotを登録する\r\n\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.Add(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].CTPS.N, cTps[maxYIdx].x, cTps[maxYIdx].y);\r\n\t}\r\n\t__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[6:Plot added] \" + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.length + \" plots\",\"calc\");\r\n\r\n\treturn __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.seriesSet;\r\n};\r\n/**\r\n * 詳細グラフ用機能： sliderRangeで指定された範囲のeTatを返却する\r\n * \r\n * @return {ETAT} 詳細グラフ用eTat\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.GetSliderRangedEtat = function(n) {\r\n\t\"use strict\";\r\n\t// 指定時刻（ｄｔ ± range）を取得する\r\n\tvar rangeTagPlus  = document.getElementById(\"DetailRangePlus\");\r\n\tvar\trangeTagMinus = document.getElementById(\"DetailRangeMinus\");\r\n    var rangeTagUnit  = document.getElementById(\"DetailRangeUnit\"); // #48\r\n\tvar\trangeCycle = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cTpsUnit.unit / 1000; // #38\r\n    // HJNグローバル変数に退避する\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangePlus  = rangeTagPlus  ? +rangeTagPlus.value  : 1 + rangeCycle; // 幅（秒）\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeMinus = rangeTagMinus ? +rangeTagMinus.value : rangeCycle;     // 幅（秒）\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeUnit  = rangeTagUnit  ? +rangeTagUnit.value  : __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cycle; // #48\r\n\r\n\tvar rangeUnit = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeUnit; // #48\r\n\tvar dt = Math.floor(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailDateTime / rangeUnit) * rangeUnit; // 中央時刻(ミリ秒)\r\n\tvar\tfrom = dt - __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeMinus * rangeUnit;  // #48\r\n\tvar\tto = dt + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangePlus  * rangeUnit;  // 幅（ミリ秒）\r\n\tvar eTatDetail = [{x: 0, y: 0.001, sTatIdx: 0}];\t// tatMapが無い場合の返却値\r\n\tif (__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTat.tatMap){\t// #18\r\n\t\t// eTatDetailがレンジキャッシュにあるか確認する #30\r\n\t\teTatDetail = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTat.cash.getRangedCash(from, to);\r\n\t\tif(eTatDetail === undefined){\r\n\t\t\t// キャッシュヒットしないとき、eTatDetailを抽出し、キャッシュにセットする\r\n\t\t\teTatDetail = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTat.tatMap.search(from,to);\r\n\t\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.eTat.cash.setRangedCash(eTatDetail, from, to);\r\n\t\t}\r\n\t}\r\n\t__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[0:HJN.init.GetSliderRangedEtat] \",\"calc\");\r\n\t\r\n\treturn eTatDetail;\t// 詳細グラフ用eTatを返却する\r\n};\r\n/**\r\n * 詳細グラフ用機能： 表示期間変更時に、Detailを再描画する（onChangeイベント時に呼び出される）\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.setDetailRange = function(){\r\n    \"use strict\";\r\n    clearTimeout(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].timer);\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].timer = setTimeout(function(){\r\n            __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogTextInit(\"[-:HJN.init.setDetailRange]start---------------\",\"calc\");\r\n            // 表示中Plotsのrangeを更新する #30\r\n            var i = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.findIndex(function(e){ return (e.radio === true); });\r\n            var plot = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List[i];\r\n            plot.rangePlus  = document.getElementById(\"DetailRangePlus\").value;\r\n            plot.rangeMinus = document.getElementById(\"DetailRangeMinus\").value;\r\n            var rangeTagUnit = document.getElementById(\"DetailRangeUnit\"); // #48\r\n            __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeUnit  = rangeTagUnit  ? +rangeTagUnit.value  : __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cycle; // #57\r\n            plot.rangeUnit  = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeUnit; // #48\r\n\r\n            // 下段データを登録する\r\n            __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.seriesSet = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.createSeries( __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.GetSliderRangedEtat() );\r\n            // 下段グラフを描画する\r\n            __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Graph.prototype.update.call(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD, __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.seriesSet);\r\n        }, 750);    // 750ms 値の変更がなかった時に、処理を開始する\r\n};\r\n/**\r\n * 詳細グラフ用機能： 指定日時を秒単位に丸めて、FORMのslider Rangeに設定する\r\n * \r\n * @param {xMs}\r\n *            date 日時（ミリ秒単位）\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.SetDetailDateTime=function(date) {\r\n    \"use strict\";\r\n    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailDateTime = Math.floor(date / 1000) * 1000;    // 秒単位に丸める\r\n};\r\n\r\n/**\r\n * Plot一覧（過去にクリックしたplotの一覧）およびグラフのplot(点)のクリック時の処理群\r\n * \r\n * @namespace\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot = {}; // plot関連\r\n\r\n/**\r\n * Plotの一覧\r\n * \r\n * @type array.<String, Boolean, Boolean, index, xMs, Number, Number, Number>\r\n * @prop {String} label Plot一覧に表示する文字列\r\n * @prop {Boolean} ckBox チェックボックスの選択状態<br>\r\n *       （選択後すぐに削除されるのでtrueとなることはない）\r\n * @prop {Boolean} radio ラジオボタンの選択状態\r\n * @prop {index} n グラフ番号\r\n * @prop {xMs} x xの値\r\n * @prop {Number} y yの値\r\n * @prop {Number} rangeMinus 表示幅時間マイナス（秒）\r\n * @prop {Number} rangePlus 表示幅時間プラス（秒）\r\n * @prop {Number} rangeUnit 表示幅時間 単位（sec:1/min:60/hour:3600/day:86400)\r\n * \r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List = [];\r\n\r\n/**\r\n * point/baloonクリック時呼出し用関数<br>\r\n * 詳細グラフを描画し、Plotを更新する\r\n * \r\n * @param {Objcet}\r\n *            point dygraph の point\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.PointClickCallback = function(point) {\r\n\t\"use strict\";\r\n\t__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[0:PointClickCallback]start---------------\",\"calc\");\r\n\tvar\tn = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].seriesConfig.findIndex(function(e){\treturn e.key === point.name; }),// シリーズ番号\r\n\t\tx = point.xval,\t// ミリ秒\r\n\t\ty = point.yval; // 秒\r\n\r\n\t// ETPS,EMPS,EAPSのとき、TATが幅に含まれるよう、幅(range)を拡大する #57\r\n    var rangeTagUnit = document.getElementById(\"DetailRangeUnit\");\r\n    var rangeUnit  = rangeTagUnit  ? +rangeTagUnit.value : __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cycle;\r\n\tif ((n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].ETPS.N || n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].EMPS.N || n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].EAPS.N) \r\n            && rangeUnit < __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cycle) {\r\n        rangeUnit = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cycle;\r\n        __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeUnit = rangeUnit;\r\n        // selectリストの選択を、rangeUnitに合わせる #57\r\n        for (var i = 0; i < rangeTagUnit.length; i++) {\r\n            if(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].detailRangeUnit <= rangeTagUnit[i].value){\r\n                rangeTagUnit[i].selected = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\t// グラフの日時で、詳細グラフを再作成する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.SetDetailDateTime(x);\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.createSeries(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.GetSliderRangedEtat(n)); // #57\r\n\t// 下段の残処理終了後、下段データを登録描画する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.graph.ready(function(){ __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.update(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.seriesSet, n); }); // #57\r\n\t// Hover表示しているplotを、HJN.Plot.Listに登録し、plotsアイコンを再描画する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.Add(n, x, y);\r\n\t// Balloonを再描画する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.ShowBalloon();\r\n    // タッチデバイスでないとき、lineViewerに表示をクリップボードにコピーする\r\n\tif (!__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"j\" /* TouchPanel */].isTouchableDevice()) { // #22\r\n\t    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"c\" /* CopyToClipboard */](\"lineViewer\"); // #61\r\n\t}\r\n};\r\n\r\n/**\r\n * point/baloonダブルクリック時呼出し用関数<br>\r\n * Plotを削除する\r\n * \r\n * @param {object}\r\n *            plot dygraphのpoint\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.PointDblClickCallback = function(point) {\r\n\t\"use strict\";\r\n\t// 指定plotを削除する\r\n\tvar n = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].seriesConfig.findIndex(function(e){\treturn e.key === point.name; }),\r\n\t\tx = point.xval,\t// ミリ秒\r\n\t\ti = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.findIndex(function(p){\r\n\t\t\t\treturn(p.n === n && p.x === x) ||\t// 完全一致\r\n\t\t\t\t\t\t(\"tpsPlot\" in p &&\t\t\t// 詳細一致\r\n\t\t\t\t\t\tp.tpsPlot.n === n && p.tpsPlot.x === x); });\r\n\tif(0 <= i) __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.splice(i, 1);\r\n\t\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.Render();\r\n\t// グラフ内の吹き出しを再表示する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.ShowBalloon();\r\n};\r\n\r\n/**\r\n * クリック時のHoverからHJN.Plot.Listを設定する\r\n * \r\n * @param {index}\r\n *            n グラフのシリーズ番号\r\n * @param {xMs}\r\n *            x マウスクリック時のxの値（ミリ秒）\r\n * @param {Number}\r\n *            y マウスクリック時のyの値\r\n * @return {index} i plots内のplotの位置\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.Add=function(n, x, y) {\r\n\t\"use strict\";\r\n\t// 各plotを非選択状態とする\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.forEach(function(e){e.radio = false;});\r\n\t// ラベルフォーマットの設定\r\n\tvar format = (n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].ETPS.N || n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].CTPS.N) ? \"hh:mm:ss\" : \"hh:mm:ss.ppp\",\r\n\t\tlabel = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](x, format, true) + \" \" + // #61\r\n\t\t\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].seriesConfig[n].label.replace(\"%N\",__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"i\" /* N2S */](y));\r\n\t// 幅(range)を取り込む（秒）\r\n\tvar\trangePlusTag  =  document.getElementById(\"DetailRangePlus\"),\r\n\t\trangeMinusTag =  document.getElementById(\"DetailRangeMinus\"),\r\n\t    rangeUnitTag  =  document.getElementById(\"DetailRangeUnit\"), // #48\r\n        rangeUnit  = rangeUnitTag  ? +rangeUnitTag.value : __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cycle, // #57\r\n\t    rangePlus  = rangePlusTag  ? +rangePlusTag.value  : 1,\t// 幅\r\n\t\trangeMinus = rangeMinusTag ? +rangeMinusTag.value : 1;\r\n\r\n\t// 既存Poltを検索する\r\n\tvar\ti = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.findIndex(function(p){\r\n\t\t\t\treturn(p.n === n && p.x === x) ||\t// 完全一致\r\n\t\t\t\t\t\t(\"tpsPlot\" in p &&\t\t\t// 詳細一致\r\n\t\t\t\t\t\tp.tpsPlot.n === n && p.tpsPlot.x === x); });\r\n\t// Plotを設定する\r\n\tvar plot;\r\n\tif(0 <= i){\t// 既存Plotsにある時、選択状態とし、rangeを再設定する\r\n\t\tplot = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List[i];\r\n\t\tplot.radio = true;\r\n\t\tplot.rangePlus  = rangePlus; // 秒\r\n\t\tplot.rangeMinus = rangeMinus;\r\n\t    plot.rangeUnit  = rangeUnit; // #48\r\n\t}else{\t\t// 既存に無いときPlotを追加する\r\n\t    // ETAT,STATのとき、TATが幅に含まれるよう、幅(range)を拡大する #30 #48 #57\r\n\t    if (n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].ETAT.N){\r\n\t        rangeMinus = Math.max(rangeMinus, \r\n\t                Math.floor(x / rangeUnit) - Math.floor((x - y) / rangeUnit)); // #48\r\n\t        document.getElementById(\"DetailRangeMinus\").value = rangeMinus; \r\n\t    }else if (n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].STAT.N){\r\n\t        rangePlus = Math.max(rangePlus,\r\n\t                Math.floor((x + y) / rangeUnit)) - Math.floor(x / rangeUnit) ; // #48\r\n\t        document.getElementById(\"DetailRangePlus\").value = rangePlus;\r\n\t    }\r\n\t    // Plotを追加する\r\n\t    plot = {label: label, ckBox:false,\r\n\t\t\t\t radio:true, n: n, x: x, y: y, \r\n\t\t\t\t rangePlus: rangePlus, rangeMinus: rangeMinus, rangeUnit: rangeUnit };\r\n\t\tif (n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].CTPS.N){\t\t\t// CTPSのとき秒内最大CONCとして登録する\r\n\t\t\tadjustPlotToY(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.conc, x, x + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cTpsUnit.unit, y, \r\n\t\t\t        __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].CONC.N, plot, rangePlus, rangeMinus, rangeUnit);\r\n\t\t}else if (n === __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].EMPS.N){\t// EMPSのとき秒内最大ETATとして登録する\r\n\t\t\tadjustPlotToY(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.eTat, x, x + __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.cycle, y, \r\n\t\t\t        __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].ETAT.N, plot, rangePlus, rangeMinus, rangeUnit);\r\n\t\t}else {\t// CTPS,EMPS以外の時、選択Plotを追加する\r\n\t\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.push(plot);\r\n\t\t}\r\n\t\t// Plotsを時刻順にソートする\r\n\t\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.sort(\r\n\t\t\t\tfunction(a, b) { return a.x - b.x; });\r\n\t\ti = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.findIndex(\r\n\t\t\t\tfunction(p){ return(p.n === n && p.x === x); });\r\n\t}\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.Render();\r\n\treturn i;\t// plots内のplotの位置\r\n\r\n\t\r\n\t// 内部関数：プロット位置を、指定秒から詳細グラフの最大時刻に変更する #19\r\n\tfunction adjustPlotToY(conc, x, toX, y, n, plot, rangePlus, rangeMinus, rangeUnit){\r\n\t\tvar\tmaxTime = 0,\r\n\t\t\tconcMax = 0,\r\n\t\t\ti = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"k\" /* binarySearch */](x, conc, function(e){ return e.x; });\r\n\t\tfor (; i < conc.length && conc[i].x < toX; i++){\t// #26\r\n\t\t\tif (concMax <= conc[i].y){\r\n    \t\t\t\tmaxTime = conc[i].x;\r\n    \t\t\t\tconcMax = conc[i].y;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (concMax === y) { // 補正すべき時刻が求まったときCONC,ETATを追加する #23\r\n            x = maxTime;\r\n            format = \"hh:mm:ss.ppp\";\r\n            label = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](x, format, true) + \" \" + // #61\r\n                    __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].seriesConfig[n].label.replace(\"%N\",__WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"i\" /* N2S */](y));\r\n            __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.push( {label: label, ckBox:false,\r\n                 radio:true, n: n, x: x, y: y, \r\n                 rangePlus: rangePlus , rangeMinus: rangeMinus, rangeUnit: rangeUnit,\r\n                 tpsPlot: plot} );  // 詳細plotには、tpsのplot情報も保持する\r\n        } else { // 補正すべき時刻がない場合、元のPlotを追加する\r\n            __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.push(plot);\r\n        }\r\n\r\n\t}\r\n};\r\n\r\n/**\r\n * HJN.Plot.Listを再表示する\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.Render = function() {\r\n\t\"use strict\";\r\n    var divCheckedPlots =  document.getElementById(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartName + \"Plots\");\r\n\t// 既存のアイコンを削除する\r\n\twhile (divCheckedPlots.firstChild){\r\n\t\tdivCheckedPlots.removeChild(divCheckedPlots.firstChild);\r\n\t}\r\n\t// 登録されているplots分のアイコンを追加する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.forEach( function(e, i){\r\n\t\tvar div = document.createElement('div'),\t\t// 要素の作成\r\n\t\t\tradio = e.radio ? 'checked=\"checked\"' : '',\t// radio選択指定\r\n\t\t\tckBox = e.ckBox ? 'checked=\"checked\"' : '';\t// check boxのチェック指定\r\n\t\tdiv.className = \"hjnPlot\";\r\n\t\tdiv.innerHTML =\r\n\t    \t'<input type=\"checkbox\" value=\"' + e.x + '\" id=\"checkBox_' + i + '\" ' + ckBox +\r\n\t    \t\t\t' title=\"delete\" onclick=\"HJN.Plot.CheckBox(' + i + ')\">' +\r\n\t    \t'<label for=\"checkBox_' + i + '\"></label>' +\r\n\t    \t'<input type=\"radio\" name=\"CheckedPlot\" id=\"SaveTime_' + i + '\" ' + radio +\r\n\t    \t\t\t' onclick=\"HJN.Plot.CheckRadio(' + i + ')\">' +\r\n\t    \t'<label for=\"SaveTime_' + i + '\">' + e.label + '</label>';\r\n    \tdivCheckedPlots.appendChild(div);\r\n\t} );\r\n};\r\n/**\r\n * PlotのChekBox変更時呼出用関数<br>\r\n * 指定Plotを削除し、PlotsとBaloonを再描画する\r\n * \r\n * @param {index}\r\n *            i 削除対象plotの、plots内位置\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.CheckBox = function(i) {\r\n\t\"use strict\";\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.splice(i,1);\t\t// checkされたplotを削除する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.Render();\t\t\t// Plotsを再描画する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.ShowBalloon();\t\t// グラフのBalloonを再描画する\r\n};\r\n/**\r\n * PlotのRadioボタン変更時呼出用関数<br>\r\n * radio選択時に下段グラフを更新する\r\n * \r\n * @param {index}\r\n *            i 選択されたplotの、plots内位置\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.CheckRadio = function(i) {\r\n\t\"use strict\";\r\n\t// HJN.Plot.Listにradioの状態を反映する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List.forEach(function(e){ e.radio = false; });\r\n\tvar plot = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.List[i];\r\n\tplot.radio = true;\r\n\t// グラフの日時で、詳細グラフを再作成する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.SetDetailDateTime(plot.x);\t// 中心時刻に設定する\r\n\tdocument.getElementById(\"DetailRangePlus\").value = plot.rangePlus;\t// 幅を設定する\r\n\tdocument.getElementById(\"DetailRangeMinus\").value = plot.rangeMinus;\r\n\tdocument.getElementById(\"DetailRangeUnit\").value = plot.rangeUnit; // #48\r\n\tvar n = plot.tpsPlot ? plot.tpsPlot.n : plot.n; // #61\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.createSeries( __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.GetSliderRangedEtat(n) ); // #57\r\n\t// 下段データを登録描画する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.update(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.seriesSet, n); // #57\r\n\t// Balloonを再描画する\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.ShowBalloon();\r\n};\r\n/**\r\n * Balloonを再描画する\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Plot.ShowBalloon =function(){\r\n\t\"use strict\";\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.showBalloon();\r\n\t__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.showBalloon();\r\n};\r\n\r\n/**\r\n * 著作権表記文字を取得する\r\n * \r\n * @return {String} str 著作権表記文字\r\n */\r\n__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].init.Copyright=function(){\r\n    \"use strict\";\r\n    var str =   \"&copy; 2017 Junichiroh Hirose\\n\" +\r\n            \"https://github.com/hirosejn/HJN\";\r\n    return str;\r\n};\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return TouchPanel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return FileReader; });\n/* unused harmony export S2D */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return DateToString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return D2S; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return N2S; });\n/* unused harmony export S2N */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Cash; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return setZeroTimeout; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return Logger; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return CopyToClipboard; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return binarySearch; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return MappedETat; });\n/* unused harmony export MappedArray */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Config; });\n/* unused harmony export Heap */\n/* unused harmony export Random */\n/* unused harmony export VirtualSystem */\n/* unused harmony export VirtualApp */\n/* unused harmony export VirtualResource */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return virtualSystemByJson; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HJN_graph_init_js__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__ = __webpack_require__(4);\n\r\n\r\n\r\n\r\n\r\n/** ie11 互換用 * */\r\nif(!Number.MAX_SAFE_INTEGER) Number.MAX_SAFE_INTEGER = 9007199254740991; // #59\r\nif(!Number.MIN_SAFE_INTEGER) Number.MIN_SAFE_INTEGER = -9007199254740991;\r\n\r\nif(!Uint8Array.prototype.indexOf){\r\n    Uint8Array.prototype.indexOf = function(target,index){\r\n        \"use strict\";\r\n        index = (index === undefined) ? 0 : index;  // #29\r\n        for(var i = index, last = index + 4096; i < last; i++){ // 暫定：1レコード4KBまでチェック\r\n            if(this[i] === target) return i; \r\n        }\r\n        return -1;\r\n    };\r\n}\r\nif (!Uint8Array.prototype.slice) {  // #29\r\n    Uint8Array.prototype.slice = function(begin, end) {\r\n        \"use strict\";\r\n        return this.subarray(begin, end);\r\n    };\r\n}\r\n// https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\r\nif (!Array.prototype.findIndex) {\r\n    Array.prototype.findIndex = function(predicate) {\r\n          \"use strict\";\r\n      if (this === null) throw new TypeError('Array.prototype.findIndex called on null or undefined');\r\n      if (typeof predicate !== 'function') throw new TypeError('predicate must be a function');\r\n      var list = Object(this), length = list.length >>> 0, thisArg = arguments[1], value;\r\n      for (var i = 0; i < length; i++) {\r\n        value = list[i];\r\n        if (predicate.call(thisArg, value, i, list)) return i;\r\n      }\r\n      return -1;\r\n    };\r\n  }\r\n// https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find\r\nif (!Array.prototype.find) {\r\n    Array.prototype.find = function(predicate) {\r\n        \"use strict\";\r\n      if (this === null) throw new TypeError('Array.prototype.find called on null or undefined');\r\n      if (typeof predicate !== 'function')  throw new TypeError('predicate must be a function');\r\n      var list = Object(this), length = list.length >>> 0, thisArg = arguments[1], value;\r\n      for (var i = 0; i < length; i++) {\r\n        value = list[i];\r\n        if (predicate.call(thisArg, value, i, list))  return value;\r\n      }\r\n      return undefined;\r\n    };\r\n  }\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc タッチパネル用ツール\r\n *            <p>\r\n *            参考 {@https://code.i-harness.com/ja/q/4f2389}\r\n * \r\n * @param {Number}\r\n *            [average=0.5] 平均値\r\n * @example var r = HJN_util.TouchPanel(10), val = r.exponential();\r\n */\r\nvar TouchPanel = (function() { // #56\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function TouchPanel(average){\r\n        if(!(this instanceof TouchPanel)) return new TouchPanel(average);\r\n        this._average = average || 0.5;\r\n    }\r\n    /** @private */\r\n    \r\n    // public\r\n    /**\r\n     * タッチデバイスか判定する\r\n     * <p>\r\n     * クラスロード後、touchstart と mouosemove の初回のイベントがどちらが先に発生したかにより判定する 参考\r\n     * {@link https://lab.syncer.jp/Web/JavaScript/Snippet/44/}\r\n     * \r\n     * @memberof TouchPanel\r\n     * @return {String} 先に検出したイベントがマウス移動のとき false、以外のときtrue\r\n     * \r\n     */\r\n    TouchPanel.isTouchableDevice = function() {\r\n        Logger.ShowText([TouchPanel._deviceType]);\r\n        return true; // (TouchPanel._deviceType === \"MOUSE\") ? false : true;\r\n    }\r\n    // タッチデバイスか判定する（クラス定数）\r\n    TouchPanel._deviceType = \"SHIMULATED_TOUCH\";\r\n    function detectDeviceType(event) {\r\n        TouchPanel._deviceType = event.changedTouches ? \"TOUCH\" : \"MOUSE\" ;\r\n        document.removeEventListener(\"touchstart\", detectDeviceType) ;\r\n        document.removeEventListener(\"mousemove\", detectDeviceType) ;\r\n    }\r\n    document.addEventListener(\"touchstart\", detectDeviceType) ;\r\n    document.addEventListener(\"mousemove\", detectDeviceType) ;\r\n\r\n    /**\r\n     * タッチパネル操作をマウス操作に転送する\r\n     * <p>\r\n     * 参考 {@link https://code.i-harness.com/ja/q/4f2389}\r\n     * \r\n     * @memberof HJN_util.TouchPanel\r\n     * @param {Object}\r\n     *            element 対象dom要素\r\n     * @param {Boolean}\r\n     *            [isStopTouch=false] 元のタッチのデフォルトイベントを消すか（個別に登録されているリスナーには無関係）\r\n     * \r\n     * @example HJN_util.DispatchEventTouchToMouse();\r\n     */\r\n    TouchPanel.DispatchEventTouchToMouse = function(element, isStopTouch) { // #22\r\n        \"use strict\";\r\n        element.addEventListener(\"touchstart\", touchHandler, true);\r\n        element.addEventListener(\"touchmove\", touchHandler, true);\r\n        element.addEventListener(\"touchend\", touchHandler, true);\r\n        element.addEventListener(\"touchcancel\", touchHandler, true);\r\n        return;\r\n\r\n        function touchHandler(ev) {\r\n            var bIgnoreChilds = false;\r\n            if( !window.__TOUCH_TYPES ) {\r\n                window.__TOUCH_TYPES  = { touchstart:'mousedown', touchmove:'mousemove', touchend:'mouseup' };\r\n                window.__TOUCH_INPUTS = { INPUT: 1, TEXTAREA: 1, SELECT: 1, OPTION: 1,\r\n                                         'input':1,'textarea':1,'select':1,'option':1 };\r\n            }\r\n            var bSame = (ev.target == this);\r\n            if (bIgnoreChilds && !bSame) { return; }\r\n            // Get if object is already tested or input type\r\n            var b = (!bSame && ev.target.__ajqmeclk);\r\n            // allow multi-touch gestures to work\r\n            if (b === true || !ev.touches || ev.touches.length > 1 || !window.__TOUCH_TYPES[ev.type]) { return; }\r\n\r\n            var oEv = (!bSame && typeof b != 'boolean') ? ev.target.getAttribute('events') : false;\r\n            var b = (!bSame)\r\n                  ? (ev.target.__ajqmeclk = oEv\r\n                      ? (oEv['click'] || oEv['mousedown'] || oEv['mouseup'] || oEv['mousemove']) \r\n                      : false )\r\n                  :false;\r\n            // allow default clicks to work (and on inputs)\r\n            if (b || window.__TOUCH_INPUTS[ev.target.tagName]) { return; } \r\n\r\n            var touch = ev.changedTouches[0];\r\n            var tmpClientX = touch.clientX;\r\n            var tmpClientY = touch.clientY;\r\n            // クリックに変換するタップ誤差範囲\r\n            var CLICK_MARGIN = 20; // px\r\n            var CLICK_DELAY = 1000; // ms\r\n\r\n            // 前回touchstart時の座標と時刻が一定範囲内の時、dygraphがクリックと判定するよう補正する\r\n            if ((ev.type === \"touchstart\" || ev.type === \"touchend\") &&\r\n                    this.startTouch &&\r\n                    Math.abs(this.startTouch.x - touch.clientX) < CLICK_MARGIN && // タッチ補正幅(px)\r\n                    Math.abs(this.startTouch.y - touch.clientY) < CLICK_MARGIN &&\r\n                    +new Date() - this.startTouch.t < CLICK_DELAY) { // タッチ時間(ms)\r\n                // 位置補正\r\n                tmpClientX = this.startTouch.x;\r\n                tmpClientY = this.startTouch.y;\r\n            } else if (ev.type === \"touchstart\"){\r\n                // touchstart時の座標と時刻を退避する\r\n                this.startTouch = {x: touch.clientX, y: touch.clientY, t: +new Date()};\r\n            } else if (ev.type === \"touchend\") {  \r\n                // touchstart時の座標と時刻を初期化する\r\n                this.startTouch = {};\r\n            }\r\n            // マウスイベントを発生させる\r\n            var newEvent = document.createEvent(\"MouseEvent\");\r\n            newEvent.initMouseEvent(\r\n                window.__TOUCH_TYPES[ev.type],    // type\r\n                true,             // bubbles\r\n                true,             // cancelable\r\n                window,           // view\r\n                1,                // detail\r\n                touch.screenX,    // screenX スクリーンサイズ\r\n                touch.screenY,    // screenY\r\n                tmpClientX,       // clientX タッチ座標\r\n                tmpClientY,       // clientY\r\n                false,            // ctrlKey\r\n                false,            // altKey\r\n                false,            // shiftKey\r\n                false,            // metaKey\r\n                0,                // button\r\n                null              // relatedTarget\r\n              );\r\n            touch.target.dispatchEvent(newEvent);\r\n            \r\n            // タッチイベントを止める #22\r\n            if(isStopTouch) {\r\n                ev.stopImmediatePropagation();\r\n                ev.stopPropagation();\r\n                ev.preventDefault();\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n\r\n    /* new */\r\n    return TouchPanel;\r\n}());\r\n\r\n/**\r\n * @class\r\n * @classdesc ファイルをパースして読み込む\r\n *            <p>\r\n *            パース条件指定画面生成つき\r\n */\r\nvar FileReader = (function() {\r\n    \"use strict\";\r\n    /** @static */\r\n    FileReader.prototype.__keyConfig = {};  // configで使用する値の定義\r\n\r\n    /** constructor */\r\n    function FileReader(){\r\n        if(!(this instanceof FileReader)) return new FileReader();\r\n\r\n        this.configId = \"_config_\" + \"File\"; // #53\r\n\r\n        // コンストラクタ内部関数：keyを定義する\r\n        var def = function(key, val, onFunc) {\r\n                    var _keyConf = FileReader.prototype.__keyConfig[key] = {};\r\n                    _keyConf.value = (val === undefined) ? key : val; // getValueByKeyの返却値（デフォルト：keyと同じ文字列）\r\n                    _keyConf.getValue = function () { return (val === undefined) ? key : val; };\r\n                    _keyConf.onFunc = onFunc || null;   // onイベント時に実行する処理（メニューのa属性などで利用）\r\n                    return key;\r\n                };\r\n        var v = function(key, fieldId) { // fieldIdの値を返却値とする(デフォルト： key+\".v\")\r\n                    var _keyConf = FileReader.prototype.__keyConfig[key] = {};\r\n                    _keyConf.value = key;           // getValueByKeyの返却値（デフォルト：keyと同じ文字列）\r\n                    _keyConf.getValue = function () {\r\n                            return Config(\"m\").getValueByKey(fieldId || key + \".v\"); // TODO:\r\n                                                                                                // m\r\n                                                                                                // の指定\r\n                        };\r\n                    return key;\r\n                };\r\n\r\n        // 名称と挙動の定義\r\n        var env = \"File\";\r\n        this[\"_config_\" + env] = Config(env) // #53\r\n            // File Format Config設定画面定義 #51\r\n            .name(\"NEWFILE\").label(null,\"Registered \") // #23\r\n                .radio(\"NEWDATA\", null, \"newly\", true)\r\n                .radio(\"ADDDATA\", null, \"additionally\").n()\r\n            .label(null,\"----- File format definition --------\").n()\r\n            .n(\"<br>\")\r\n            .name(\"LF\").label(null, \"[Line feed code]\").n()\r\n            .radio(v(\"LF_FIX\"), null, \"Fixed Length\")\r\n                .number(\"LF_FIX.v\",  null, \"byte\",\"80\",'style=\"width:60px;\"').n()\r\n            .radio(def(\"LF_WIN\",  13), null, \"Windows:CR(13)+LF(10)\", true).n()\r\n            .radio(def(\"LF_UNIX\", 10), null, \"Unix/Linux:LF(10)\").n()\r\n            .radio(def(\"LF_ZOS\",  15), null, \"zOS:NEL(15)\").n()\r\n            .radio(def(\"LF_MAC\",  13), null, \"Mac:CR(13)\").n()\r\n            .radio(v(\"LF_ELSE\"), null, \"other charcode\")\r\n                .number(\"LF_ELSE.v\", \"(\", \")\", \"10\", 'style=\"width:40px;\"').n()\r\n            .n(\"<br>\")\r\n            .name(\"SEP\").label(null,\"[CSV delimiter]\").n()\r\n            .radio(def(\"SEP_COMMA\", ','), null, \"comma\", true)\r\n            .radio(def(\"SEP_TAB\", '\\t'),   null,\"tab\")\r\n            .radio(v(\"SEP_ELSE\"), null, \"other\")\r\n                .text(\"SEP_ELSE.v\", '\"', '\"', ',', 'size=\"2\" placeholder=\",\"').n()\r\n            .n(\"<br>\")\r\n            .name(\"TIME\").label(null, \"[Timestamp field]\").n()\r\n            .number(\"TIME_COL\", \"\", \"th column of CSV\", \"1\", 'style=\"width:40px;\"').n()\r\n            .name(\"TIME_POS\")\r\n                .number(\"TIME_POS\", \"Position(byte): from\", null, \"1\", 'style=\"width:40px;\"')\r\n                .number(\"TIME_LEN\", \"length\", null, null, 'style=\"width:40px;\"').n()\r\n            .name(\"TIME_FORM\").label(null,\"Format:\").n()\r\n                .radio(\"TIME_FORM_YMD\", \"text\", null, true)\r\n                    .text(\"TIME_YMD\", null, null, null, 'size=\"23\" placeholder=\"YYYY/MM/DD hh.mm.ss.ppp\"').n()\r\n                .radio(\"TIME_FORM_TEXT\", \"(num)\", \"text\")\r\n                .radio(\"TIME_FORM_LONG\", null, \"long\").n()\r\n                .nDown()\r\n                .name(\"TIME_UNIT\").label(null, \"Units of numbers:\")\r\n                    .radio(def(\"TIME_UNIT_MS\", 1), null, \"msec\")\r\n                    .radio(def(\"TIME_UNIT_SEC\", 1000), null, \"sec\", true)\r\n                .nUp()\r\n            .n(\"<br>\")\r\n            .name(\"TAT\").label(null,\"[Turnaround time(TAT) field]\").n()\r\n            .number(\"TAT_COL\", \"\", \"th column of CSV\", \"2\", 'style=\"width:40px;\"').n()\r\n            .name(\"TAT_POS\")\r\n                .number(\"TAT_POS\", \"Position(byte): from\", null, \"1\", 'style=\"width:40px;\"')\r\n                .number(\"TAT_LEN\", \"length\", null, null, 'style=\"width:40px;\"').n()\r\n            .name(\"TAT_UNIT\").label(null, \"Units of numbers:\")\r\n                    .radio(def(\"TAT_UNIT_MS\", 1), null, \"msec\")\r\n                    .radio(def(\"TAT_UNIT_SEC\", 1000), null, \"sec\", true).n()\r\n            .name(\"TAT_FORM\").label(null,\"Format: \")\r\n                .radio(\"TAT_FORM_TEXT\", null, \"text\", true)\r\n                .radio(\"TAT_FORM_LONG\", null, \"long\").n()\r\n                .nDown()\r\n                .name(\"ENDIAN\").label(null, \"for long Endian: \")\r\n                    .radio(def(\"ENDIAN_LIL\", true), null, \"little\", true)\r\n                    .radio(def(\"ENDIAN_BIG\", false), null, \"big\")\r\n                .nUp()\r\n            .n(\"<br>\")\r\n        ;\r\n\r\n        // Filter Config用関数定義(radio用） #51\r\n        env = \"Filter\"\r\n        var func_F_SYNC_UPPER = function(){ __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Graph.DrawCallback(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.graph); },\r\n            func_F_SYNC_DETAIL = function(){ __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].Graph.DrawCallback(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chartD.graph); };\r\n        // Filter Config設定画面定義 #51\r\n        this[\"_config_\" + env] = Config(env) // #53\r\n            .name(\"F_SYNC\").label(null,\"Sync\") // #50\r\n                .radio(\"F_SYNC_UPPER\", null, \"Upper\", false ,null, func_F_SYNC_UPPER) // #51\r\n                .radio(\"F_SYNC_DETAIL\", null, \"Detail\", false, null, func_F_SYNC_DETAIL)\r\n                .radio(\"F_ASYNC\", null, \"Async\", true).n()\r\n            .label(null,\"----- Data filter condition--------\").n()\r\n                .n(\"<br>\")\r\n                .name(\"F_TIME\").label(null, \"[Date filter]\").n()\r\n                .label(null,\"Include if end time is between\").n()\r\n                    .text(\"F_TIME_FROM\", null, null, null, 'size=\"23\" placeholder=\"YYYY/MM/DD hh.mm.ss.ppp\"')\r\n                    .label(null,\"and\").n()\r\n                    .text(\"F_TIME_TO\", null, null, null, 'size=\"23\" placeholder=\"YYYY/MM/DD hh.mm.ss.ppp\"').n()\r\n                .n(\"<br>\")\r\n                .name(\"F_TAT\").label(null,\"[Turnaround time(TAT) filter]\").n()\r\n                .label(null,\"Include if TAT is between\").n()\r\n                    .number(\"F_TAT_FROM\", null, null, \"0\", 'style=\"width:80px;\"')\r\n                    .number(\"F_TAT_TO\", \"and\", null, null, 'style=\"width:80px;\"').n()\r\n                .n(\"<br>\")\r\n                .name(\"F_TEXT\").label(null,\"[Text filter]\")\r\n                    .radio(\"F_TEXT_NON\", null, \"Don't use.\", true).n()\r\n                    .radio(\"F_TEXT_INCLUDE\", null, \"Include \")\r\n                    .radio(\"F_TEXT_EXCLUDE\", null, \"Exclude \").n()\r\n                    .number(\"F_TEXT_LEN\", \"if \", \" bytes\", null, 'style=\"width:40px;\"')\r\n                    .number(\"F_TEXT_POS\", \"from the \", \"th byte\", \"1\", 'style=\"width:40px;\"').n()\r\n                    .number(\"F_TEXT_COL\", \"from head of the\", \"th column of CSV\", \"3\", 'style=\"width:40px;\"').n()\r\n                    .text(\"F_TEXT_REG\", \"match the regular expression\", null, null, 'size=\"7\" placeholder=\".*\"').n()\r\n                .n(\"<br>\")\r\n        ;\r\n\r\n        // Simulator Config用関数定義(radio用） #53\r\n        env = \"Simulator\"\r\n        var func_S_SIMU_000 = function(){ Object(__WEBPACK_IMPORTED_MODULE_0__HJN_graph_init_js__[\"a\" /* CreateSampleTatLogAndChartShow */])(0); };\r\n        var func_S_SIMU_001 = function(){ Object(__WEBPACK_IMPORTED_MODULE_0__HJN_graph_init_js__[\"a\" /* CreateSampleTatLogAndChartShow */])(1); };\r\n        // Simulator Config設定画面定義 #53\r\n        this[\"_config_\" + env] = Config(env) // #53\r\n            .n(\"<br>\")\r\n            .label(null,\" If you change the scenario below,\").n()\r\n            .label(null,\"JSON is initialized and re-simulated.\").n()\r\n            .n(\"<br>\")\r\n            .name(\"S_SIMU\")\r\n                .radio(\"S_SIMU_000\", null, \r\n                          \"1 hour with table(B) lock.<br>\"\r\n                        + \"- online[100-500ms 2-5tps]<br>\" \r\n                        + \"- batch[2-5sec evry3min]\",\r\n                        true ,null, func_S_SIMU_000).n()\r\n                .radio(\"S_SIMU_001\", null, \"for test\", \r\n                        false ,null, func_S_SIMU_001).n()\r\n        ;\r\n    }\r\n\r\n    // class method\r\n    /**\r\n     * ファイルリーダのプロパティ管理インスタンスを取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @param {Object}\r\n     *            fileReader ファイルリーダ\r\n     * @param {String}\r\n     *            type プロパティ種別名（\"File\"|\"Filter\"|\"Simulator\")\r\n     * @return {Object} プロパティ\r\n     */\r\n    FileReader.Property = (function() {\r\n        \"use strict\";\r\n        /** @constructor */\r\n        function Property(fileReader, type){ \r\n            if(!(this instanceof Property)) return new Property(fileReader, type);\r\n            this._type = type || \"File\";\r\n            this._config     = fileReader[\"_config_\" + this._type];\r\n            this.__keyConfig = fileReader.__keyConfig;\r\n        }\r\n\r\n        // public\r\n        /**\r\n         * keyの値に指定されたvalue（なければkey値）を返却する\r\n         * \r\n         * @memberof HJN_util.FileReader.Property\r\n         * @param {String}\r\n         *            key Conginのキー値\r\n         */\r\n        Property.prototype.getValue = function(key) {\r\n            var cKey = this._config.getValueByKey(key);\r\n            if(!this.__keyConfig[cKey] || this.__keyConfig[cKey].value === undefined){\r\n                return cKey;    // valueが定義されていないとき、keyの設定値を返却\r\n            }else{\r\n                return this.__keyConfig[cKey].getValue(); // keyの設定値のvalueが定義されているとき\r\n            }\r\n        };\r\n        /**\r\n         * configに登録されているkey(prefix補填)の設定値を取得する\r\n         * \r\n         * @memberof HJN_util.FileReader.Property\r\n         */\r\n        Property.prototype.getValueByKey = function(key) {\r\n            return this._config.getValueByKey(key);\r\n        };\r\n    \r\n        /* new */\r\n        return Property;\r\n    }());\r\n    \r\n    /** @private */\r\n    //\r\n    // public\r\n\r\n\r\n    /**\r\n     * ファイルが新たに指定された時、eTatOriginalを再構築するか否（データを追加する）か\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @return {boolean} 再構築モードするときtrue、データを追加するときfalse\r\n     */\r\n    FileReader.prototype.isNewETAT = function() { // #23\r\n        return this.getValue(\"NEWFILE\") === \"NEWDATA\";\r\n    }\r\n    \r\n    /**\r\n     * 「ファイルから次の1レコードを取得するutil」 を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.createGetterOfLine = function(file) {\r\n\r\n        /**\r\n         * @class\r\n         * @classdesc ファイルから１レコード取得する\r\n         *            <p>\r\n         *            ファクトリのFileReaderが保持する改行コードを用いて、ファイルから１レコードを取得する\r\n         * \r\n         * @memberof HJN_util.FileReader\r\n         * @example try{ var getterOfLine =\r\n         *          HJN.chart.fileReader.createGetterOfLine(file), fileInfo;<br>\r\n         *          for(var i = 0; i < n; i++) { <br>\r\n         *          line = getterOfLine.next(); fileInfo += line.str + \"<BR>\"; }<br>\r\n         *          }catch (e) {<br>\r\n         *          console.error(\"改行コードの無いファイルは扱えません]%o\",e); }\r\n         */\r\n        function GetterOfLine(file, maxLength){ /* constructor */\r\n            if(!(this instanceof GetterOfLine)) return new GetterOfLine(file, maxLength);\r\n\r\n            this.file = file;\r\n            this.buf = new Uint8Array(file);\r\n            this.maxLength = maxLength || this.buf.length,\r\n            this.confLF = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.getValue(\"LF\");  // 改行コードor固定レコード長\r\n            this.from = 0;\r\n            this.to = 0;\r\n            this.len = 0;\r\n            this.line = {file: this.file, pos: 0, array: null, str: \"\", isEoF: false };\r\n        }\r\n        // public\r\n        /**\r\n         * 次の1レコードを取得する\r\n         * \r\n         * @name getValueByKey\r\n         * @memberof HJN_util.FileReader.GetterOfLine\r\n         */\r\n        if (__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader.getValueByKey(\"LF\") === \"LF_FIX\"){ // 固定長のとき\r\n            GetterOfLine.prototype.next = function () { // 次の1レコードを取得する\r\n                if(this.from >= this.maxLength ){   // ファイル末尾のとき\r\n                    this.line = {file: this.file, pos: this.maxLength, array: null, str: \"\", isEoF: true };\r\n                } else {\r\n                    this.len = Math.min(this.maxLength - this.from, this.confLF);\r\n                    var array = new Uint8Array(this.file, this.from, this.len);\r\n                    this.line = {\r\n                            file: this.file,\r\n                            pos: this.from,\r\n                            array: array,\r\n                            str: String.fromCharCode.apply(null, array),\r\n                            isEoF: false };\r\n                }\r\n                this.from += this.confLF;   // 次の行を指しておく\r\n                return this.line;\r\n            };\r\n        } else { // 可変長のとき\r\n            GetterOfLine.prototype.next = function () { // 次の1レコードを取得する\r\n                if(this.from >= this.maxLength ){   // ファイル末尾のとき\r\n                    this.line = {file: this.file, pos: this.maxLength, array: null, str: \"\", isEoF: true };\r\n                } else {\r\n                    this.to = this.buf.indexOf(this.confLF, this.from);\r\n                    if(this.to < 0) this.to = this.maxLength;   // 最終レコード（EOFで改行コードなし）のとき\r\n                    this.len = Math.min(this.to - this.from, 1024);\r\n                    var array = new Uint8Array(this.file, this.from, this.len);\r\n                    this.line = {\r\n                            file: this.file,\r\n                            pos: this.from,\r\n                            array: array,\r\n                            str: String.fromCharCode.apply(null, array),\r\n                            isEoF: false };\r\n                }\r\n                this.from = this.to + 2;    // 次の行を指しておく\r\n                return this.line;\r\n            };\r\n        }\r\n        return new GetterOfLine(file);\r\n    };\r\n    \r\n    \r\n    /**\r\n     * eTatのフィルター\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.createFilter = function() { // #34\r\n       /**\r\n         * @class\r\n         * @classdesc FileReaderのフィルター\r\n         *            <p>\r\n         *            ファクトリのFileReaderが保持するフィルタ条件を用いるフィルターを取得する\r\n         * \r\n         * @memberof HJN_util.FileReader\r\n         */\r\n        function Filter(){ /* constructor */\r\n            if(!(this instanceof Filter)) return new Filter();\r\n            this._fileReader = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader; // #62\r\n            var c = FileReader.Property(this._fileReader, \"Filter\");\r\n\r\n            this.confF_TIME_FROM = S2D(c.getValue(\"F_TIME_FROM\"));    // 時刻(X)の最小値フィルター\r\n            this.confF_TIME_TO   = S2D(c.getValue(\"F_TIME_TO\"));      // 時刻(X)の最大値フィルター\r\n            this.confF_TIME = (isNaN(this.confF_TIME_FROM) && isNaN(this.confF_TIME_TO))\r\n                            ? false : true; // 時刻(x）フィルター指定の有無\r\n            \r\n            this.confF_TAT_FROM = c.getValue(\"F_TAT_FROM\") || 0; // 時間(Y)の最小値フィルター\r\n            this.confF_TAT_TO   = c.getValue(\"F_TAT_TO\") || Number.MAX_VALUE; // 時間(Y)の最大値フィルター\r\n            this.confF_TAT = (this.confF_TAT_FROM === 0 && this.confF_TAT_TO === Number.MAX_VALUE)\r\n                            ? false : true; // 時間(ｙ）フィルター指定の有無\r\n\r\n            this.confF_TEXT = c.getValue(\"F_TEXT\") || null; // テキストフィルタの条件（使用しない、Include,Exclude\r\n            if (this.confF_TEXT === \"F_TEXT_INCLUDE\") {\r\n                this.confF_TEXT = true;\r\n            } else if (this.confF_TEXT === \"F_TEXT_EXCLUDE\") {\r\n                this.confF_TEXT = false;\r\n            } else { // \"F_TEXT_NON\"\r\n                this.confF_TEXT = null;\r\n            }\r\n            \r\n            this.confF_TEXT_LEN = c.getValue(\"F_TEXT_LEN\") || null;    // フィルタテキストのバイト長\r\n            this.confF_TEXT_POS = c.getValue(\"F_TEXT_POS\") || 0;       // フィルタテキストの先頭バイト位置\r\n            this.confF_TEXT_COL = (c.getValue(\"F_TEXT_COL\") || 3) - 1; // フィルタテキストのカラム位置（先頭：０）\r\n            this.confF_TEXT_REG = new RegExp(c.getValue(\"F_TEXT_REG\") || \".*\");    // フィルタテキストの正規表現\r\n            \r\n            this.confF_IS = (this.confF_TIME === true \r\n                            || this.confF_TAT === true || this.confF_TEXT != null)\r\n                          ? true : false; // フィルタ指定の有無\r\n            \r\n            c = FileReader.Property(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader, \"File\");\r\n            this.confF_SEP = c.getValue(\"SEP\").charCodeAt(0);\r\n        }\r\n        \r\n        // class method\r\n        // private\r\n        /**\r\n         * フィルター条件で判定する\r\n         * \r\n         * @memberof HJN_util.FileReader.Filter\r\n         */\r\n        Filter.prototype._isIn = function (e) {\r\n            // フィルタ指定が無いときフィルタしない（初期表示時に無駄な処理をしない）\r\n            if (this.confF_IS === false) return true;\r\n            // 時刻（ｘ）フィルタの判定 （conf指定なしのとき NaNとの比較となりfalseとなる）\r\n            if (e.x < this.confF_TIME_FROM || this.confF_TIME_TO < e.x ) {\r\n                return false;\r\n            }\r\n            // 時間（ｙ）フィルタの判定\r\n            if (e.y < this.confF_TAT_FROM || this.confF_TAT_TO < e.y){\r\n                return false;\r\n            }\r\n            // テキストフィルタの判定\r\n            if (this.confF_TEXT === null) {\r\n                return true; // フィルタ指定なし\r\n            }\r\n            var text = \"\";\r\n            if (e.pos === undefined) { // テキスト読み込みでないとき（自動生成データのとき）\r\n                // レコードを取得する #62\r\n                text = this._fileReader.getRecordAsText(e); // #61\r\n                // 指定正規表現に合致するか判定し、Include/Exclude指定に応じてリターンする\r\n                return this.confF_TEXT === this.confF_TEXT_REG.test(text);\r\n            } else { // ファイル読み込みのとき\r\n                // レコードを取得する\r\n                var arr = new Uint8Array(__WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].filesArrayBuffer[e.fileIdx+1], e.pos, e.len);\r\n                // CSVレコードの指定カラムを取得する(arr)\r\n                var colPos = 0;\r\n                for (var i = 0; i < this.confF_TEXT_COL; i++) {\r\n                    colPos = arr.indexOf(this.confF_SEP,colPos + 1);\r\n                }\r\n                if (colPos === -1){\r\n                    // 指定数のカラムが無い場合、Includeは処理対象外、Excludeは処理対象\r\n                    return !this.confF_TEXT;\r\n                }\r\n                var col = arr.slice(colPos, arr.length);\r\n                // 判定用文字列を取得する\r\n                text = col.slice(this.confF_TEXT_POS, this.confF_TEXT_POS + this.confF_TEXT_LEN);\r\n                // 指定正規表現に合致するか判定し、Include/Exclude指定に応じてリターンする\r\n                return this.confF_TEXT === this.confF_TEXT_REG.test(String.fromCharCode.apply(null, text));\r\n            }\r\n            return true;\r\n        };\r\n        \r\n        // public\r\n        /**\r\n         * eTatをフィルターする\r\n         * \r\n         * @memberof HJN_util.FileReader.Filter\r\n         * @param {eTat}\r\n         *            eTat フィルター処理対象のeTat\r\n         * @return {eTat} eTat フィルターされたeTat\r\n         * \r\n         */\r\n        Filter.prototype.filter = function (eTat) {\r\n            if (!eTat) return [];\r\n            return eTat.filter(this._isIn, this);\r\n        };\r\n\r\n        return new Filter();\r\n    };\r\n\r\n\r\n    /**\r\n     * 「１レコードからx:時刻（数値：ミリ秒）,y:Tat(数値：秒)を取得するutil」を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.createGetterOfXY = function() {\r\n\r\n        /**\r\n         * @class\r\n         * @classdesc １レコードをパースし、XとYをレコード取得する\r\n         *            <p>\r\n         *            ファクトリのFileReaderが保持するレコードフォーマット情報を用いて、ファイルの指定レコードからＸ(data)とＹ(value)を取得する\r\n         * \r\n         * @memberof HJN_util.FileReader\r\n         */\r\n        function GetterOfXY(){ /* constructor */\r\n            if(!(this instanceof GetterOfXY)) return new GetterOfXY();\r\n\r\n            var c = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].chart.fileReader;\r\n            this.configId = \"_config_\" + \"Filter\"; // #53\r\n            this.confSEP = c.getValue(\"SEP\");   // セパレータ\r\n            \r\n            this.confTIME_COL = c.getValue(\"TIME_COL\") - 1 || 0;    // 時刻(X)のカラム位置\r\n            this.confTIME_POS = (c.getValue(\"TIME_POS\") || 1) - 1;  // 時刻(X)の先頭バイト位置\r\n            this.confTIME_LEN = (c.getValue(\"TIME_LEN\") || 0);      // 時刻(X)のバイト長\r\n            this.confTIME_FORM = c.getValue(\"TIME_FORM\");           // 時刻(X)の文字フォーマット指定\r\n            this.confTIME_YMD = (c.getValue(\"TIME_YMD\") || \"YYYY/MM/DD hh.mm.ss.ppp\"); // #42\r\n                                                                    // 時刻(X)のYMDフォーマット\r\n            this.paseDateConf = {  // YYYY/MM/DD hh:mm:dd.ss.ppp #41\r\n                YYYY: this.confTIME_YMD.indexOf(\"YYYY\"),\r\n                MM: this.confTIME_YMD.indexOf(\"MM\"),\r\n                DD: this.confTIME_YMD.indexOf(\"DD\"),\r\n                hh: this.confTIME_YMD.indexOf(\"hh\"),\r\n                mm: this.confTIME_YMD.indexOf(\"mm\"),\r\n                ss: this.confTIME_YMD.indexOf(\"ss\"),\r\n                ppp: this.confTIME_YMD.indexOf(\"p\"),\r\n            };\r\n            this.isYMD = (this.confTIME_FORM === \"TIME_FORM_YMD\");\r\n            // 時刻(X)の数値単位(1or1000,YMDのとき1)\r\n            this.confTIME_UNIT = this.isYMD? 1 : (c.getValue(\"TIME_UNIT\") || 1);\r\n            \r\n            \r\n            this.confTAT_COL = c.getValue(\"TAT_COL\") - 1 || 1;      // 時間(Y)のカラム位置\r\n            this.confTAT_POS = (c.getValue(\"TAT_POS\") || 1) - 1;    // 時間(Y)の先頭バイト位置\r\n            this.confTAT_LEN = (c.getValue(\"TAT_LEN\") || 0);        // 時間(Y)のバイト長\r\n            this.confTAT_FORM = c.getValue(\"TAT_FORM\");             // 時間(Y)のフォーマット指定\r\n            this.confTAT_UNIT = c.getValue(\"TAT_UNIT\") || 1;        // 時間(Y)の数値単位(1/1000)\r\n            this.confENDIAN =  c.getValue(\"ENDIAN\");    // リトルエンディアンはtrue、ビッグエンディアンはfalse\r\n            this.isLittle = (function(){\r\n                // long用に4バイト取得する\r\n                var buf = new ArrayBuffer(4);               \r\n                // true:bufに、リトルエンディアン指定で1を書き込む\r\n                new DataView(buf).setUint32(0, 1, true);\r\n                // プラットフォームのエンディアンを使用するUint32Arrayと比較する\r\n                return (new Uint32Array(buf)[0] === 1);     \r\n            }());\r\n            \r\n            this.dateAndValue = {date: 0, value: 0, isError: false };\r\n        }\r\n        \r\n        // class method\r\n        /**\r\n         * 数字をパースして数値（ミリ秒）を取得する<br>\r\n         * 例：\"-1:1:1.2 -> -3661200 ms = -1*(3600+60+1+0.2)*1000\r\n         * \r\n         * @memberof HJN_util.FileReader.GetterOfXY\r\n         */\r\n        GetterOfXY.parseNumber = function (){ // str, unit,\r\n            var str = arguments[0],\r\n                unit = arguments[1];\r\n            if(!str) {console.log(\"data Y parse error\"); return 0; }\r\n            var ds = (str.indexOf(\":\") < 0) ? [str] : str.split(\":\"),   // #40\r\n                pm = (0 <= ds[0]) ? 1 : -1,\r\n                sec = 0.0;\r\n            for(var i = 0; i < ds.length; i++){\r\n                sec += pm * Math.abs(ds[i]) * Math.pow(60, ds.length - i - 1);\r\n            }\r\n            return sec * (unit || 1);\r\n        };\r\n\r\n        /**\r\n         * Long(4バイトバイナリ）数字をパースして数値（ミリ秒）を取得する\r\n         * \r\n         * @private\r\n         */\r\n        GetterOfXY.prototype._parseLong = function (arr){\r\n            if (4 <= arr.length ) { // Long(4byte)以上のときunsigned longとして処理する\r\n                // bufの先頭4byteを、指定バイトオーダ(endian)で、符号無32bit intとして参照\r\n                return (new DataView(arr.buffer, 0 , 4)).getUint32(0, this.confENDIAN);\r\n            } else {\r\n                // Long(4バイト）より短いとき、Byte単位に処理する\r\n                if (this.confENDIAN) { // little endianのとき\r\n                    return arr.reduceRight(function(a, b){ return a*256 + b; });\r\n                } else {               // big endianのとき\r\n                    return arr.reduce(function(a, b){ return a*256 + b; });\r\n                }\r\n            }\r\n        };\r\n\r\n        // public\r\n        /**\r\n         * レコードからXとYを取得する\r\n         * \r\n         * @memberof HJN_util.FileReader.GetterOfXY\r\n         */\r\n        GetterOfXY.prototype.parse = function (line) {\r\n            // セパレータでカラム分割する\r\n            var posMax = Math.max(this.confTIME_COL, this.confTAT_COL),\r\n                sep = this.confSEP.charCodeAt(0),   // 区切り文字のUint値\r\n                pos = 0,\r\n                nextPos = line.array.indexOf(sep),  // 行末（次の区切り文字位置）\r\n                x = 0,\r\n                y = -1;\r\n            for (var i = 0; i <= posMax; i++) {\r\n                if (i === this.confTIME_COL){\r\n                    // パース対象フィールドを切り出す\r\n                    var posX =  pos + this.confTIME_POS;\r\n                    var arrX = (0 < this.confTIME_LEN) \r\n                             ? line.array.slice(posX, posX + this.confTIME_LEN)\r\n                             : line.array.slice(posX, nextPos);\r\n                    var strX = \"\";\r\n                    // フィールドをパースする\r\n                    if (this.isYMD){    // 年月日時分秒の文字列のとき\r\n                        strX = String.fromCharCode.apply(null,arrX);\r\n                        x = S2D(strX, this.paseDateConf);\r\n                    } else if (this.confTIME_FORM === \"TIME_FORM_TEXT\"){    // テキスト数字のUNIX経過時間のとき\r\n                        strX = String.fromCharCode.apply(null,arrX);\r\n                        x = GetterOfXY.parseNumber(strX);\r\n                    } else{ // this.confTIME_FORM === \"TIME_FORM_LONG\"\r\n                            // longのUNIX経過時間のとき\r\n                        x = this._parseLong(arrX);\r\n                    }\r\n                    // 単位を補正する\r\n                    x *= this.confTIME_UNIT;\r\n                }\r\n                if (i === this.confTAT_COL){\r\n                    // パース対象フィールドを切り出す\r\n                    var posY =  pos + this.confTAT_POS;\r\n                    var arrY = (0 < this.confTAT_LEN) \r\n                             ? line.array.slice(posY, posY + this.confTAT_LEN)\r\n                             : line.array.slice(posY, nextPos);\r\n                    // フィールドをパースする\r\n                    if (this.confTAT_FORM === \"TAT_FORM_TEXT\"){\r\n                        // テキスト数字によるUNIX経過時間のとき\r\n                        var strY = String.fromCharCode.apply(null,arrY);\r\n                        y = GetterOfXY.parseNumber(strY);\r\n                    } else{\r\n                        // TAT_FORM_TEXT === \"TAT_FORM_LONG\" 数値によるUNIX経過時間のとき\r\n                        y = this._parseLong(arrY);\r\n                    }\r\n                    // 単位を補正する\r\n                    y *= this.confTAT_UNIT;\r\n                }\r\n                pos = nextPos + 1;\r\n                nextPos = line.array.indexOf(sep, pos);\r\n                if (nextPos < 0) nextPos = line.array.length;\r\n            }\r\n            \r\n            if(0 < x && 0 <= y){ // 正常時\r\n                return {x: x, y: y, isError: false };\r\n            } else {            // エラー時\r\n                return {x: x, y: y, isError: true };\r\n            }\r\n        };\r\n        \r\n        return new GetterOfXY();\r\n    };\r\n    \r\n    /**\r\n     * configに登録されているid(=prefix+key)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getObjctById = function(id) {\r\n        return this[this.configId].getObjctById(id);\r\n    };\r\n    /**\r\n     * configに登録されているkey(prefix補填)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getValueByKey = function(key) {\r\n        return this[this.configId].getValueByKey(key);\r\n    };\r\n    /**\r\n     * 設定値を保有するオブジェクトを返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getConfig = function() {\r\n        return this[this.configId]._config;\r\n    };\r\n    /**\r\n     * HTML（config設定用）テキストを返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getConfigHtml = function(type) {\r\n        type = type || \"File\";\r\n        return this[\"_config_\" + type].getHtml(); // #53\r\n    };\r\n    /**\r\n     * keyの値に指定された関数（なければ何もしない関数）を返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getFunction = function(key) {\r\n        var cKey = this[this.configId].getValueByKey(key);\r\n        if(!this.__keyConfig[cKey] || !this.__keyConfig[cKey].func){\r\n            return function(){};    // funcが定義されていないとき、何もしない関数を返却する\r\n        }else{\r\n            return this.__keyConfig[cKey].func; // keyの設定値のfuncが定義されているとき\r\n        }\r\n    };\r\n    /**\r\n     * eTatの指定行の編集元レコードを、テキストフォーマットに変換して取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @param {Object}\r\n     *            e eTat[n]：eTatの指定行\r\n     * @return {String} eTatの指定行の表示用テキスト\r\n     */\r\n    FileReader.prototype.getRecordAsText = function (e) { // #62 ADD\r\n        if (!e) return \"\";\r\n        var text = \"\";\r\n        if (typeof e.pos === \"undefined\") { // 生成データのとき\r\n            // 生成データをCSVのログデータとして編集する #61\r\n            text = D2S(e.x, \"yyyy/MM/dd hh:mm:ss.ppp\", true)\r\n                    + \", \" + e.y + \", \" + e.message; // #53\r\n            // 状態遷移履歴を追加する #62\r\n            if (e.history){\r\n                e.history.forEach(function(h){\r\n                    var timeStr = \"\";\r\n                    if (typeof(h.time) === \"number\") {\r\n                        timeStr = D2S(h.time, \"mm:ss.ppp\", true) + \" seq:\"\r\n                    }\r\n                    text += \" [\" + h.sequenceIdx + \":\" + h.status + \"]\" // #61\r\n                        + timeStr + D2S(h.sequenceTime, \"mm:ss.ppp\", true);\r\n                }, this);\r\n            }\r\n        } else { // ファイル読込のとき\r\n            // ファイルの該当行を Uint8Arrayに登録する\r\n            var buff = new Uint8Array(e.len + 2);\r\n            var file = __WEBPACK_IMPORTED_MODULE_1__HJN_graph_js__[\"a\" /* default */].filesArrayBuffer[e.fileIdx]; // #23\r\n            buff.set(new Uint8Array(file, e.pos,\r\n                    Math.min(e.len + 2, file.byteLength - e.pos)));\r\n            // ログデータを編集する\r\n            text = String.fromCharCode.apply(null, buff);\r\n        }\r\n        return text;\r\n        \r\n    };\r\n    /**\r\n     * keyの値に指定されたvalue（なければkey値）を返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @param {String}\r\n     *            key Conginのキー値\r\n     */\r\n    FileReader.prototype.getValue = function(key) {\r\n        var cKey = this[this.configId].getValueByKey(key);\r\n        if(!this.__keyConfig[cKey] || this.__keyConfig[cKey].value === undefined){\r\n            return cKey;    // valueが定義されていないとき、keyの設定値を返却\r\n        }else{\r\n            return this.__keyConfig[cKey].getValue(); // keyの設定値のvalueが定義されているとき\r\n        }\r\n    };\r\n    \r\n    // new\r\n    return FileReader;\r\n}());\r\n\r\n\r\n/**\r\n * 日時文字列を指定フォーマットでパースして数値(ミリ秒単位）を取得する\r\n * \r\n * @param {String}\r\n *            str\r\n * @param {Object|String}\r\n *            [conf={YYYY: 0, MM: 5, DD: 8, hh: 11, mm: 14, ss: 17, ppp: 20}]\r\n *            Object指定のとき：年月日時分秒ミリ秒の先頭位置を示す構造体オブジェクト<br>\r\n *            String指定とき：フォーマットを示す文字列<br>\r\n *            デフォルト値は、\"YYYY/MM/DD hh:mm:ss.ppp\"相当\r\n * @return {Number} timeNum 日時（１ミリ秒を１とする数値、エラーのときNumber.NaN）\r\n */\r\nvar S2D = function(str, conf){ // #34\r\n    \"use strict\";\r\n    if(!str) return Number.NaN;\r\n    \r\n    if(typeof(conf) === \"Object\"){\r\n        // confが\"Object\"のとき、指定された構造体オブジェクトの条件でパースする（最も高速な処理）\r\n        return parse(str, conf);\r\n    } else if (typeof(conf) === \"string\") {\r\n        // confが\"String\"のとき、指定された文字列フォーマットから構造体オブジェクトを作成し、パースする（準高速処理）\r\n        var config = {  // YYYY/MM/DD hh:mm:dd.ss.ppp #41\r\n                YYYY: conf.indexOf(\"YYYY\"),\r\n                MM: conf.indexOf(\"MM\"),\r\n                DD: conf.indexOf(\"DD\"),\r\n                hh: conf.indexOf(\"hh\"),\r\n                mm: conf.indexOf(\"mm\"),\r\n                ss: conf.indexOf(\"ss\"),\r\n                ppp: conf.indexOf(\"p\")};\r\n        return parse(str, config);\r\n    } else {\r\n        // confが指定されていないとき、デフォルト条件でパースする（汎用処理）\r\n        // デフォルトフォーマット：\"YYYY/MM/DD hh:mm:dd.ss.ppp\" #42\r\n        var config = {YYYY: 0, MM: 5, DD: 8, hh: 11, mm: 14, ss: 17, ppp: 20};\r\n        return parse(str, config);\r\n    }\r\n\r\n    // 内部関数：構造体オブジェクトで指定された条件でパースする\r\n    function parse(str, conf){\r\n        var y   = (0 <= conf.YYYY) ? parseInt( str.substr( conf.YYYY, 4), 10) : 1970,\r\n                m   = (0 <= conf.MM)   ? parseInt( str.substr( conf.MM, 2), 10) - 1 : 0, // デフォルト1月\r\n                // 1970/1/1だと時差でマイナスになることがあるので日付のデフォルトは2日\r\n                d   = (0 <= conf.DD)   ? parseInt( str.substr( conf.DD, 2), 10) : 2,\r\n                h   = (0 <= conf.hh)   ? parseInt( str.substr( conf.hh, 2), 10) : 0,\r\n                min = (0 <= conf.mm)   ? parseInt( str.substr( conf.mm, 2), 10) : 0,\r\n                sec = (0 <= conf.ss)   ? parseInt( str.substr( conf.ss, 2), 10) : 0,\r\n                // ミリ秒以下を指定すると丸め誤差が生じるため、秒以下のミリ秒は個別に加算\r\n                p   = (0 <= conf.ppp)  \r\n                    ? (\"0.\" + str.substr( conf.ppp).match(/[0-9]*/)[0]) * 1000.0 \r\n                    : 0;\r\n        return +(new Date( y, m, d, h, min, sec )) + p;  // #14\r\n    }\r\n};\r\n\r\n/**\r\n * 日時(Date)から、ローカル時刻に基づく、指定フォーマットの文字列を取得する\r\n * \r\n * @param {Date}\r\n *            dt Date型（内部実装はミリ秒単位）\r\n * @param {String}\r\n *            str フォーマット yyyy-MM-dd hh:mm:ss.ppp （戻り値で上書きされる）\r\n * @return {String} str 編集後文字列\r\n */\r\nvar DateToString = function() {\r\n    \"use strict\";\r\n    var dt = arguments[0],  // arg0\r\n        str = arguments[1]; // arg1\r\n    // if (typeof(dt) === \"number\") dt = new Date(dt);\r\n    str = str.replace(/yyyy/, dt.getFullYear() );\r\n    str = str.replace(/MM/, ('0' + (dt.getMonth() + 1) ).slice(-2) );\r\n    str = str.replace(/dd/, ('0' + dt.getDate()).slice(-2) );\r\n    str = str.replace(/hh/, ('0' + dt.getHours()).slice(-2) );\r\n    str = str.replace(/mm/, ('0' + dt.getMinutes()).slice(-2) );\r\n    str = str.replace(/ss/, ('0' + dt.getSeconds()).slice(-2) );\r\n    str = str.replace(/ppp/,('00' + dt.getMilliseconds()).slice(-3) ); // #60\r\n    // str = str.replace(/ppp/,('00' + Math.floor(dt % 1000)).slice(-3) );\r\n\r\n    return str;\r\n};\r\n\r\n/**\r\n * 日時(ミリ秒：Ｘ軸用）から、時差補正のない、指定フォーマットの文字列を取得する\r\n * \r\n * @param {Number|Date}\r\n *            ds 時刻をUNIX経過時間（ミリ秒）で表した数値、もしくはDate(日付）\r\n * @param {String}\r\n *            [str=自動] フォーマット yyyy-MM-dd hh:mm:ss.ppp （戻り値で上書きされる）<br>\r\n *            自動のとき 日数+ hh:mm:ss.ppp 表示単位に至らない単位は表示しない、ミリ秒は分単位以下の時表示<br>\r\n *            例： 日数表示：\"1 02:03:04\",時表示\"02:03:04\" 分表示\"0:03:04.567\" 秒表示\"04.567\"\r\n * @param {Boolean}\r\n *            [isLocal=false] trueのとき時差補正をしない\r\n * @return {String} str 編集後文字列\r\n */\r\nvar D2S = function(ds, str, isLocal){ // #60\r\n    \"use strict\";\r\n    var minus = \"\";\r\n    var ret = \"\";\r\n    if (ds < 0) {\r\n        minus = \"-\";\r\n        ds = -1 * ds;\r\n    }\r\n    var datetime = new Date(ds);\r\n    if (!isLocal) { // #60\r\n        datetime = new Date(+datetime + 60000 * datetime.getTimezoneOffset()); // 環境タイムゾーンの補正\r\n    }\r\n    if(str){ // フォーマット指定があるとき\r\n        ret = DateToString(datetime, str);\r\n    } else if (ds < 1000) { // 自動で1秒(1000)未満のとき\r\n        ret = \"0.\" + Math.round(ds);\r\n    } else if (ds < 60000) { // 自動で1分(1*60*1000)未満のとき\r\n        ret = DateToString(datetime, \"ss.ppp\");\r\n    } else if (ds < 3600000) { // 自動で1分以上、1時間(1*60*60*1000)未満のとき\r\n        ret = \"0:\" + DateToString(datetime, \"mm:ss.ppp\");\r\n    } else if (ds < 86400000) { // 自動で1時間以上、1日(1*24*60*60*1000)未満のとき\r\n        ret = DateToString(datetime, \"hh:mm:ss\");\r\n    } else { // 自動で1日以上のとき\r\n        ret = Math.floor(ds / 86400000) + \" \";\r\n        ret += DateToString(datetime, \"hh:mm:ss\");\r\n    }\r\n    return minus + ret;\r\n};\r\n\r\n/**\r\n * 数値(Ｙ軸用）から、誤差のない表示用文字列を取得する<br>\r\n * （hover、legendなどでY軸の値を使うときに使用する）\r\n * \r\n * @param {Number|Date}\r\n *            y 時刻をUNIX経過時間（ミリ秒）で表した数値、もしくはDate(日付）\r\n * @return {String} str 編集後文字列\r\n *         {@linkhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat}\r\n */\r\nvar N2S = function(y){\r\n    \"use strict\";\r\n    return Intl.NumberFormat('en-IN').format(y);\r\n};\r\n\r\n/**\r\n * 文字列を数値に変換する\r\n * \r\n * @param {String|Number}\r\n *            [str = sub] 計算式（日時分秒ミリ秒(d,h,mim,sec,ms)の文字は、ミリ秒に変換する）\r\n * @param {String|Number}\r\n *            [sub] 第一引数が指定されていない(undefined)ときの代用\r\n * @return {Number} n eval(str||sub)で取得した数値\r\n * \r\n */\r\nvar S2N = function(str, sub){ // #53\r\n    \"use strict\";\r\n    var s = (typeof(str) !== \"undefined\") ? str : sub;\r\n    var h = 3600000; // 1時間（ミリ秒）\r\n    var min = 60000; // 1分（ミリ秒）\r\n    var sec =  1000; // 1秒（ミリ秒）\r\n    var ms =      1; // 1ミリ秒\r\n\r\n    return eval(s);\r\n};\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc キャッシュ\r\n *            <p>\r\n *            キャッシュを保持させるオブジェクト\r\n * @param {Number}\r\n *            [size=10] キャッシュ最大件数（未対応機能、設定は無視される）\r\n */\r\nvar Cash = (function() {\r\n    \"use strict\";\r\n    /** constructor */\r\n    function Cash(size){\r\n        size = size || 10;  // TODO 未使用\r\n        if(!(this instanceof Cash)) return new Cash(size);\r\n        // インスタンス変数\r\n        this._cash = {};    // キャッシュ {data:, count:, lastTime:}\r\n        this._ranges = [];  // RangedCash用 {key: ,from: , to:, }\r\n        this._size = size;  // キャッシュ最大件数\r\n    }\r\n    \r\n    /* method */\r\n    /**\r\n     * 第一引数のargumentsを配列に変換する<br>\r\n     * （注：引数が１つ以上あることを前提）\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Number}\r\n     *            args 引数一覧（arguments）\r\n     * @return {Array} 引数の配列\r\n     */\r\n    Cash._arg2arr = function(args) {\r\n            return args.length === 1 ? [args[0]] : Array.apply(null, args);\r\n        };\r\n    /**\r\n     * cash判定Keyを取得する<br>\r\n     * （注：引数を'.'でつないだ文字列をkeyとするので、関数名長の上限を超える大きな配列は不可）\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Number}\r\n     *            args 引数一覧（argumentsオブジェクト）\r\n     * @return {String} キャッシュキー用の文字列\r\n     */\r\n    Cash._getKey = function(args) {\r\n            var argsArr = this._arg2arr(args);\r\n            return argsArr.reduce(function(a,b){return a+'.'+b; });\r\n        };\r\n        \r\n    /* private */\r\n\r\n    /* public */\r\n    /**\r\n     * cashオブジェクトを、cashが無いときはundefinedを返却する<br>\r\n     * cashヒットした場合、cashの使用回数をカウントアップする\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Object}\r\n     *            arguments 引数からキー文字列を定める\r\n     * @return {Number|undefined} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.getCash = function () {\r\n            if (arguments.length < 1) return undefined;\r\n            var args = Cash._arg2arr(arguments),\r\n                key = Cash._getKey(args);\r\n            if (key in this._cash){\r\n                var cash = this._cash[key];\r\n                cash.lastTime = new Date();\r\n                cash.count++;\r\n                return cash.data;\r\n            }else{\r\n                return undefined;\r\n            }\r\n        };\r\n    /**\r\n     * オブジェクトをcashする\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Object}\r\n     *            cashVal キャッシュするオブジェクト\r\n     * @param {Object}\r\n     *            arguments 第二引数以降の、引数からキー文字列を定める\r\n     * @return {Object} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.setCash = function () {\r\n            if (arguments.length < 2) return undefined;\r\n            var cashVal = arguments[0],\r\n                args = Cash._arg2arr(arguments).slice(1, arguments.length),\r\n                key = Cash._getKey(args);\r\n            this._cash[key] = {data: cashVal, count: 0, lastTime:new Date()};\r\n            return cashVal;\r\n        };\r\n\r\n    /**\r\n     * レンジキー(form,to)範囲内でキーマッチするcashを、cashが無いときはundefinedを返却する<br>\r\n     * キーは大小比較できる数値であることが前提\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Number}\r\n     *            from 抽出するキャッシュキー最小値\r\n     * @param {Number}\r\n     *            to 抽出するキャッシュキーの最大値\r\n     * @return {Object} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.getRangedCash = function (from, to) {\r\n            var range = this._ranges.find(function(e){\r\n                    return (e.from <= from && to <= e.to);\r\n                });\r\n            return (range !== undefined) ? this.getCash(range.from,range.to) : undefined;\r\n        };\r\n    /**\r\n     * レンジキー(from,to)指定でキャッシュする<br>\r\n     * キーは大小比較できること（通常、数値）、from-to期間内の既存のキャッシュは削除される\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Object}\r\n     *            cashVal キャッシュするオブジェクト\r\n     * @param {Number}\r\n     *            from 抽出するキャッシュキー最小値\r\n     * @param {Number}\r\n     *            to 抽出するキャッシュキーの最大値\r\n     * @return {Object} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.setRangedCash = function (cashVal, from, to) {\r\n            if (arguments.length < 3) return undefined;\r\n            // 登録キー範囲に包含される既存キャッシュを削除する\r\n            var count = 0;\r\n            this._ranges = this._ranges.filter(function(e){\r\n                    if (from <= e.from && e.to <= to){\r\n                        // 登録キャッシュ範囲内のキャッシュを削除する\r\n                        count += this._cash[e.key].count;   // 削除分のカウンタ合算\r\n                        delete this._cash[e.key];\r\n                        return false;\r\n                    }else{  // 登録キャッシュの範囲外の一覧を返却する\r\n                        return true;\r\n                    }\r\n                }, this);\r\n            // 引数をキャッシュに登録する\r\n            var key = Cash._getKey([from, to]);\r\n            this._ranges.push( {from: from, to: to, key: key} );\r\n            this.setCash(cashVal, from, to);\r\n            this._cash[key].count= count + 1;   // 再作成時はカウンタ合算値\r\n            return cashVal;\r\n        };\r\n\r\n    // newの戻り値\r\n    return Cash;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 非同期化\r\n * \r\n * @param {function}\r\n *            global 非同期化して実行する関数\r\n *            <p>\r\n *            参考 {@link https://jsfiddle.net/kou/j73tLum4/8/}\r\n *            {@link https://gist.github.com/mathiasbynens/579895}\r\n *            {@link http://dbaron.org/log/20100309-faster-timeouts}\r\n */\r\nvar setZeroTimeout = (function(global) {\r\n    \"use strict\";\r\n    var timeouts = [], \r\n        messageName = \"zero-timeout-message\";\r\n    function handleMessage(event) {\r\n        if (event.source === global && event.data === messageName) {\r\n            if (event.stopPropagation)  event.stopPropagation();\r\n            if (timeouts.length) timeouts.shift()();\r\n        }\r\n    }\r\n    if (global.postMessage) {\r\n        if (global.addEventListener) {\r\n            global.addEventListener(\"message\", handleMessage, true); \r\n        }else if (global.attachEvent) {\r\n            global.attachEvent(\"onmessage\", handleMessage); \r\n        }\r\n        return function (fn) { timeouts.push(fn); global.postMessage(messageName, \"*\"); };\r\n    } \r\n    else {\r\n        return function (fn) { setTimeout(fn, 0); }; \r\n    }\r\n}(window));\r\n\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc ロガー\r\n *            <p>\r\n *            モードに応じたログを出力する。画面ログ表示領域、コンソールログへの出力に対応\r\n * \r\n * @param {String}\r\n *            [mode=0] ログ出力モード\r\n */\r\nvar Logger = (function() { // #27\r\n    \"use strict\";\r\n    /** @static */\r\n    Logger.prototype = {\r\n            _logText: [],\r\n            _timestamp : new Date(),\r\n            _logtime : new Date()\r\n        };\r\n    /** @constructor */\r\n    function Logger(mode){\r\n        if(!(this instanceof Logger)) return new Logger(mode);\r\n        this._mode = mode || 0;\r\n        // getKeyによりIndex作成関数を設定する\r\n    }\r\n    /**\r\n     * 一定時間（１分）経過後、最初に本メソッドが呼ばれたときのみログ出力する（ループ用）\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {Number}\r\n     *            i 参考番号<br>\r\n     *            経過時間内のループ回数などの表示に使用することを想定\r\n     * @param {String}\r\n     *            text ログ出力文字列\r\n     */\r\n    Logger.ByInterval = function(i, text) {\r\n        var ts = new Date(),\r\n            freq = 60000;   // 1分毎\r\n        if (freq < ts - Logger._logtime){\r\n            var t = D2S(ts, \"hh:mm:ss.ppp\"); // #60\r\n            console.log(t + \"[\" + i + \"]~~~~\" + text);\r\n            Logger._logtime = ts;\r\n        }\r\n    };\r\n    /**\r\n     * ログ出力： ログテキストを初期化する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            text ログ出力文字列\r\n     * @param {String}\r\n     *            [type] ログ区分（\"calc\"：計算用ログ、\"msg\"：メッセージのみ（タイムスタンプなし））\r\n     */\r\n    Logger.ShowLogTextInit=function(text, type) {\r\n        Logger._timestamp = new Date();\r\n        Logger._logText = [];\r\n        if(text) Logger.ShowLogText(text, type);\r\n    };\r\n    /**\r\n     * ログ出力： ログテキストをテキストアレイに追記し、表示する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            text ログ出力文字列\r\n     * @param {String}\r\n     *            [type] ログ区分（\"calc\"：計算用ログ、\"msg\"：メッセージのみ（タイムスタンプなし））\r\n     */\r\n    Logger.ShowLogText=function(text, type) {\r\n        if (type === \"calc\") return; // 集計時評価用ログ出力抑止\r\n        // \"msg\"指定のときは経過時間を取らずに、ログのみ出力する\r\n        if (type !== \"msg\"){\r\n            // 処理時間情報を追加する\r\n            var lastTimestamp = Logger._timestamp;\r\n            Logger._timestamp = new Date();\r\n            text = (Math.round( Logger._timestamp - lastTimestamp ) / 1000.0)\r\n                    + \"s \" + text;\r\n            // 数値のカンマ編集（小数部もカンマが入る）\r\n            text = text.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n            text = D2S(Logger._timestamp, \"hh:mm:ss.ppp     \")\r\n                    + text; // #60\r\n        }\r\n        Logger._logText.push(text);\r\n        Logger.ShowText(Logger._logText);\r\n        if(true) console.log(text);\r\n    };\r\n    /**\r\n     * 第一引数のテキストアレイの内容を#fileInfoのiframeに表示する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            textArray 出力するログ（配列１行がログ１件）\r\n     */\r\n    Logger.ShowText=function(textArray) {\r\n        var iHtmlBody = \"\";\r\n        for (var i = textArray.length - 1; 0 <= i; i--){\r\n            iHtmlBody += textArray[i] + \"<BR>\"; \r\n        }\r\n        Logger.ShowIHtmlBody('fileInfo',iHtmlBody);\r\n    };\r\n    /**\r\n     * 第一引数のID名のiframeに、第二引数のログ（HTML化）を表示する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            elementId iframeのID名\r\n     * @param {String}\r\n     *            iHtmlBody ログ（HTML化）\r\n     */\r\n    Logger.ShowIHtmlBody=function(elementId, iHtmlBody){\r\n        var body = document.createElement('body');\r\n        body.innerHTML = \"\"\r\n            + \"<style>body{font-size: 10px; margin: 1px; }</style>\"\r\n            + \"<body id='iHtmlBody'>\" + iHtmlBody + \"</body>\";\r\n        var iframe = document.getElementById(elementId);\r\n        iframe.contentDocument.body = body;\r\n    };\r\n    \r\n    // newの戻り値\r\n    return Logger;\r\n}());\r\n\r\n/**\r\n * 指定されたtextareaを使って、クリップボードにコピーする\r\n * \r\n * @param {Object}\r\n *            elementID textareaのID名\r\n */\r\nvar CopyToClipboard = function(elementId) { // #61\r\n    \"usestrict\";\r\n    // textareaをクリップボードにコピーする\r\n    var area = document.getElementById(elementId);\r\n    area.select();\r\n    document.execCommand(\"copy\");\r\n}\r\n\r\n/**\r\n * @class\r\n * @classdesc 配列二分木検索\r\n * \r\n * @param {Number}\r\n *            val 検索する値\r\n * @param {Array}\r\n *            arr 検索対象の配列\r\n * @param {Function}\r\n *            [func=function(val){return val.valueOf();}] 配列要素に対して、値を取得する関数\r\n * @param {Index}\r\n *            [low=0] 配列の検査範囲の下限\r\n * @param {Index}\r\n *            [high=arr.length-1] 配列の下限検査範囲の上限\r\n * @param {Boolean}\r\n *            [isEqual=false] 完全一致しないときのリターン値：trueのとき-1、falseのとき値との差が最も少ない位置\r\n * @example i=HJN_util.binarySearch(x,arrXY,function(e){return e.x;});\r\n */\r\nvar binarySearch = function (val, arr, func, low, high, isEqual) {\r\n    \"use strict\";\r\n    func = func || function(val){ return val.valueOf(); };\r\n    low = low || 0;\r\n    high = high || arr.length - 1;\r\n    isEqual = isEqual || false;\r\n    var middle,\r\n        valMiddle;\r\n    while( low <= high ){\r\n        middle = Math.floor(low + high) / 2 | 0;\r\n        valMiddle = func(arr[middle]);\r\n        if(valMiddle === val) return middle;\r\n        else if(val < valMiddle) high = middle - 1;\r\n        else low = middle + 1;\r\n    }\r\n    // 値が完全一致する要素がなかった場合の戻り値を編集する\r\n    if (isEqual){\r\n        return -1;  // 完全一致指定のとき(-1)をリターンする\r\n    } else {        // 完全一致指定でないとき、値との差が最も少ない位置をリターンする #46\r\n        // low,middle,high を補正する\r\n        low = Math.min(Math.max(0, low), arr.length - 1);\r\n        high = Math.max(0, Math.min(high, arr.length - 1));\r\n        middle = Math.max(low, Math.min(middle, high));\r\n        if(high < low){\r\n            var tmp = high;\r\n            high= low;\r\n            low = tmp;\r\n        }\r\n        // low,middle,high のうち、値との差が最も少ない位置をリターンする\r\n        if(func(arr[middle]) < val){\r\n            if (val - func(arr[middle]) < func(arr[high]) - val) {\r\n                return middle;\r\n            } else {\r\n                return high;\r\n            }\r\n        }else{\r\n            if (func(arr[high]) <= val && val < func(arr[middle])){\r\n                return high;\r\n            } else if (val - func(arr[low]) < func(arr[middle]) - val){\r\n                return low;\r\n            } else {\r\n                return middle;\r\n            }\r\n        }\r\n        return -1;  // 指定範囲外\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 期間指定eTat取得用Map\r\n *            <p>\r\n *            指定期間に動いているeTatの一覧を、高速に取得するマップ\r\n * \r\n * @param {ETAT}\r\n *            eTat インデックスを追加するETAT\r\n * @example eTat.tatMap = new HJN_util.MappedETat(eTat); var trans =\r\n *          eTat.tatMap.search(x, x, 1000);\r\n */\r\nvar MappedETat = (function() { // #18\r\n    \"use strict\";\r\n    /** @static */\r\n    MappedETat.prototype = {\r\n            _abscissa: [],\r\n            _conf :[{ms:      10, step:5, label:\"0_10ms_\"},\r\n                    {ms:      50, step:2, label:\"1_50ms_\"},\r\n                    {ms:     100, step:5, label:\"2_100ms_\"},\r\n                    {ms:     500, step:2, label:\"3_500ms_\"},\r\n                    {ms:    1000, step:5, label:\"4_1sec_\"},\r\n                    {ms:    5000, step:4, label:\"5_5sec_\"},\r\n                    {ms:   20000, step:3, label:\"6_20sec_\"},\r\n                    {ms:   60000, step:5, label:\"7_1min_\"},\r\n                    {ms:  300000, step:4, label:\"8_5min_\"},\r\n                    {ms: 1200000, step:3, label:\"9_20min_\"},\r\n                    {ms: 3600000, step:6, label:\"10_1h_\"},\r\n                    {ms:21600000, step:4, label:\"11_6h_\"},\r\n                    {ms:Number.MAX_VALUE, step:1, label:\"12_overDay_\"}] // 最後はstep:１\r\n        };\r\n    /** @constructor */\r\n    function MappedETat(eTat){\r\n        if(!(this instanceof MappedETat)) return new MappedETat(eTat);\r\n        // MappedArrayを作成する\r\n        this._tatMap = new MappedArray(eTat, this._getKey, true);\r\n    }\r\n\r\n    /** @private */\r\n    MappedETat.prototype._row = function(label, step) {return label + step;};\r\n\r\n    /** @private */\r\n    // MapKey取得関数\r\n    MappedETat.prototype._getKey = function(e, i) {        // MapedMap用Key配列関数\r\n        var start = e.x - e.y,      // x,yはミリ秒\r\n            end = e.x,\r\n            _conf = MappedETat.prototype._conf,\r\n            _row = MappedETat.prototype._row,\r\n            term = _conf[0].ms,\r\n            rowLv = 0;\r\n        if(Math.ceil(end / term) - 1 === Math.floor(start / term)){ // 最小BOX\r\n            return [_row(_conf[0].label, 0),\r\n                    (Math.ceil(e.x / _conf[0].ms) - 1) * _conf[0].ms];\r\n        }\r\n        for (i = 1; i < _conf.length; i++) {                // 最下位から上に評価\r\n            term = _conf[i].ms;\r\n            if(Math.floor(end / term) === Math.floor(start / term) \r\n                    || end - start < term){                      // 上位BOXを起点\r\n                term = _conf[i-1].ms;   // ひとつ下位のBOX期間（下から評価したので二段下となることは無い\r\n                rowLv = Math.floor(end / term) - Math.floor(start / term);\r\n                return [_row(_conf[i-1].label, rowLv),\r\n                        (Math.ceil(e.x / _conf[i-1].ms) - 1) * _conf[i-1].ms];\r\n            }\r\n        }\r\n        return \"error\";\r\n    };\r\n\r\n    // static メンバーの設定\r\n    // _confから_abscissa(横軸）を生成する\r\n    var c = MappedETat.prototype._conf,\r\n        e2 = c[c.length - 2],\r\n        \r\n        e  = c[c.length - 1];\r\n    MappedETat.prototype._abscissa.push(\r\n            {label: MappedETat.prototype._row(e.label, e.step), ms: e.ms ,i: 1,\r\n                step: e.step, from: e2.ms * e2.step, to: e.ms} );   // 末尾を先頭に追加\r\n    for (var j = c.length - 1; 0 <= j; j--){    // 降順に追加\r\n        e = c[j];\r\n        for (var i = e.step; 0 < i; i--){ // #39\r\n            MappedETat.prototype._abscissa.push(\r\n                    {label: MappedETat.prototype._row(e.label, i), ms: e.ms, i: i, \r\n                                step: e.step, from: e.ms * i, to: e.ms * (i + 1)} );\r\n        }\r\n    }\r\n    MappedETat.prototype._abscissa.push( \r\n            {label: MappedETat.prototype._row(c[0].label, 0), ms: c[0].ms, i: 0,\r\n                step: 0, from: 0, to: c[0].ms} );   // 先頭を末尾に追加\r\n\r\n    \r\n    // public\r\n    /**\r\n     * 指定期間に動いているeTatを検索する\r\n     * \r\n     * @memberof HJN_util.MappedETat\r\n     * @parm {Number} from 指定期間(from)\r\n     * @parm {Number} [to=from] 指定期間(to)\r\n     * @parm {Number} [cap] cap件数となったら抽出を終了する（指定なしの時：全件）\r\n     * @return {ETAT} eTatArr 指定期間内のeTat配列\r\n     */\r\n    MappedETat.prototype.search = function (from, to, cap) {\r\n        to = to || from;    // to省略時は時刻指定(from=to)\r\n        cap = cap || Number.MAX_VALUE; // 指定なしの時：全件\r\n        var map = this._tatMap._map,\r\n            eTat = this._tatMap._arr,\r\n            abscissa = this._abscissa,\r\n            eTatArr = [],\r\n            start = 0,\r\n            end = 0;\r\n        // 検索対象のBOX一覧を生成する\r\n        abscissa.forEach(function(e){   // 存在しうる横軸のうち（tatが長時間の方から）\r\n            if (map[e.label]){          // 横軸が存在するものについて\r\n                var boxNum = e.i + Math.ceil(to / e.ms) - Math.floor(from / e.ms), // #45\r\n                    key = Math.floor(from / e.ms) * e.ms;\r\n                // 存在しうるKey値を終了時間が早い方から集計する\r\n                for(var j = 0; j <= boxNum; j++){\r\n                    // Key値が存在するものみが集計対象\r\n                    if (map[e.label][key]){ \r\n                        // かつ、Keyが持っている要素(eTatへの参照:k)が集計対象\r\n                        map[e.label][key].forEach(function(k){\r\n                            // かつ、from-toの期間に動いている要素(eTatのindex)が集計対象\r\n                            start = eTat[k].x - eTat[k].y;\r\n                            end   = eTat[k].x;\r\n                            if((start <= to) && (from <= end)){\r\n                                // かつ、戻り値の配列要素数がcap未満の場合が集計対象\r\n                                if(eTatArr.length < cap){\r\n                                    // 集計対象条件に合致する要素を、戻り値の配列に追加する\r\n                                    eTatArr = eTatArr.concat(eTat[k]);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    key += e.ms;    // 次のKey値\r\n                }\r\n            }\r\n        }, this);\r\n        return eTatArr;\r\n    };\r\n    \r\n    // newの戻り値\r\n    return MappedETat;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 配列位置逆引きマップ\r\n *            <p>\r\n *            配列に格納されているオブジェクトのx値で、配列位置を高速検索するマップ<br>\r\n *            指定関数の戻り値(x)をキーとするマップを作成する\r\n *            <p>\r\n *            参考 {@link http://qiita.com/alucky0707/items/10052866719ba5c5f5d7}\r\n * \r\n * @param {Array}\r\n *            arr インデクスをつける対象の配列\r\n * @param {String|function}\r\n *            [getKey=\"\"] MappedArrayのKey値の取得方法\r\n *            <p>\r\n *            String指定のとき（デフォルト\"\"を含む）、配列要素の値(valueOf)\r\n *            <p>\r\n *            注： 0,00,\"0\"は同値、1,01,\"1\"は同値 Stringのとき、 配列要素が持つ指定要素の値\r\n *            <p>\r\n *            functionのとき、配列要素に指定関数を適用した戻り値\r\n *            <p>\r\n *            関数の引数：(配列要素オブジェクト、配列のインデックス、作成中のMappedArrayへの参照）\r\n * @param {Boolean}\r\n *            [isMappedMap] getKeyが2段Map用の配列を返却する\r\n * @return {object} Index arrに対するインデックス（連想配列名で検索）\r\n * @example _tatMap = new HJN_util.MappedArray(eTat, this._getKey, true);\r\n */\r\nvar MappedArray = (function() {    // #18\r\n    /** @constructor */\r\n    function MappedArray(arr, getKey, isMappedMap){\r\n        if(!(this instanceof MappedArray)) return new MappedArray();\r\n        this._arr = arr;\r\n        // getKeyによりIndex作成関数を設定する\r\n        if(!getKey || getKey === \"\"){\r\n            // getKey指定がないとき、配列の値\r\n            this._getKey = function(e){ return e.valueOf(); };\r\n        }else if ((typeof(getKey) === \"string\") && (getKey !== \"\")){    // #29\r\n            // getKeyが文字列のとき、配列内オブジェクトのgetKey要素の値\r\n            this._getKey = function(e){ return e[getKey]; };\r\n        }else if (typeof(getKey) === \"function\" ){  // #29\r\n            // getKeyが関数のとき、配列内オブジェクトに関数を適用した戻り値\r\n            this._getKey = getKey;\r\n        }else{  // 以外のときエラーログを出力し、getKey指定なしと同様、配列の値\r\n            console.error(\"MappedArrayの第二引数エラー：[ %o ]を無視します \",getKey);\r\n            this._getKey = function(e){ return e.valueOf(); };\r\n        }\r\n        // MappedArrayを作成する\r\n        if(!isMappedMap){\r\n            this._createMappedArray();          \r\n        }else{\r\n            this._createMappedMappedArray();\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    MappedArray.prototype._createMappedArray = function() {\r\n        var key = \"\"; \r\n        this._map = this._arr.reduce(function(m, a, i) {\r\n            key = this._getKey.call(a, a, i, m);\r\n            m[key] = (m[key] || []).concat(i);\r\n            return m;\r\n        }, {});\r\n    };\r\n    /** @private */\r\n    MappedArray.prototype._createMappedMappedArray = function() {\r\n        var keys = [],\r\n            key = \"\",\r\n            mKey = \"\",\r\n            _getKey = this._getKey;\r\n        this._map = this._arr.reduce(function(m, a, i) {\r\n            keys = _getKey.call(a, a, i, m);\r\n            key = keys[1] || \"error\";\r\n            mKey = keys[0] || \"error\";\r\n            if(m[mKey] === undefined) m[mKey] = {};\r\n            m[mKey][key] = (m[mKey][key] || []).concat(i);\r\n            return m;\r\n        }, {});\r\n    };\r\n\r\n    // public\r\n    /**\r\n     * 値の存在チェック\r\n     * \r\n     * @meexport var N_util.MappedArray\r\n     */\r\n    MappedArray.prototype.has = function (keyValue) {\r\n        return keyValue in this._map;\r\n    };\r\n    /**\r\n     * 該当位置を配列で返す\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.indexes = function (keyValue) {\r\n        return this._map[keyValue] || [];\r\n    };\r\n    /**\r\n     * 該当する要素を配列で返す\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.search = function (keyValue) {    \r\n        var arr = this._arr;\r\n        return this.indexes(keyValue).reduce(function(m, i) {\r\n            m.push(arr[i]);\r\n            return m;\r\n        }, []);\r\n    };\r\n    /**\r\n     * Array.prototype.indexOf() 同等\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.indexOf = function (keyValue) {\r\n        var idxArr = this._map[keyValue],\r\n            i = idxArr ? idxArr.length : -1;\r\n        return (0 < i) ? idxArr[0] : -1;\r\n    };\r\n    /**\r\n     * Array.prototype.lastIndexOf() 同等\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.lastIndexOf = function (keyValue) {\r\n        var idxArr = this._map[keyValue],\r\n            i = idxArr ? idxArr.length : -1;\r\n        return (0 < i) ? idxArr[i-1] : -1;\r\n    };\r\n    \r\n    return MappedArray;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 定数設定機能（設定HTML作成機能付き）\r\n *            <p>\r\n *            日時、TATフォーマット指定機能追加用に作成\r\n * \r\n * @param {String}\r\n *            [prefix=''] 定数の名前空間を一位に指定する文字列、指定しない場合グローバル\r\n * @param {String}\r\n *            [ol='ol'] インデント(.nDown() .nUp())に使うHTMLタグ\r\n * @example this._config = HJN_util.Config(\"m\") // config設定画面定義\r\n *          .label(null,\"------\").n() // ラベルを表示し、改行\r\n *          .name(\"ENDIAN\").label(null,\"[endian(long field)]\") //key:ENDIAN\r\n *          .radio(def(\"ENDIAN_LIL\", true), null, \"little\", true) //表示ラベルと選択時設定値\r\n *          .radio(def(\"ENDIAN_BIG\", false), null, \"big\");\r\n */\r\nvar Config = (function() { // #24\r\n    \"use strict\";\r\n    /** @static */\r\n    Config.prototype.__config = {};   // config設定コンテナ\r\n    Config.prototype.__config._onFunctions = {}; // 関数登録用\r\n\r\n    /** @constructor */\r\n    function Config(prefix, ol){ \r\n        if(!(this instanceof Config)) return new Config(prefix, ol);\r\n        this._pre = (prefix || '') + \".\"; // 各フィールド、要素の名称のプレフィックス(区切り文字\".\")\r\n        this._ols = ol ? '<' + ol + '>' : '<ol>';   // リストに使用する要素（初期値 ol )\r\n        this._ole = ol ? '</' + ol + '>' : '</ol>';\r\n        this._html = this._ols; // config設定画面のHtml\r\n        this._nameHtml = '';    // HTMLタグの name属性指定\r\n        this._name = '';        // radioのConfig.get用\r\n// this._onFunctions = {}; // onイベント時に呼び出す関数の設定用 #51\r\n    }\r\n\r\n    /**\r\n     * HTML要素の値が変更した時に、configに当該要素を登録する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.on = function(t) {\r\n        if (t.type === \"radio\") { // radioのとき、nameに対して、選択されたキー値（idからprefixを削除した値）を登録\r\n            this.prototype.__config[t.name] = t.id.substr(t.id.indexOf(\".\") + 1);\r\n            // on呼出し関数が登録されているとき、登録関数を呼び出す #51\r\n            var func = Config.GetConfig().getFunctionById(t.id); // #59\r\n            if(typeof(func) === \"function\") func();\r\n        }else if (t.type === \"number\") {    // numberのとき、idに対する、value(入力値)を数値として登録\r\n            this.prototype.__config[t.id] = +t.value;\r\n        } else {                            // textのとき、idに対する、value(入力値)を登録\r\n            this.prototype.__config[t.id] = t.value;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Configリポジトリ管理インスタンスを取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.GetConfig = function(prefix) { // #59\r\n        return new Config(prefix);\r\n    }\r\n    \r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    /**\r\n     * configに登録されているid(=prefix+key)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getObjctById = function(id) {\r\n        return this.__config[id];\r\n    };\r\n    /**\r\n     * configに登録されているkey(prefix補填)の関数を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getFunctionByKey = function(key) { // #59\r\n        return Config.prototype.__config\r\n                ._onFunctions[this._pre + this.getValueByKey(key)];\r\n    };\r\n    /**\r\n     * configの指定Idに登録されている関数を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getFunctionById = function(id) { // #53\r\n        return Config.prototype.__config._onFunctions[id];\r\n    };\r\n    /**\r\n     * configに登録されているkey(prefix補填)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getValueByKey = function(key) { \r\n        return this.getObjctById(this._pre + key);\r\n    };\r\n    /**\r\n     * config設定用HTMLテキストを取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getHtml = function() { \r\n        return this._html + this._ole;\r\n    };\r\n    /**\r\n     * keyに値を設定する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.set = function(key, val) { \r\n        this.value[this._pre + key] = val;\r\n    };\r\n    \r\n    // config作成用 メソッド\r\n    /**\r\n     * 定義＆設定画面作成用機能： 改行\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.n = function (str) {\r\n        str = str || \"\";\r\n        this._html += this._ole + str + this._ols;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ネスト一つ下げ\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.nDown = function () {\r\n        this._html += this._ols;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ネスト一つ上げ\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.nUp = function () {\r\n        this._html += this._ole;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： nameを変更する（radio等の先頭で指定）\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.name = function (str) {\r\n        this._nameHtml = str ? 'name=\"' + this._pre + str + '\" ' : '';\r\n        this._name = str;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ラベル要素(prefix+keyで関連付けるformのid属性となる)\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.label = function (key, str, attribute) {\r\n        this._html += '<label ' +\r\n                        (key ? 'for=\"' + this._pre + key + '\" ': '') +\r\n                        (attribute || '') + '>' +\r\n                        (str || '') +\r\n                        '</label>\\n'; // #51\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ラベル付された各種入力フォーム\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.labeledForm = function (key, type, typedAttribute,\r\n                                pLabel, sLabel, val, attribute, check, cssClass) {\r\n        var classStr = (cssClass) ? ' class=\"' + cssClass + '\"' : ''; // #51\r\n        this._html += '<label' + classStr + '>' + // #51\r\n                    (pLabel ? pLabel : '') +\r\n                    '<input type=\"' +type + '\" ' +\r\n                        (typedAttribute || '') + \r\n                        this._nameHtml +\r\n                        'id=\"' + this._pre + key + '\" '+        // idがユニークになるようkeyにprefixを付与\r\n                        'onchange=\"HJN_util.Config.on(this);\" ' +\r\n                        (val ? 'value=\"' + val + '\" ' : '') +   // val は、キー値のまま\r\n                        (attribute || '') + \r\n                        (check ? ' checked=\"checked;\"' : '') +\r\n                    '>' +\r\n                    (sLabel ? sLabel : '') +\r\n                    '</label>\\n'; // #51\r\n        // デフォルト指定があるとき configにデフォルト値を設定する\r\n        if (type === \"radio\" && check) {    // radioのとき、nameに対して、選択状態のkeyを登録\r\n            Config.prototype.__config[this._pre + this._name] = key;\r\n        } else if (type === \"number\") { // numberradioのとき、keyに対する、val(入力値)を数値として登録\r\n            Config.prototype.__config[this._pre + key] = +val;\r\n        } else {    // text,numberのとき、keyに対する、val(入力値)を登録\r\n            Config.prototype.__config[this._pre + key] = val;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： テキストボックス要素で、文字列を設定\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.number = function (key, pLabel, sLabel, val, attribute) {\r\n        Config.prototype.labeledForm.call(this, key, \"number\", \"\", \r\n                                pLabel, sLabel, val, attribute);\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： テキストボックス要素で、数値を設定\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.text = function (key, pLabel, sLabel, val, attribute) {\r\n        Config.prototype.labeledForm.call(this, key, \"text\", \"\", \r\n                                pLabel, sLabel, val, attribute);\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ラジオボタン要素で、選択肢の一つを設定\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.radio = function (key, pLabel, sLabel, check, attribute, func) {\r\n        Config.prototype.labeledForm.call(this, key, \"radio\", (check ? 'checked=\"checked;\"' : ''),\r\n                                pLabel, sLabel, \"\", attribute, check, \"hjnLabel4Input\");\r\n        // 関数登録指定時、attributeを関数名として、指定関数を登録する #51\r\n        if (func){\r\n            Config.prototype.__config._onFunctions[this._pre + key] = func;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /* new */\r\n    return Config;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc Heap ヒープ(二分ヒープ)\r\n *            <p>\r\n *            最小値(最大値)を効率よく取り出すことができるデータ構造\r\n *            <p>\r\n *            参考 {@link http://d.hatena.ne.jp/otaks/20121220/1355993039}\r\n * \r\n * @param {Function}\r\n *            [func=function(obj){ return +obj; }]\r\n *            pushで登録するオブジェクトからヒープの大小比較判定値を取り出す関数\r\n * @param {Function}\r\n *            [delFunc=function(obj){ return obj; }] 削除対象ノードを特定する関数<br>\r\n *            「delの引数オブジェクト === delFunc(heapのノードのオブジェクト)」 で判定する\r\n * \r\n * @example h = HJN_util.Heap( function(obj){ return +obj; } );<br>\r\n *          h.push(\"12.34\") // データを登録する ;<br>\r\n *          h.push(0.12) // ;<br>\r\n *          h.pop() // => 0.12 最小値のオブジェクトを取り出す ;<br>\r\n *          h.pop() // => \"12.34\" ;<br>\r\n *          h.top() // =>undefined 最小値のオブジェクト ;<br>\r\n *          h.size() // =>0 登録オブジェクト数\r\n */\r\nvar Heap = (function() { // #55\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function Heap(func, delFunc){ \r\n        if(!(this instanceof Heap)) return new Heap(func, delFunc);\r\n        \r\n        this._func = (typeof(func) === \"function\")\r\n                ? func\r\n                : function(node){\r\n                    if (typeof(node.val) === \"undefined\") { return node }\r\n                    else { return node.val}; \r\n                  };\r\n        this._delFunc = (typeof(delFunc) === \"function\")\r\n                ? delFunc\r\n                : function(node){\r\n                    if(typeof(node.obj) === \"undefined\"){ return node }\r\n                    else { return node.obj};\r\n                  };\r\n        this._heap = []; // Heap構造体（大小比較数値用）\r\n    }\r\n\r\n    //\r\n    /**\r\n     * upheap：root方向へheapを再構築する\r\n     * \r\n     * @private\r\n     * @param {Number}\r\n     *            k 起点の_heap配列位置\r\n     */\r\n    Heap.prototype._upHeap = function(k) {\r\n        // 指定位置のオブジェクトとその値の控えを取る\r\n        var obj = this._heap[k];\r\n        var val = this._func(obj);\r\n        while( 0 < k ) {\r\n            // 親ノードの配列位置を求める\r\n            var p = Math.floor( (k - 1) / 2 );\r\n            // 逆転していなければ処理終了\r\n            if( this._func(this._heap[p]) <= val ) break;\r\n            // 親ノードと処理対象を入れ替える\r\n            this._heap[k] = this._heap[p];\r\n            this._heap[p] = obj;\r\n            k = p;\r\n        }\r\n    };\r\n    /**\r\n     * downheap：reaf方向へheapを再構築する\r\n     * \r\n     * @private\r\n     * @param {Number}\r\n     *            k 起点の_heap配列位置\r\n     */\r\n    Heap.prototype._downHeap = function(k) {\r\n        // 指定位置のオブジェクトとその値を控えを取る\r\n        var obj = this._heap[k];\r\n        var val = this._func(obj);\r\n        var size = this._heap.length;\r\n        // 子ノードが無くなるまで繰り返す\r\n        while( k * 2 + 1 < size) {\r\n            var a = k * 2 + 1;  // 子ノード（左）\r\n            var b = a + 1;      // 子ノード（右）\r\n            // aが大小比較対象先となる小さい子ノードを指すようにする\r\n            if( b < size && this._func(this._heap[a]) > this._func(this._heap[b]) ) a = b;\r\n            // 逆転していなければ処理終了\r\n            if( val < this._func(this._heap[a]) ) break;\r\n            // 子ノード（比較対象）と処理対象を入れ替える\r\n            this._heap[k] = this._heap[a];\r\n            this._heap[a] = obj;\r\n            k = a;\r\n        }\r\n    };\r\n    /**\r\n     * _heapのk番目を削除し、_heapを再構築する\r\n     * \r\n     * @private\r\n     * @param {Number}\r\n     *            k 起点の_heap配列位置\r\n     * @return {object|undefined} 削除したオブジェクト（削除対象が無いとき undefined）\r\n     */\r\n    Heap.prototype._del = function(k) {\r\n        if (this._heap.length <= k) return undefined; // ヒープ外を指定したとき\r\n\r\n        var ret = this._heap[k]; // 削除したオブジェクト\r\n        var obj = this._heap.pop(); // 末尾ノードを取り出す\r\n        var size = this._heap.length;\r\n        if (k === size) return ret; // 末尾ノードを削除したとき再構築不要\r\n\r\n        this._heap[k] = obj; // 末尾ノードを指定位置に移動する\r\n        if (size === 1) return ret; // ヒープが１個のとき、再構築不要\r\n\r\n        // upHeapの判定\r\n        var val = this._func(obj); // 末尾ノードにあったオブジェクトの値\r\n        var p = Math.floor( (k - 1) / 2 );\r\n        if (0 < k && val < this._func(this._heap[p])) {\r\n            // 親ノードより小さいときupheapする\r\n            this._upHeap(k);\r\n        } else {\r\n            var a = k * 2 + 1;  // 子ノード（左）\r\n            var b = a + 1;      // 子ノード（右）\r\n            if (a < size) { // 子ノードがあるとき（末端の枝葉でないとき）のみdownHeapする\r\n                // aに、子ノードの小さい方のノードを設定する\r\n                if( b < size && (this._func(this._heap[a]) > this._func(this._heap[b])) ) a = b;\r\n                // 自分より小さい子ノードがあるとき、downheapする\r\n                if( this._func(this._heap[a]) < val ) this._downHeap(k);\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    // public\r\n    /**\r\n     * データを追加する\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @param {Object}\r\n     *            obj 登録オブジェクト\r\n     */\r\n    Heap.prototype.push = function(obj) {\r\n        // 末尾に追加し、upHeapする\r\n        this._heap.push(obj);\r\n        this._upHeap(this._heap.length - 1);\r\n        if (this._deletable) {\r\n            this._deleteMap = {};\r\n        }\r\n    };\r\n    /**\r\n     * 最小値のデータを取り出す\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @return {Object|undefined} 最小値\r\n     */\r\n    Heap.prototype.pop = function() {\r\n        // 先頭ノードを戻り値用に退避する\r\n        var ret = this._heap[0];\r\n        // 末尾ノードを退避し削除する\r\n        var obj = this._heap.pop();\r\n        if(0 < this._heap.length){\r\n            // ヒープが空でないとき、末尾ノードを先頭に移動し、downHeapする\r\n            this._heap[0] = obj;\r\n            this._downHeap(0);\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * 指定データを削除する\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @param {Object}\r\n     *            obj 削除対象と同一オブジェクト(=== で判定)\r\n     * @return {Object|undefined} 削除したオブジェクト（undefined：合致するオブジェクトが無いとき）\r\n     */\r\n    Heap.prototype.del = function(obj) { // #59\r\n        // 削除対象オブジェクトのHeap配列位置を取得する\r\n        var k = -1;\r\n        if (this._heap.some(find, this)){\r\n            // 合致するオブジェクトのノードを削除し、合致ノードをリターンする\r\n            return this._del(k);\r\n        }\r\n        // 合致するオブジェクトが無いとき\r\n        return undefined;\r\n        \r\n        function find(e, i) {\r\n            if(this._delFunc(e) === obj){\r\n                k = i;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * 最小値を返却する（登録データは変更しない）\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @return {Object|undefined} 最小値\r\n     */\r\n    Heap.prototype.top = function() {\r\n        return this._heap[0];\r\n    };\r\n    /**\r\n     * ヒープのサイズを返却する\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @return {Number} ヒープサイズ（0以上）\r\n     */\r\n    Heap.prototype.size = function() {\r\n        return this._heap.length;\r\n    };\r\n    \r\n    /* new */\r\n    return Heap;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc Random 乱数取得\r\n *            <p>\r\n *            ある事象の単位時間あたりの発生回数がポアソン分布, その発生間隔が指数分布に従う<br>\r\n *            M/M/1モデルは、到着がポアソン過程となり、(したがって到着間隔は指数分布に従う)、サービス時間が指数分布に従う\r\n *            <p>\r\n *            参考 {@link http://www.ishikawa-lab.com/montecarlo/4shou.html}\r\n * \r\n * @param {Number}\r\n *            [average=0.5] 平均値\r\n * @example var r = HJN_util.Random(10), val = r.exponential();\r\n */\r\nvar Random = (function() { // #56\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function Random(average){\r\n        if(!(this instanceof Random)) return new Random(average);\r\n        this._average = average || 0.5;\r\n    }\r\n\r\n    /** @private */\r\n    \r\n    // public\r\n    /**\r\n     * 一様分布となる乱数を返却する\r\n     * \r\n     * @memberof HJN_util.Random\r\n     * @param {Number}\r\n     *            [average=this._average] 平均値<br>\r\n     * @return {Number} 乱数\r\n     */\r\n    Random.prototype.uniform = function(average) {\r\n        average = average || this._average;\r\n        return  2.0 * average * Math.random();\r\n    };\r\n\r\n    /**\r\n     * 指数分布となる乱数を返却する(lambda = 1/average)\r\n     * \r\n     * @memberof HJN_util.Random\r\n     * @param {Number}\r\n     *            [average=this._average] 平均値=1/λ、分散=1/(λ^2)<br>\r\n     * @return {Number} 乱数\r\n     */\r\n    Random.prototype.exponential = function(average) {\r\n        average = average || this._average;\r\n        return (-1.0 * average) * Math.log(1.0 - Math.random());\r\n    };\r\n    \r\n    /**\r\n     * ポアソン分布となる乱数を返却する(lambda = average)\r\n     * \r\n     * @memberof HJN_util.Random\r\n     * @param {Number}\r\n     *            [average=this._average] 平均値=分散=λ<br>\r\n     * @return {Number} 乱数\r\n     */\r\n    Random.prototype.poisson = function(average) {\r\n        var lambda = average || this._average;\r\n        var xp = Math.random();\r\n        var k = 0;\r\n        while (xp >= Math.exp(-lambda)) {\r\n            xp = xp * Math.random();\r\n            k = k + 1;\r\n        }\r\n        return (k);\r\n    };\r\n    \r\n    /* new */\r\n    return Random;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想システム(VirtualSystem)\r\n *            <p>\r\n *            Web3層(Web-AP-DB)をシミュレートしたWebのTATログ生成する\r\n *            <p>\r\n *            Webサーバ<br>\r\n *            最大スレッド数： Apache 2.4 [MaxClients = 1024]<br>\r\n *            JBossトランザクションタイムアウト [default-timeout = 300 秒]<br>\r\n *            キュー長 ： Apache 2.4 ListenBackLog (511) + Linux\r\n *            tcp_max_syn_backlog(769=1024*0.75+1)、タイムアウトなし<br>\r\n *            APサーバ<br>\r\n *            最大スレッド数(maxThreads)<br>\r\n *            JBossトランザクションタイムアウト [default-timeout=300 秒]<br>\r\n *            DBサーバ 最大コネクション数(max_connections)\r\n * \r\n * @param {Number}\r\n *            [start = 1970/01/02 00:00:00)] シミュレート開始時刻（UNIX日付（ミリ秒））\r\n * @param {Number}\r\n *            [end = startの24時間後] シミュレート終了時刻（UNIX日付（ミリ秒））\r\n * @param {String}\r\n *            [resourcesJson] リソース指定JSONテキスト\r\n * @param {Boolean}\r\n *            [log=false] 詳細ログ出力有無\r\n * @example sim = HJN_util.VirtualSystem()\r\n */\r\nvar VirtualSystem = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function VirtualSystem(start, end, resourcesJson, log){\r\n        if(!(this instanceof VirtualSystem)){\r\n            return new VirtualSystem(start, end, resourcesJson, log);\r\n        }\r\n        if (!resourcesJson) {\r\n            var jsonText =  '['\r\n                +   '{\"type\" :\"WEB\",\"thread\":1024,\"timeout\":300000, \"q\":1280, \"qWait\":0},'\r\n                +   '{\"type\" :\"AP\", \"thread\":20,  \"timeout\":300000, \"q\":1280, \"qWait\":0},'\r\n                +   '{\"type\" :\"DB\", \"thread\":2,   \"timeout\": 10000, \"q\":1000, \"qWait\":10000}'\r\n                + ']';\r\n            resourcesJson = JSON.parse(jsonText);\r\n        }\r\n        this.eTat = []; // シミュレートにより生成するTATログ出力先\r\n        var _resources = resourcesJson;\r\n        this._log = log ? log : false; // #53\r\n        this._start = +start || new Date(1970, 1, 2);   // シミュレート開始時刻\r\n        this._end = end || this._start + 24*60*60*1000; // シミュレート終了時刻（デフォルト：24時間後)\r\n        this._simulator = Heap(                // イベント予約スケジュール（ヒープ）\r\n                function(obj){ return obj.getTime(); }, // プライオリティの判定\r\n                function(obj){ return obj; });  // 削除対象の判定 #61\r\n        this._now = 0; // シミュレーション時の現在時刻\r\n        // リソースを設定する\r\n        this._resources = {}\r\n        for (var i = 0; i < _resources.length; i++) {\r\n            var e = _resources[i];\r\n            e.log = e.log ? e.log : this._log; // #53\r\n            this._resources[e.type] = VirtualResource(this, // #61\r\n                    e.type, e.thread, e.timeout, e.q, e.qWait, e.log);\r\n        };\r\n        VirtualSystem.debug = this; // ★\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    /**\r\n     * 仮想クライアントをスケジューラに登録する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {String}\r\n     *            [userName = \"Default_\"] ログに出力するユーザ名\r\n     * @param {String}\r\n     *            [message = \"\"] ログの末尾に出力するデータ\r\n     * @param {Number}\r\n     *            [num = 3] 期間内に生成する仮想クライアントの数\r\n     * @param {Number}\r\n     *            [start = HJN_util.S2D(\"1970/01/02 00:00:00\")]\r\n     *            仮想クライアント生成開始時刻（UNIX時刻の数値、ミリ秒）\r\n     * @param {Number}\r\n     *            [end = startの0.1秒後] 仮想アプリケーション強制終了時刻（UNIX時刻の数値、ミリ秒）\r\n     * @param {Object}\r\n     *            model 仮想クライアントが実行する取引モデル\r\n     */\r\n    VirtualSystem.prototype.setClients = function(userName, message, num, start, end, model) {\r\n        userName = userName || \"Default_\";\r\n        message = message || \"\";\r\n        num = (typeof(num) === \"number\") ? num : 1; // #61\r\n        start = +start || S2D(\"1970/01/02 00:00:00\");\r\n        end = +end || start + 100;\r\n        // baseModelが指定されているとき、modelに展開する\r\n        if (model.baseModel){\r\n            model = VirtualSystem.getModel(\r\n                model.baseModel.holds, model.baseModel.tatMin, model.baseModel.tat,\r\n                model.sequence, model.times, model.thinkTimeMin, model.thinkTime);\r\n        }\r\n        // modelにmessageを設定する\r\n        if (typeof(model.message) === \"string\") {\r\n            model.message += message;\r\n        } else {\r\n            model.message = message;\r\n        }\r\n        // 仮想APを登録する\r\n        var checkStart = start;\r\n        var r = Random((end - start) / num);\r\n        var t = start;\r\n        for (var i = 0; i < num; i++) {\r\n            // 仮想APを作成する\r\n            var vApp = VirtualApp(userName + i, model);\r\n            // 仮想APに開始時刻（指数分布）を設定し、登録する\r\n            t += Math.round(r.exponential());\r\n            this.setEvent(vApp.start(t));\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * イベントをスケジューラに登録する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {Object}\r\n     *            event 仮想クライアントもしくは仮想リソースのイベント\r\n     */\r\n    VirtualSystem.prototype.setEvent = function(event) {\r\n        this._simulator.push(event);\r\n    }\r\n\r\n    /**\r\n     * スケジューラからイベントを削除する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {Object}\r\n     *            event 仮想クライアントもしくは仮想リソースのイベント\r\n     */\r\n    VirtualSystem.prototype.removeEvent = function(event) {\r\n        this._simulator.del(event);\r\n    }\r\n\r\n    /**\r\n     * シミュレーションを実行する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @return {eTat} シミュレート実行結果のログ（this.eTat）\r\n     */\r\n    VirtualSystem.prototype.execute = function() {\r\n        var event, events;\r\n        // 処理対象がなくなるか、シミュレート終了時刻になるまでシミュレートする\r\n        while(0 < this._simulator.size() &&\r\n                this._simulator.top().getTime() <= this._end ) {\r\n            // 次にイベントを迎える仮想APを取り出し、「次の処理」をシミュレートする\r\n            event = this._simulator.pop();\r\n            this._now = event.getTime(); // #59\r\n            events = event.next(this);\r\n            // 「次の処理」のシミュレートに伴い発生したイベントを、スケジュールする\r\n            while (events.length) {\r\n                this._simulator.push(events.pop());\r\n            }\r\n        }\r\n        // シミュレーション終了後処理（処理中のvAppを強制終了する） #59\r\n        while(0 < this._simulator.size()){\r\n            event = this._simulator.pop();\r\n            if (event._finish) {\r\n                event._finish(this, \"N_EoS\", \"\", this._end);\r\n            }\r\n        }\r\n        // シミュレーション終了後処理（リソース開放待ちのvAppを強制終了する） #59\r\n        for (var key in this._resources){\r\n            this._resources[key]._finish(this, \"N_EoS\", \"\", this._end);\r\n        }\r\n        \r\n        return this.eTat;\r\n    };\r\n\r\n    /**\r\n     * リソースを取得する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {String}\r\n     *            [name = \"unlimited\"] 仮想リソース名\r\n     * @return {Object} 仮想リソース（登録されていないときは、新たにholdCapacity=1の仮想リソースを登録）\r\n     */\r\n    VirtualSystem.prototype.getResouce = function(name) {\r\n        if (typeof(this._resources[name]) === \"undefined\") {\r\n            this._resources[name] = VirtualResource(this, name);\r\n        }\r\n        return this._resources[name];\r\n    };\r\n\r\n    /**\r\n     * シミュレーション現在時刻（処理中のイベントの時刻）を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @return {Number} イベント時刻（UNIX時刻：ミリ秒）\r\n     */\r\n    VirtualSystem.prototype.getTime = function() {\r\n        return this._now;\r\n    };\r\n\r\n\r\n    // Static Method\r\n    /**\r\n     * 取引モデルを取得する（ユーティリティ）\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {Array}\r\n     *            [baseModel = []] 使用リソースの一覧[\"WEB\",\"AP\",\"DB\"]\r\n     * @param {Number}\r\n     *            [tat = 5] 使用リソースの平均取得時間＆平均開放時間\r\n     * @param {Number}\r\n     *            [tatMin = 2] 使用リソースの最小取得時間＆最小開放時間\r\n     * @param {Array}\r\n     *            [sequence = []] イベントシーケンス\r\n     * @param {Number}\r\n     *            [times = undefined] イベントシーケンスの繰り返し回数（未指定時:1)\r\n     * @param {Number}\r\n     *            [thinkTime= undefined] イベントシーケンス終了時に再実行する場合の平均再開時間（未指定時:500)\r\n     * @param {Number}\r\n     *            [thinkTimeMin = undefined]\r\n     *            イベントシーケンス終了時に再実行する場合の最小再開時間（未指定時:thinkTimeと同じ）\r\n     * @param {String}\r\n     *            [message = \"\"] 自動生成ログの末尾に追加する文字列\r\n     * @return {Object} 取引モデル\r\n     */\r\n    VirtualSystem.getModel = function(baseModel, tatMin, tat, sequence, times, thinkTimeMin, thinkTime, message) {\r\n        baseModel = baseModel || [];\r\n        tatMin = tatMin || 2;\r\n        tat = tat || 5;\r\n        message = message || \"\";\r\n        sequence = sequence || [\r\n                {tatMin:6,   tat:15,  note:\"Req\",     hold:\"DB\",    free:[]},\r\n                {tatMin:70,  tat:100, note:\"selectA\", hold:\"TBL_A\", free:[\"TBL_A\"]},\r\n                {tatMin:150, tat:200, note:\"updateB\", hold:\"TBL_B\", free:[]},\r\n                {tatMin:30,   tat:50,  note:\"Res\",     hold:\"\",      free:[\"TBL_B\",\"DB\"]}\r\n            ];\r\n        var model = {sequence :[], message : message}; // 戻り値\r\n        if (typeof(times) === \"number\") model.times = times;\r\n        if (typeof(thinkTimeMin) === \"number\") model.thinkTimeMin = thinkTimeMin;\r\n        if (typeof(thinkTime) === \"number\") model.thinkTime = thinkTime;\r\n        \r\n        // baseModelを返却用シーケンスに展開する\r\n        baseModel.forEach( function(e) {\r\n            model.sequence.push({hold:e, tatMin:tatMin, tat:tat, free:[]});\r\n        });\r\n        // 指定シーケンスを返却用シーケンスに追加する\r\n        model.sequence = model.sequence.concat(sequence);\r\n\r\n        // 返却用シーケンスに、holdingを追加するとともにシーケンス終了時未開放リソースを取得する\r\n        var resources = []; // #61\r\n        var holding = []; // #59\r\n        model.sequence.forEach( function(tran) { // #61\r\n            // tatMinがtatより大きいとき、tatをtatMin一定とする #59\r\n            if (tran.tat < tran.tatMin) tran.tat = tran.tatMin;\r\n            // 処理開始時にholdしているリソース一覧をholdingに登録する #59\r\n            tran.holding = [];\r\n            resources.forEach(function(r) {tran.holding.push(r)});\r\n            // 未開放リソース一覧を更新する\r\n            if (typeof(tran.hold) !== \"undefined\" && tran.hold !== \"\") {\r\n                resources.push(tran.hold);                \r\n            }\r\n            if (tran.free) {\r\n                tran.free.forEach( function(free){\r\n                    resources.some( function(r, i){\r\n                        if (r == free) {\r\n                            resources.splice(i,1);\r\n                            return true;\r\n                        }\r\n                    })    \r\n                })\r\n            }\r\n        }, this);\r\n        // シーケンス終了時未開放リソースが残っているとき、返却用シーケンスにリソース開放処理を追加する\r\n        if (0 < resources.length){\r\n            model.sequence = model.sequence.concat(\r\n                    [{hold: \"\", tatMin: tatMin * baseModel.length, tat: tat * baseModel.length,\r\n                        free: resources.reverse()}]);\r\n        }\r\n        return model;\r\n    };\r\n    \r\n    /* new */\r\n    return VirtualSystem;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想アプリケーション(VirtualApp)\r\n * \r\n * @param {String}\r\n *            [userName = \"dafault\"] ログに出力するユーザ名\r\n * @param {Array}\r\n *            [sequence = SQL３個のオン処理] 取引の処理シーケンスを格納した配列\r\n * @param {Number}\r\n *            [times = 2 回] 繰返し回数\r\n * @param {Number}\r\n *            [thinkTime = 300 ms] 繰返し時の次回処理開始までの平均時間(ミリ秒）\r\n */\r\nvar VirtualApp = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function VirtualApp(userName, model){\r\n        if(!(this instanceof VirtualApp)){\r\n            return new VirtualApp(userName, model);\r\n        }\r\n        this._userName = userName || \"default\"; // ログ出力テキスト\r\n        // 定数の設定\r\n        // イベントシーケンスを取得する\r\n        if (typeof(model) === \"undefined\") model = {}\r\n        model.baseModel = model.baseModel || {\"holds\": []};\r\n        this._sequence = model.sequence;\r\n        // イベントシーケンスの繰り返し回数\r\n        this._times = (typeof(model.times) !== \"undefined\") ? model.times : 1;\r\n        // イベントシーケンス終了時に再実行する場合の平均再開時間\r\n        this._thinkTime = Math.max(0,\r\n                (typeof(model.thinkTime) !== \"undefined\") ? model.thinkTime : 500);\r\n        // イベントシーケンス終了時に再実行する場合の最小再開時間\r\n        this._thinkTimeMin = Math.max(0,\r\n                (typeof(model.thinkTimeMin) !== \"undefined\") ? model.thinkTimeMin : 500);\r\n        // メッセージ（ログ末尾に付与する文字列）\r\n        this._baseMessage = model.message + \"\\n\";\r\n        this._message = \"\";\r\n        this._history = []; // #62\r\n\r\n        // 変数の設定\r\n        this._startTime = Number.MIN_SAFE_INTEGER; // イベントシーケンス開始時刻（UNIX時刻：ミリ秒）\r\n        this._sequenceTime = Number.MIN_SAFE_INTEGER; // シミュレータに登録したイベントの時刻（現在時刻）\r\n        this._sequenceIdx = 0;    // シミュレータに登録したイベントシーケンスの位置\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n\r\n    \r\n    /**\r\n     * シミュレータのログを出力する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Number}\r\n     *            logLv ログレベル（isLog <= logLvのときログ出力する）<br>\r\n     *            (0:なし, 1:エラー時のみ, 2:+ETAT, 3:+push/pop, 4:+HOLD/FREE)\r\n     * @param {boolean}\r\n     *            isLog ログ出力レベル\r\n     * @param {Number}\r\n     *            time 日時を表す数値（ミリ秒）\r\n     * @param {Object}\r\n     *            vApp 仮想アプリ\r\n     * @param {Object}\r\n     *            resource リソース\r\n     * @param {String}\r\n     *            text ログテキスト\r\n     * @param {String}\r\n     *            highText 強調表示テキスト\r\n     */\r\n    VirtualApp.prototype.logger = function(logLv, isLog, time, vApp, resource, text, highText) {\r\n        // 0:なしの時\r\n        if (!isLog) return;\r\n        var errCode = 0;\r\n        if (resource && (resource._holdHeap.size() !== resource._holdingQty)) {\r\n            // エラー時★\r\n            errCode = 1;\r\n            highText = highText ? highText + \"　unkown error!!\" : \"　unkown error!!\";\r\n        } else if (logLv > +isLog) {\r\n            return; \r\n        }\r\n        \r\n        // エラーログ編集\r\n        var user = vApp ? \" \" + vApp._userName : \" \";\r\n        var resourceText = resource ? (\" [\" + resource._name + \" wait:\"\r\n                + resource._waitHeap.size() + \"hold:\"\r\n                + resource._holdHeap.size() + \"=\"\r\n                + resource._holdingQty + \" qty] \") : \" \";\r\n        text = text || \"\";\r\n        var logText = D2S(this.getTime(),\"hh:mm:ss.ppp\",true) \r\n                    + user +\"(\" + this._times + \"-\" + this._sequenceIdx + \")\"\r\n                    + resourceText \r\n                    + text;\r\n        highText = highText || \"\";\r\n\r\n        // エラー時の強制補正★\r\n        var modify = \"\";\r\n        if (errCode === 1) { // リソースヒープもしくはリソース量を強制補正する\r\n            var deleted = undefined;\r\n            if (resource._holdHeap.size() < resource._holdingQty) {\r\n                deleted = resource._holdHeap.del(this);\r\n            }\r\n            if (deleted){\r\n                modify = \"FORCE★: holdHeap.del(\" + deleted.userName + \")\";\r\n            } else {\r\n                modify = \"FORCE★: holdingQty modified\"\r\n                    resource._holdingQty = resource._holdHeap.size();\r\n            }\r\n        }\r\n                \r\n        // エラーログ出力\r\n        if (highText || modify){\r\n            console.log(logText + \" %o\", highText + \" \" + modify);\r\n        } else {\r\n            console.log(logText);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取引を開始する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Number}\r\n     *            startTime 開始時刻（UNIX時刻：ミリ秒）\r\n     * @return {Object}仮想アプリケーション(this)\r\n     */\r\n    VirtualApp.prototype.start = function(startTime) {\r\n        this._times--; // イベントシーケンスの繰り返し回数を1減らす\r\n        this._sequenceIdx = 0;    // シミュレータに登録したイベントシーケンスの位置\r\n        this._startTime = startTime;      // イベントシーケンス開始時刻（UNIX時刻：ミリ秒）\r\n        this._sequenceTime = startTime;   // シミュレータに登録したイベントの時刻\r\n        this._message = this._baseMessage; // ログ末尾に出力する文字列の初期化\r\n        this._history = []; // ログ末尾に出力する状態遷移履歴情報の初期化 #62\r\n        this.addHistory(\"start\");\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * イベント時刻を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @return {Number} イベント時刻（UNIX時刻：ミリ秒）\r\n     */\r\n    VirtualApp.prototype.getTime = function() {\r\n        return this._sequenceTime;\r\n    };\r\n\r\n    /**\r\n     * リソース使用量を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            [resource| 指定なしのとき1.0を返却する] リソース\r\n     * @return {Number} リソース使用量\r\n     */\r\n    VirtualApp.prototype.getAmount = function(resource) {\r\n        return 1.0;\r\n    };\r\n\r\n    /**\r\n     * 次の状態に遷移する、シーケンス終了時TATログを出力する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @return {Array}再スケジュールするイベント（仮想アプリケーションorリソース）の配列、登録処理完了時はthisを含まない\r\n     */\r\n    VirtualApp.prototype.next = function(system) {\r\n        this.logger(4, system._log, system.getTime(), this, undefined, 'NEXT', undefined);\r\n        var events = []; // 戻り値\r\n        var ret = {result: true, events: [this]};\r\n        \r\n        if (this._sequenceIdx < this._sequence.length) { // イベントシーケンス処理途中のとき\r\n            var seq = this._sequence[this._sequenceIdx]; // 現在の処理シーケンス位置\r\n            // holdリソースを取得する\r\n            if (seq.hold && seq.hold !== \"\") {\r\n                // holdリソースが指定されているとき、指定リソースを確保する（確保できたとき[this]が戻り値）\r\n                ret = system.getResouce(seq.hold).hold(system, this); // #61\r\n                events = ret.events;\r\n            } else {\r\n                // holdリソースが指定されていないとき、無条件に自身をスケジュール対象に加える\r\n                events = [this];\r\n            }\r\n            // リソースを確保できたとき、該当シーケンスを完了させる\r\n            if (0 < events.length && (0 <= this._times) && ret.result) { // #61\r\n                // 完了した処理の処理時間を加える\r\n                var tatAdd = Math.ceil(Random().exponential(seq.tat - seq.tatMin));\r\n                this.setSequenceTime(this._sequenceTime += seq.tatMin + tatAdd, seq.hold); // #61\r\n                // シーケンスのfreeで指定されているリソースの解放\r\n                if (seq.free) {\r\n                    for (var i = 0; i < seq.free.length; i++) {\r\n                        events = events.concat(system.getResouce(seq.free[i]).free(this));\r\n                    }\r\n                }\r\n                // 次の処理を参照する（ シミュレータに登録したイベントシーケンスの位置）\r\n                this._sequenceIdx++;\r\n            }\r\n            return events;\r\n        }\r\n        \r\n        // イベントシーケンスを終えたときTATログを出力する(this._sequenceIdx >= this._sequence.length)\r\n        var vApp = this._finish(system, \"N_000\");\r\n        // シーケンスをstart状態に設定する\r\n        // this._sequenceTime = system.getTime(); はfinishで更新されるので不可\r\n        // this._startTime = this._sequenceTime; finishで設定する\r\n        // 繰返し処理を継続する場合、自アプリケーションを再スケジュールする\r\n        if (vApp) {\r\n            events.push(this);\r\n        }\r\n        return events;\r\n    };\r\n\r\n    /**\r\n     * Freeに伴い、次の状態に遷移する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Number}\r\n     *            [time | 変更しない} イベント時刻（UNIX時刻：ミリ秒）\r\n     * @param {String}\r\n     *            status ログに追記する時刻設定理由文字列\r\n     * @return {Object} 仮想アプリケーション(this)\r\n     */\r\n    VirtualApp.prototype.setSequenceTime = function(time, status) {\r\n        status = status || \"\"; \r\n        // 解放された時刻をイベント時刻に設定する\r\n        this._sequenceTime = time;\r\n        // ログに状態遷移履歴を追記する\r\n        return this.addHistory(status);\r\n    };\r\n\r\n    /**\r\n     * ログにステータス変更履歴を追記する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {String}\r\n     *            status ログに追記する状態遷移の理由文字列\r\n     * @param {Number}\r\n     *            time 状態遷移時刻（ミリ秒）\r\n     * @return {Object} 仮想アプリケーション(this)\r\n     */\r\n    VirtualApp.prototype.addHistory = function(status, time) {\r\n// var timeStr = \"\";\r\n// if (typeof(time) === \"number\") {\r\n// timeStr = D2S(time, \"mm:ss.ppp\", true) + \" seq:\"\r\n// }\r\n// this._message += \" [\" + this._sequenceIdx + \":\" + status + \"]\" // #61\r\n// + timeStr + D2S(this._sequenceTime, \"mm:ss.ppp\", true);\r\n        // 状態遷移履歴（ログ出力用）を追加する\r\n        this._history.push({ // #62\r\n            sequenceIdx : this._sequenceIdx,\r\n            status : status,\r\n            time : time,\r\n            sequenceTime : this._sequenceTime\r\n        });\r\n        return this;\r\n    };\r\n    \r\n    /**\r\n     * アベンド処理（holdしている可能性のあるリソースを解放し、イベントシーケンスを強制終了する）\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {Object}\r\n     *            holdedResource アベンドさせたVirtualResource\r\n     * @param {String}\r\n     *            [logID=\"E_600\"] ログID\r\n     * @param {String}\r\n     *            [logMesseage=\"\"] ログメッセージ\r\n     * @param {Boolean}\r\n     *            [isHolding=true] リソース(holdedResource)をholdしているか否か<br>\r\n     * @param {Number}\r\n     *            [abendTime=sytem.getTime()] abend時刻\r\n     * @return {Array}再スケジュールするイベント（仮想アプリケーションorリソース）の配列、登録処理完了時はthisを含まない\r\n     */\r\n    VirtualApp.prototype.abend = function(system, holdedResource, \r\n                                    logID, logMesseage, isHolding, abendTime) {\r\n        logID = logID || \"E_600\";\r\n        abendTime = abendTime || system.getTime();\r\n        isHolding = (typeof(isHolding) === \"boolean\") ? isHolding : true; // #61\r\n        var events = []; // 戻り値\r\n        this.logger(3, system._log, this._sequenceTime, this, holdedResource, 'abend', undefined);\r\n        var seq = this._sequence[this._sequenceIdx];\r\n        // 現在のシーケンスでholdするリソースがあるとき、waitしている可能性があるため、waitから削除する\r\n        if (seq && seq.hold) { // #61\r\n            system._resources[seq.hold].release(this);\r\n        }\r\n        // holdingリソースを開放する\r\n        var holdings;\r\n        // シーケンスから、holdingリソース一覧を取得する #59\r\n        if (seq) holdings = seq.holding;\r\n        if (holdings) { // シーケンス上holdingリソースがあるとき(undefined対策） #61\r\n            for (var i = holdings.length - 1; 0 <= i; i--) { // #61\r\n                // holdedResourceは削除処理対象外（呼び出し元リソースは、呼び出し前に削除済なので）\r\n                if (holdings[i] !== holdedResource._name || isHolding){ // #61\r\n                    // holdingリソースを開放し、使用リソース減に伴って新たにスケジュールするvAppを取得 #59\r\n                    events = events.concat(system._resources[holdings[i]].free(this));\r\n                }\r\n            }\r\n        }\r\n        // イベントシーケンスを強制終了する\r\n        this.setSequenceTime(abendTime, logID); // #59\r\n        var vApp = this._finish(system, logID, logMesseage);\r\n        // 自vAppに継続処理があれば、自vAppをスケジュール対象に加える\r\n        if (vApp && (0 <= this._times)) { // #61\r\n            events = events.concat([vApp]);\r\n        }\r\n        return events;\r\n    };\r\n    \r\n    /**\r\n     * イベント終了時処理（ログ出力と、繰り返し判定）\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {String}\r\n     *            [logID=\"N_000\"] ログID（ログメッセージの先頭文字）\r\n     * @param {String}\r\n     *            [logMesseage=\"\"] ログメッセージ\r\n     * @param {Number}\r\n     *            [forceTime] 強制終了時刻を指定する（ミシュレーション停止後のeTat強制出力用）\r\n     * @return {Object|undefined} 再スケジュールするときthis、再スケジュールしないときundefined\r\n     */\r\n    VirtualApp.prototype._finish = function(system, logID, logMesseage, forceTime) {\r\n        logID = logID || \"N__00\";\r\n        logMesseage = logMesseage || \"\";\r\n        var events = []; // 戻り値\r\n        var logText = logID + \" \" + this._userName + \" \" + logMesseage + \" \" + this._message;\r\n        var now = this._sequenceTime;\r\n\r\n        // 強制終了時（シミュレーション終了時刻到来時）、自APのシミュレーションを強制終了する\r\n        if (typeof(forceTime) === \"number\") {\r\n            // 起動済処理はTATログを出力する #59\r\n            if (this._startTime <= forceTime) { \r\n                // TATログを出力する\r\n                system.eTat.push( { x: forceTime, \r\n                                    y: Math.round(forceTime - this._startTime),\r\n                                    sTatIdx: 0,\r\n                                    message: logText,\r\n                                    history: this._history} ); // #62\r\n                this.logger(2, system._log, forceTime, this, undefined, 'finish() FORCE\"', logText);\r\n            }\r\n            this._sequenceIdx = this._sequence.length; // #61 処理完了状態にする\r\n            this._startTime = this._sequenceTime; // #61 念のため設定\r\n            return undefined;\r\n        }\r\n        \r\n        // 起動済処理はTATログを出力する #59\r\n        if (this._startTime <= now ) { // || this._sequenceIdx ===\r\n                                        // this._sequence.length) {\r\n            system.eTat.push( { x: now,\r\n                                y: Math.round(now - this._startTime),\r\n                                sTatIdx: 0,\r\n                                message: logText,\r\n                                history: this._history} ); // #62\r\n            this.logger(2, system._log, now, this, undefined, 'finish() \"', logText);\r\n        } else  {\r\n            this.logger(0, system._log, now, this, undefined,\r\n                    'finish() Unexpected error★ _startTime > _sequenceTime:'\r\n                    + D2S(this._startTime, \"hh:mm:ss.ppp\", true)\r\n                            + \" \" + this._startTime + \" > \" + now\r\n                            + \" Idx:\" + this._sequenceIdx \r\n                    , logText);\r\n        }\r\n        this._message = this._baseMessage; // ログ末尾に追加するメッセージの初期化\r\n \r\n        // 継続判定\r\n        if (0 < this._times) { // イベントシーケンスを繰り返すとき\r\n            // イベント時刻にThink time（指数分布）を加える\r\n            var nextTime = this.getTime() + this._thinkTimeMin;\r\n            if (this._thinkTimeMin < this._thinkTime) {\r\n                nextTime += Math.ceil(Math.abs( // #61\r\n                        Random().exponential(this._thinkTime - this._thinkTimeMin)));\r\n            }\r\n            // 処理の先頭に戻る\r\n            return this.start(nextTime);\r\n        }\r\n        // イベントシーケンスを継続しない時(this._times < 0)\r\n        this._times--;       // イベントシーケンスの繰り返し回数を1減らす\r\n        this._sequenceIdx = this._sequence.length; // #61 処理完了状態にする\r\n        this._startTime = this._sequenceTime; // #61\r\n        return undefined;\r\n    };\r\n\r\n    /* new */\r\n    return VirtualApp;\r\n}());\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想リソース(VirtualResource)\r\n * \r\n * @param {Object}\r\n *            system 仮想システム（シミュレーション中の現在時刻取得等に用いる）\r\n * @param {String}\r\n *            [name = \"unlimited\"] リソース名（\"unlimited\"はリソース解放待ちを管理しない）\r\n * @param {Number}\r\n *            [holdCapacity = 1.0] 保有リソース総量（数）\r\n * @param {Number}\r\n *            [timeout = 10秒] 処理のタイムアウト時間（未使用）\r\n * @param {Number}\r\n *            [waitCapacity = Number.MAX_SAFE_INTEGER]\r\n *            リソース取得待ちキューの深さ（数）、キュー溢れ時は即時エラー終了しリソース処理しない\r\n * @param {Number}\r\n *            [queueWait = 10秒] 最大キュー滞留時間（リソース取得待ちタイムアウト時間）\r\n * @param {Boolean}\r\n *            [log=false] 詳細ログ出力有無\r\n */\r\nvar VirtualResource = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function VirtualResource(system, name,\r\n                        holdCapacity, timeout, waitCapacity, queueWait, log){\r\n        if(!(this instanceof VirtualResource)){\r\n            return new VirtualResource(system, name,\r\n                        holdCapacity, timeout, waitCapacity, queueWait, log);\r\n        }\r\n        this._system = system;\r\n        this._name = name || \"unlimited\";\r\n        this._log = log ? +log : 0; // #59\r\n\r\n        // 処理待ち管理用\r\n        this._waitTimeout = (typeof(queueWait) !== \"undefined\")\r\n                                ? queueWait : 10000;   // キュー滞留時間上限\r\n        this._waitCapacity  = (typeof(waitCapacity) !== \"undefined\")\r\n                                ? waitCapacity : Number.MAX_SAFE_INTEGER; // キューの深さ\r\n        this._waitHeap = Heap(    // リソース解放待ちキュー（登録時間順）\r\n                function(obj){ return obj.getTime(); });\r\n        \r\n        // リソース管理用\r\n        this._holdTimeout  = (typeof(timeout)  !== \"undefined\") \r\n                                ? timeout : 10000;   // 処理のタイムアウト時間\r\n        this._holdCapacity = (typeof(holdCapacity) !== \"undefined\")\r\n                                ? holdCapacity : 1.0;   // 保有リソース量（数）\r\n        this._holdingQty = 0;   // 使用リソース量\r\n        this._holdHeap = Heap( // 処理のタイムアウト管理用ヒープ{obj:,val:} #59\r\n                 function(node){ return node.val; }, // valはタイムアウト時刻\r\n                 function(node){ return node.obj; }); // objはvApp\r\n        \r\n        // イベントスケジュール制御用\r\n        this._sequenceTime = 0;   // シミュレータに登録したイベントの時刻（タイムアウトチェック用）\r\n        this._isScheduled = false; // シミュレータにタイムアウトチェックイベントをスケジュールしたか\r\n        if (0 < this._waitTimeout && 0 < this._holdTimeout){ // スケジュール間隔 #61\r\n            this._interval = Math.min(this._waitTimeout, this._holdTimeout);\r\n        } else if (0 < this._waitTimeout) {\r\n            this._interval = this._waitTimeout;\r\n        } else if (0 < this._holdTimeout) {\r\n            this._interval = this._holdTimeout;\r\n        } else {\r\n            this._interval = 0;\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    /**\r\n     * リソースチェックイベント（タイムアウトチェック）を開始する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Number}\r\n     *            startTime 開始時刻（UNIX時刻：ミリ秒）\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @return {Object} イベント(this)\r\n     */\r\n    VirtualResource.prototype.start = function(startTime, system) { // #59\r\n        this._sequenceTime = startTime + this._interval; // シミュレータに登録するイベントの時刻\r\n        system.setEvent(this);    // シミュレータにタイムアウトチェックイベントをスケジュールする\r\n        this._isScheduled = true; // 「シミュレータにタイムアウトチェックイベントをスケジュールしたかフラグ」をON\r\n        return this;\r\n    };\r\n    \r\n    /**\r\n     * イベント時刻を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @return {Number} イベント時刻（UNIX時刻：ミリ秒）\r\n     */\r\n    VirtualResource.prototype.getTime = function() {\r\n        return this._sequenceTime;\r\n    };\r\n    \r\n    /**\r\n     * タイムアウトチェック用仮想イベント\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @return {Array}再スケジュールするイベント（仮想アプリケーションorリソース）の配列、登録処理完了時はthisを含まない\r\n     */\r\n    VirtualResource.prototype.next = function(system) {\r\n        var events = []; // 戻り値\r\n        var now = this.getTime();\r\n        // リソース解放待ち時間がタイムアウトしたappをタイムアウトさせる\r\n        var queuedTime = Number.MIN_SAFE_INTEGER; \r\n        while (0 < this._waitHeap.size() && this._waitTimeout <= now - queuedTime) {\r\n            queuedTime = this._waitHeap.top().getTime();\r\n            if (this._waitTimeout <= now - queuedTime) { // キューイング取引がタイムアウトしているとき\r\n                // リソース解放待ちHeapからfreeするappを取り出す\r\n                var app = this._waitHeap.pop();\r\n                // appをアベンドさせる(holdリソース解放なし）\r\n                var apps = app.abend(system, this, \"E_QTO\", this._name + \" queue timeout\",\r\n                        false, queuedTime + this._waitTimeout); // appにfree時刻をセットする\r\n                // appsをスケジュールイベント登録対象に加える\r\n                if (apps.length){\r\n                    events = events.concat(apps);\r\n                }\r\n            }\r\n        }\r\n        // リソース使用時間がタイムアウトしたappをタイムアウトさせる #59\r\n        var holdTimeoutTime = Number.MIN_SAFE_INTEGER;\r\n        while (0 < this._holdHeap.size() && holdTimeoutTime <= now) {\r\n            var top = this._holdHeap.top();\r\n            holdTimeoutTime = top.val;\r\n            if (holdTimeoutTime <= now) { // 処理中取引がタイムアウトしているとき #61\r\n                var app = top.obj;\r\n                // appがスケジュールされている場合削除する（スケジューラに登録されていない場合何も起きない）\r\n                system.removeEvent(app);\r\n                // appの使用時間がタイムアウトしたリソースを解放する（注：abendで解放させると永久ループする）\r\n                events = events.concat(this.free(app));                \r\n                // appをタイムアウト時刻にアベンドさせる(holdリソース解放を伴う）\r\n                events = events.concat(app.abend(system, this,\"E_HTO\", \r\n                            this._name + \" hold timeout\", false, holdTimeoutTime));\r\n            }\r\n        }\r\n        // 次回タイムアウトチェック時刻を設定する\r\n        if ((0 < this._waitHeap.size()) || (0 < this._holdHeap.size())) {\r\n            // タイムアウトの設定があるとき、 #61\r\n            // リソース解放待ちvAppがあるとき、(タイムアウトしていない)最古vAppのタイムアウト時刻\r\n            // リソース解放待ちvAppがないとき、現在からタイムアウト時刻後 にスケジュールする\r\n            var nextWaitTimeout = Number.MAX_SAFE_INTEGER;\r\n            if (0 < this._waitTimeout) {\r\n                if ( 0 < this._waitHeap.size() \r\n                        && now <= this._waitTimeout + this._waitHeap.top().getTime()) {\r\n                    nextWaitTimeout = this._waitHeap.top().getTime() + this._waitTimeout; \r\n                } else {\r\n                    nextWaitTimeout = now + this._waitTimeout;\r\n                }\r\n            }            \r\n            var nextHoldTimeout = Number.MAX_SAFE_INTEGER;\r\n            if (0 < this._holdTimeout) {\r\n                if(0 < this._holdHeap.size()) {\r\n                    nextHoldTimeout = this._holdHeap.top().val;\r\n                } else {\r\n                    nextHoldTimeout = now + this._holdTimeout;\r\n                }\r\n            }\r\n            this._sequenceTime = Math.min(nextWaitTimeout, nextHoldTimeout);\r\n            if (this._sequenceTime < Number.MAX_SAFE_INTEGER) {\r\n                events.push(this); // タイムアウトチェックイベントをケジュールイベント登録対象に加える\r\n            } else {\r\n                this._isScheduled = false;\r\n            }\r\n        } else { \r\n            // 以外のとき、シミュレータにタイムアウトチェックイベントを再スケジュールしない\r\n            this._isScheduled = false;\r\n        }\r\n        return events;\r\n    };\r\n\r\n    /**\r\n     * リソースを取得する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {Object}\r\n     *            vApp リソースにhold要求する仮想AP\r\n     * @return {Objcet} 処理結果{result:boolean, events:Array}<br>\r\n     *         {boolean} result :\r\n     *         true:正常（リソース取得、取得待ち、取得不要）、false:エラー（リソース枯渇E_QOF)）<br>\r\n     *         {Array} :events リソース取得後、スケジューラに登録するイベントの配列<br>\r\n     *         [vApp]： リソースを取得できたとき、もしくはリソース枯渇時でvApp再処理の場合、スケジュール対象の vApp\r\n     *         が登録された配列[vApp]を返却<br>\r\n     *         []： リソース待ちに登録されたとき、既にリソースが管理するスケジューラに登録さているので、空の配列[]を返却<br>\r\n     *         もしくはリソース枯渇時で繰返し完了時、再スケジュールしないので[]を返却\r\n     */\r\n    VirtualResource.prototype.hold = function(system, vApp) {\r\n        var ret = { result : true,\r\n                    events : [vApp] }; // 戻り値 #61\r\n        if (this._name === \"unlimited\") return ret; // [vApp] リソース解放待ちを管理しないとき\r\n        vApp.logger(4, this._log, vApp._sequenceTime, vApp, this, 'HOLD' , undefined);\r\n        // タイムアウトチェックイベントがスケジュールされていないとき、スケジュールする\r\n        if (!this._isScheduled && (0 < this._interval)) {\r\n            this.start(system.getTime(), system);\r\n        }\r\n        // リソースを取得できるとき、使用リソース量（数）を増やし、実行中処理管理ヒープに登録し、スケジュール対象とする\r\n        var amount = vApp.getAmount(this); // 消費リソース量(デフォルト1.0）\r\n        if (amount <= (this._holdCapacity - this._holdingQty)) {\r\n            // 使用リソースを増やす\r\n            this._holdingQty += amount;\r\n            // タイムアウト管理対象リソースのとき、vAppをタイムアウト管理対象に加える #59\r\n            if (0 < this._holdTimeout) {\r\n                this._holdHeap.push({obj: vApp, val: system.getTime() + this._holdTimeout});\r\n            }\r\n            vApp.logger(3, this._log, system.getTime(), vApp, this, 'hold' , undefined);\r\n            return ret; // [vApp]\r\n        }\r\n\r\n        // リソース解放待ちキューに空きがあるとき、vAppをリソース解放待ちに 登録する（スケジュールしない）\r\n        if ((this._waitHeap.size() < this._waitCapacity) && (0 < this._waitTimeout)){\r\n            // リソース解放待ちタイムアウト管理対象に加える\r\n            this._waitHeap.push(vApp);\r\n            vApp.addHistory(\"wait:\" + this._name, system.getTime()); // #61\r\n            vApp.logger(3, this._log, system.getTime(), vApp, this, 'wait' , undefined);\r\n            return { result: true, events: [] };\r\n        }\r\n        \r\n        // リソース解放待ちキューが溢れていた時、リソースを取得できずにアベンド（リソース解放なし、自AP継続の場合[vApp]をリターン） #61\r\n        var apps = vApp.abend(system, this, \"E_QOF\",\r\n                    \"[\" + this._name + \"] over flow\", false);\r\n        vApp.logger(3, this._log, system.getTime(), vApp, this, 'over' , undefined);\r\n        return { result: false, events: apps }; // #61\r\n    };\r\n\r\n    /**\r\n     * 引数vAppが使用していたリソースを解放する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            vApp リソースにfree要求する仮想AP\r\n     * @param {Boolean}\r\n     *            [isHolding=true] 該当vAppが自リソースをholdしているか否か<br>\r\n     *            false指定時、指定vAppはリソースをholdしていない前提で、hold vApp一覧からの削除処理を行わない\r\n     * @return {Array} スケジューラに登録するイベントの配列([vApp] | [])\r\n     */\r\n    VirtualResource.prototype.free = function(vApp, isHolding) { // #59\r\n        vApp.logger(4, this._log, this._system.getTime(), vApp, this, 'FREE' , undefined);\r\n        isHolding = (typeof(isHolding) === \"boolean\") ? isHolding : true;\r\n        if (this._name === \"unlimited\") return []; // リソース解放待ちを管理しないとき\r\n        var vApps = []; // 戻り値\r\n        // 自リソースを使用している可能性があるとき、使用リソースを解放する\r\n        // 解放したvAppが使用していたリソース量(デフォルト1.0）を、使用リソース量（数）から減らす #59\r\n        if (isHolding === true) { // #61\r\n            this._holdingQty -= vApp.getAmount(this);\r\n            // タイムアウト管理対象リソースのとき、vAppをタイムアウト管理対象から削除する #61\r\n            if (0 < this._holdTimeout) { // #61\r\n                var app = this._holdHeap.del(vApp);\r\n            }\r\n            vApp.addHistory(\"free:\" + this._name, this._system.getTime());\r\n            vApp.logger(3, this._log, this._system.getTime(), vApp, this, 'del' , undefined);\r\n        }\r\n        // リソース解放待ちキューから、空きリソースで処理できるようになったvAppを取り出しスケジュールする #61\r\n        var marginQty = this._holdCapacity - this._holdingQty;\r\n        var addQty = this._waitHeap.top()\r\n                    ? this._waitHeap.top().getAmount(this) // 次のリソース解放待ちキューの使用量\r\n                    : Number.MAX_SAFE_INTEGER;\r\n        for (var i = this._waitHeap.size() && addQty <= marginQty; 0 < i; i--) {\r\n            // リソース解放待ちキューからfreeするappを取り出す\r\n            var app = this._waitHeap.pop();\r\n            // appにfree時刻をセットし、スケジュールイベント登録対象に加える\r\n            // (注：リソース取得はスケジュール後、E_HTOに伴う他のリソースの時刻は将来）\r\n            app.setSequenceTime(this._system.getTime(), \"release:\" + this._name);\r\n            vApps.push(app);\r\n            // 次のappのリソース量を加える\r\n            addQty += this._waitHeap.top() \r\n                    ? this._waitHeap.top().getAmount(this) // 次のリソース解放待ちキューの使用量\r\n                    : Number.MAX_SAFE_INTEGER;\r\n        }\r\n        return vApps;\r\n    };\r\n\r\n\r\n    /**\r\n     * 引数vAppをリソース開放待ちキューからリリースする\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            vApp リリースする仮想AP\r\n     * @return {Object | undefined} リリースした仮想AP\r\n     */\r\n    VirtualResource.prototype.release = function(vApp) { // #61\r\n        var app = this._waitHeap.del(vApp);\r\n        if (app) vApp.addHistory(\"release\", this._system.getTime());\r\n        return app;\r\n    }\r\n\r\n    \r\n    \r\n    /**\r\n     * イベント終了時処理（リソースが管理しているvAppをfinishさせる（強制終了させ処理中vAppはTATログ出力する）\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {String}\r\n     *            [logID=\"N_000\"] ログID（ログメッセージの先頭文字）\r\n     * @param {String}\r\n     *            [logMesseage=\"\"] ログメッセージ\r\n     * @param {Number}\r\n     *            forceTime 強制終了時刻を指定する（ミシュレーション停止後のeTat強制出力用）\r\n     * @return {null}\r\n     */\r\n    VirtualResource.prototype._finish = function(system, logID,\r\n                                        logMesseage, forceTime) { // #59\r\n        // シミュレーション終了後処理（処理中のvAppを強制終了する）\r\n        logID = logID || \"N_EoS\";\r\n        logMesseage = logMesseage || \"\";\r\n        while(0 < this._waitHeap.size()){\r\n            event = this._waitHeap.pop();\r\n            if (event._finish) {\r\n                event._finish(system, logID,\r\n                        \"[\" + this._name + \"] \" + logMesseage , forceTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* new */\r\n    return VirtualResource;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想システム生成ツール(virtualSystemByJson)\r\n *            <p>\r\n *            util管理用クラス（スタティックメソッドのみ）のためコンストラクタは使用しない\r\n */\r\nvar virtualSystemByJson = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function virtualSystemByJson(){\r\n        if(!(this instanceof virtualSystemByJson)){\r\n            return new virtualSystemByJson();\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    \r\n    // static\r\n    /**\r\n     * 初期表示用サンプルデータ(ETAT)を自動生成する\r\n     * \r\n     * @memberof HJN_util.virtualSystemByJson\r\n     * @param {String}\r\n     *            [jsonText] シミュレーション条件JSONテキスト\r\n     * @return {ETAT} 終了時刻のTAT（応答時間）時系列データ [{x:終了時刻(UNIX時刻の経過時間(秒)),\r\n     *         y:レスポンス(秒)}]\r\n     */\r\n    // CreateSampleTatLog\r\n    virtualSystemByJson.Execute = function(jsonText){ // #53\r\n        \"use strict\";\r\n        var vSys = {};\r\n        // parse\r\n        var json = JSON.parse(jsonText)\r\n        // virtual system と resources の設定\r\n        var log = (json.log !== undefined) ? json.log : false; // #59\r\n        var start = (json.start !== undefined) \r\n                    ? S2D(json.start) : new Date(1970,1,2);\r\n        var end = start + S2N(json.end, \"24*h\");\r\n        var resources = json.resources;\r\n        for (var i = 0; i < resources.length; i++) {\r\n            resources[i].timeout = S2N(resources[i].timeout, \"10*sec\");\r\n            resources[i].qWait = S2N(resources[i].qWait, \"10*sec\");\r\n        }\r\n        vSys = VirtualSystem(start, end, json.resources, log);\r\n        // model の取得\r\n        var models = json.models;\r\n        for (var i = 0; i < models.length; i++) {\r\n            var model = models[i];\r\n            var name = Object.keys(model)[0]; // モデルの名称\r\n            var m = model[name]; // モデル\r\n            var baseModel = m.baseModel; // baseModel\r\n            for (var j = 0; j < m.sequence.length; j++) {\r\n                // 時間指定文字列を、ミリ秒数値に変換する（例：\"3*sec\"->3000)\r\n                m.sequence[j].tatMin = S2N(m.sequence[j].tatMin);\r\n                m.sequence[j].tat = S2N(m.sequence[j].tat);\r\n            }\r\n            // sequenceに、baseModelを展開し、未開放リソースの開放処理を登録する\r\n            models[name] = VirtualSystem.getModel(\r\n                        baseModel.holds, \r\n                        S2N(baseModel.tatMin), S2N(baseModel.tat),\r\n                        m.sequence, \r\n                        (typeof(m.times) === \"number\") ? m.times : 1, // #61\r\n                        S2N(m.thinkTimeMin), S2N(m.thinkTime)); \r\n        }\r\n        // client の設定\r\n        var clients = json.clients;\r\n        for (var i = 0; i < clients.length; i++) {\r\n            var c = clients[i];\r\n            var cStart = start + S2N(c.start, 0);\r\n            var cEnd   = start + S2N(c.end, 24*60*60*1000);\r\n            vSys.setClients(c.user, c.message, c.num, cStart, cEnd, models[c.model]);\r\n        }\r\n        if (log) console.log(vSys); // #59\r\n        return vSys.execute();\r\n    }\r\n\r\n    /**\r\n     * シミュレーション条件JSONテキストを作成する\r\n     * \r\n     * @memberof HJN_util.virtualSystemByJson\r\n     * @param {Number}\r\n     *            [n = 0] シナリオ番号\r\n     * @return {String} シミュレーション条件JSONテキスト\r\n     */\r\n    // CreateSampleTatLogJson\r\n    virtualSystemByJson.GetJsonConfig = function(n){ // #53\r\n        \"use strict\";\r\n        n = (typeof(n) !== \"undefined\") ? n : 0;\r\n        var jsonText = \"\";\r\n        if (n === 0) {\r\n            jsonText =  '{\\n'\r\n                + '\"log\" : 1,\\n'\r\n                + '\"start\" : \"2017/01/02 00:00:00.000\",\\n'\r\n                + '\"end\"   : \"17.0*h\",\\n'\r\n                + '\"resources\" : [\\n'\r\n                + '  {\"type\" :\"WEB\", \"thread\":1024,\"timeout\":\"300*sec\", \"q\":1280, \"qWait\":0},\\n'\r\n                + '  {\"type\" :\"AP\",  \"thread\":20,  \"timeout\":\"300*sec\", \"q\":1280, \"qWait\":0},\\n'\r\n                + '  {\"type\" :\"DB\",  \"thread\":10,  \"timeout\": \"10*sec\", \"q\":10,  \"qWait\":\"10*sec\"}\\n'\r\n                + '],\\n'\r\n                + '\\n'\r\n                + '\"models\" : [\\n' // 取引モデル一覧\r\n                + '  { \"ON-1\" : {\\n' // オンライン取引1\r\n                + '    \"times\": 60, \"thinkTimeMin\":\"3*sec\", \"thinkTime\": \"10*sec\",\\n'\r\n                + '    \"baseModel\":  {\"holds\": [\"WEB\",\"AP\",\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"5*ms\"},\\n'\r\n                + '    \"sequence\": [\\n'\r\n                + '      {\"tatMin\":30, \"tat\":50, \"note\":\"select A\"},\\n'\r\n                + '      {\"tatMin\":50, \"tat\":50, \"note\":\"updateB\", \"hold\":\"TBL_B\"},\\n'\r\n                + '      {\"tatMin\":80, \"tat\":100,\"note\":\"updateC\", \"hold\":\"TBL_C\"}\\n'\r\n                + '    ]}},\\n'\r\n                + ' { \"ON-2\" : {\\n' // オンライン取引2\r\n                + '    \"times\": 60, \"thinkTimeMin\":\"500*ms\", \"thinkTime\": \"1*sec\",\\n'\r\n                + '    \"baseModel\":  {\"holds\": [\"WEB\",\"AP\",\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"5*ms\"},\\n'\r\n                + '    \"sequence\": [\\n'\r\n                + '      {\"tatMin\":\"100*ms\", \"tat\":\"500*ms\", \"hold\":\"\"}\\n'\r\n                + '    ]}},\\n'\r\n                + ' { \"BATCH-1\" : {\\n' // バッチ取引3\r\n                + '    \"baseModel\":  {\"holds\": [\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"5*ms\"},\\n'\r\n                + '    \"sequence\": [\\n'\r\n                + '      {\"tatMin\":\"2*sec\",\"tat\":\"5*sec\",\"note\":\"updateB\",\"hold\":\"TBL_B\"}\\n'\r\n                + '    ]}}\\n'\r\n                + '],\\n'\r\n                + '\\n'\r\n                + '\"clients\" : [\\n' // ユーザ作成条件\r\n                + '  {\"num\":100,\"start\":\"16.0*h\", \"end\":\"17.0*h\", \"model\":\"ON-1\",  \"user\" :\"userU\", \"message\":\"select A update B,C\"},\\n'\r\n                + '  {\"num\": 20,\"start\":\"16.5*h\", \"end\":\"16.6*h\", \"model\":\"ON-1\",  \"user\" :\"userT\", \"message\":\"select A update B,C 【増】\"},\\n'\r\n                + '  {\"num\":100,\"start\":\"16.0*h\", \"end\":\"17.0*h\", \"model\":\"ON-2\",  \"user\" :\"userS\", \"message\":\"排他なし(WEBのみ)\"},\\n'\r\n                + '  {\"num\": 20,\"start\":\"16.0*h\", \"end\":\"17.0*h\", \"model\":\"BATCH-1\",\"user\":\"userB\", \"message\":\"バッチ処理 update B＊＊＊＊＊\"}\\n'\r\n                + ']\\n'\r\n                + '}\\n';\r\n        } else if (n === 1) {\r\n            // test用\r\n            jsonText =  '{\\n'\r\n                + '\"//\" : \"log（任意、デフォルト3）:詳細ログ出力指定(0:なし, 1:エラー時のみ, 2:+ETAT, 3:+push/pop, 4:+HOLD/FREE)\",\\n'\r\n                + '\"//\" : \"start/end:シミュレーション開始時刻/終了時刻\",\\n'\r\n                + '\"log\" : 1,\\n'\r\n                + '\"start\" : \"1970/01/02 00:00:00.000\",\\n'\r\n                + '\"end\"   : \"30.0*sec\",\\n'\r\n                + '\\n'\r\n                + '\"//\" : \"resources:sequenceのhold/freeで指定するリソース名の定義\",\\n'\r\n                + '\"//\" : \"type:リソース名、thread:最大同時hold数、timeout：holdタイムアウト時間\",\\n'\r\n                + '\"//\" : \"　　　　　　　　　　　q:最大hold待ち数、qWait:最大hold待ち時間\",\\n'\r\n                + '\"resources\" : [\\n'\r\n                + '  {\"type\" :\"DB\",  \"thread\":2,  \"timeout\": \"5*sec\", \"q\":1,  \"qWait\":\"2*sec\"}\\n'\r\n                + '],\\n'\r\n                + '\\n'\r\n                + '\"//\" : \"models:clientsで指定するモデル名(model)の定義、以下modelsで指定できる項目\",\\n'\r\n                + '\"//\" : \"baseModel:複数リソースのsequenceをまとめて宣言できる、sequenceに展開した後処理される、任意指定\",\\n'\r\n                + '\"//\" : \"sequence:指定された順にリソースを取得する、配列内に複数指定可、sequenceも複数指定可\",\\n'\r\n                + '\"//\" : \"hold：リソース名、holds(baseModelのみ指定可）：リソース一覧、各々にtat/tatMinが適用される\",\\n'\r\n                + '\"//\" : \"tat/tatMin：リソースの取得に要する平均/最小時間、tatMinのデフォルトはtat\",\\n'\r\n                + '\"//\" : \"　　　　　　★注：tatはリソースの使用時間ではない、リソース使用時間を指定す場合はfreeで指定\",\\n'\r\n                + '\"//\" : \"数値はミリ秒単位、*ms,*sec,*min,*h,*day 指定可\",\\n'\r\n                + '\"//\" : \"times：繰返し回数\",\\n'\r\n                + '\"//\" : \"thinkTime/thinkTimeMin：繰返し時の間隔の平均/最小時間、thinkTimeMinのデフォルトはthinkTime\",\\n'\r\n                + '\"//\" : \"free：[リソース名の配列]、指定リソースを開放する、free指定の無いリソースはシーケンスの最後にfreeされる\",\\n'\r\n                + '\"models\" : [\\n' // 取引モデル一覧\r\n                + ' { \"TEST-AB\" : {\\n' // テスト取引\r\n                + '    \"baseModel\":  {\"holds\": [\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"2*ms\"},\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_A\", \"tatMin\":\"1*sec\", \"tat\":\"1*sec\"}],\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_B\", \"tatMin\":\"3*sec\", \"tat\":\"3*sec\"}],\\n'\r\n                + '    \"times\": 2, \"thinkTimeMin\":\"1*sec\", \"thinkTime\": \"1*sec\"}},\\n'\r\n                + ' { \"TEST-BA\" : {\\n' // テスト取引\r\n                + '    \"baseModel\":  {\"holds\": [\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"2*ms\"},\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_B\", \"tatMin\":\"1*sec\", \"tat\":\"1*sec\"}],\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_A\", \"tatMin\":\"3*sec\", \"tat\":\"3*sec\"}],\\n'\r\n                + '    \"times\": 2, \"thinkTimeMin\":\"1*sec\", \"thinkTime\": \"1*sec\"}}\\n'\r\n                + '    ],\\n'\r\n                + '\\n'\r\n                + '\"//\" : \"clients：仮想アプリケーションの起動クライアントの定義\",\\n'\r\n                + '\"//\" : \"num:作成クライアント数、start～endの間で、ランダム（指数分布）に指定回数起動する\",\\n'\r\n                + '\"//\" : \"start/end:仮想クライアント作成/終了時刻、先頭で宣言したstartからの相対時刻\",\\n'\r\n                + '\"//\" : \"model:modelsで宣言したモデル名\",\\n'\r\n                + '\"//\" : \"user:user+通番 のユーザ名で仮想クライアントが作成される\",\\n'\r\n                + '\"clients\" : [\\n' // ユーザ作成条件\r\n                + '  {\"num\": 1,\"start\":\"0*sec\", \"end\":\"0*sec\", \"model\":\"TEST-AB\",\"user\" :\"testAB1\"},\\n'\r\n                + '  {\"num\": 1,\"start\":\"1*sec\", \"end\":\"1*sec\", \"model\":\"TEST-AB\",\"user\" :\"testAB2\"},\\n'\r\n                + '  {\"num\": 1,\"start\":\"3*sec\", \"end\":\"3*sec\", \"model\":\"TEST-BA\",\"user\" :\"testBA3\"},\\n'\r\n                + '  {\"num\": 1,\"start\":\"4*sec\", \"end\":\"4*sec\", \"model\":\"TEST-BA\",\"user\" :\"testBA4\"}\\n'\r\n                + ' ]\\n'\r\n                + '}\\n';\r\n        }\r\n\r\n        return jsonText; \r\n    }\r\n\r\n    /* new */\r\n    return virtualSystemByJson;\r\n}());\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = HJN;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__ = __webpack_require__(3);\n\r\n\r\n// import {Dygraph} from '../libs/dygraph.js';\r\n// import Dygraph from '../libs/extras/synchronizer.js';\r\n\r\n\r\n/* ******1*********2*********3*********4*********5*********6*********7****** */\r\n/* HJN クラス変数 */\r\n// HJN = {};\r\nfunction HJN(){};\r\nHJN.ver = \"v0.12.23\";\r\n/** @namespace */\r\n// HJN_util = {}; // utils登録変数\r\n/** @namespace */\r\nHJN.init = {}; // 初期登録処理関連\r\n\r\nHJN.chart = HJN.chartD = null;\r\nHJN.chartName = \"chart\";\r\n\r\nHJN.CONC = {\r\n    key : 'conc',\r\n    name : '多重度（詳細）',\r\n    label : 'conc:%N',\r\n    N : 0,\r\n    scale : 0,\r\n    color : 'rgba(  0,  0,127, 0.3)',\r\n    tpsN : 1\r\n}; // #7\r\nHJN.CTPS = {\r\n    key : 'cTps',\r\n    name : '多重度（区間最大）',\r\n    label : 'conc(max):%N',\r\n    N : 1,\r\n    scale : 0,\r\n    color : 'rgba(  0,  0,127, 0.1)',\r\n    detailN : 0\r\n};\r\nHJN.ETPS = {\r\n    key : 'eTps',\r\n    name : 'average tps / min (end) [line]', // #57\r\n    label : 'end:%Ntps',\r\n    N : 2,\r\n    scale : 0,\r\n    color : 'rgba(  0, 127, 127, 0.3)'\r\n};\r\nHJN.STAT = {\r\n    key : 'sTat',\r\n    name : 'response by start time [Y2軸:plot]',\r\n    label : 'start:%Nms',\r\n    N : 3,\r\n    scale : 1,\r\n    color : 'rgba(127, 127, 0, 0.3)'\r\n};\r\nHJN.ETAT = {\r\n    key : 'eTat',\r\n    name : 'response by end time   [Y2軸:plot]',\r\n    label : 'end:%Nms',\r\n    N : 4,\r\n    scale : 1,\r\n    color : 'rgba(127,  0,  0, 0.3)'\r\n};\r\nHJN.EMPS = {\r\n    key : 'eMps',\r\n    name : 'max response / min (end) [Y2軸:line]', // #57\r\n    label : 'max:%Nms',\r\n    N : 5,\r\n    scale : 1,\r\n    color : 'rgba(127,   0,  64, 0.3)'\r\n};\r\nHJN.EAPS = {\r\n    key : 'eAps',\r\n    name : 'average response / min (end) [Y2軸:line]', // #57\r\n    label : 'ave:%Nms',\r\n    N : 6,\r\n    scale : 1,\r\n    color : 'rgba(127,   0,  64, 0.1)'\r\n};\r\n// グラフ定数\r\nHJN.seriesConfig = [ HJN.CONC, HJN.CTPS, HJN.ETPS, HJN.STAT, HJN.ETAT,\r\n        HJN.EMPS, HJN.EAPS ];\r\n\r\nHJN.detailDateTime = new Date(); // 下段表示時刻\r\nHJN.detailRangePlus = 1.0; // 下段表示範囲（＋秒）\r\nHJN.detailRangeMinus = 1.0; // 下段表示範囲（－秒）\r\n\r\nHJN.files = [];\r\nHJN.filesArrayBuffer = [];\r\n\r\nHJN.timer = {};\r\n\r\n/**\r\n * seriesSet: dygraph用時系列データ配列\r\n * \r\n * @typedef {array.<CONC, CTPS, ETPS, STAT, ETAT, EMPS, EAPS>} seriesSet\r\n */\r\n/**\r\n * CONC:多重度の時系列データ<br>\r\n * [{x:変化時刻(ms) ,y:多重度数 }]\r\n * \r\n * @typedef {array.<xMs, yInt>} CONC\r\n */\r\n/**\r\n * CTPS: 秒間最大多重度の時系列データ<br>\r\n * [{x:秒毎時刻(ms), y:秒内最大多重度数 }]\r\n * \r\n * @typedef {array.<xMs, index>} CTPS\r\n */\r\n/**\r\n * ETPS: 秒間終了件数の時系列データ<br>\r\n * [{x:秒毎時刻(ms), y:秒内終了件数 }]\r\n * \r\n * @typedef {array.<xMs, yInt>} ETPS\r\n */\r\n/**\r\n * STAT: 開始時刻のTAT（応答時間）時系列データ<br>\r\n * [{x:開始時刻(ms) ,y:レスポンス(sec), eTatIdx: eTatの配列位置 }]\r\n * \r\n * @typedef {array.<xMs, ySec, index>} STAT\r\n */\r\n/**\r\n * ETAT: 終了時刻のTAT（応答時間）時系列データ<br>\r\n * [{x:変化時刻(ms) ,y:レスポンス(sec), fileIdx:ファイル配列位置, pos:レコード位置, len:レコード長, sTatIdx:\r\n * sTatの配列位置 }]\r\n * \r\n * @typedef {array.<xMs, ySec, index, index, number, index>} ETAT\r\n */\r\n/**\r\n * EMPS: 秒間最大TAT（応答時間）時系列データ（終了時刻ベース）<br>\r\n * [{x:秒毎時刻(ms), y:秒内最大レスポンス(sec) }]\r\n * \r\n * @typedef {array.<xMs, ySec>} EMPS\r\n */\r\n/**\r\n * EAPS: 秒間平均TAT（応答時間）時系列データ（終了時刻ベース）<br>\r\n * [{x:秒毎時刻(ms), y:秒内平均レスポンス(sec) }]\r\n * \r\n * @typedef {array.<xMs, ySec>} EAPS\r\n */\r\n/**\r\n * xMs: x軸に用いる時刻(ms)\r\n * \r\n * @typedef {number} xMs\r\n */\r\n/**\r\n * ySec: y軸に用いる秒単位の時間（応答時間など）\r\n * \r\n * @typedef {number} ySec\r\n */\r\n/**\r\n * yInt: y軸に用いる整数（個数など）\r\n * \r\n * @typedef {number} yInt\r\n */\r\n/**\r\n * index: 配列の位置（インデックス）に用いる整数\r\n * \r\n * @typedef {number} index\r\n */\r\n\r\n/**\r\n * インスタンス内の定数を設定する。併せて性能対策として頻繁に使うDOM要素を取り込む\r\n * \r\n * @namespace\r\n * @class\r\n * @classdesc TAT(Turnaround time)ログ分析用グラフ\r\n * @param {string}\r\n *            chartIdName グラフを作成するHTML要素のID\r\n * @param {string}\r\n *            [globalName=\"HJN.chartD\"] グラフのID\r\n * @param {Object}\r\n *            [config] グラフの設定\r\n * @example HJN.chart = new HJN(chartName, \"HJN.chart\"); HJN.chart.init();\r\n *          HJN.chartD = new HJN(chartName + \"Detail\", \"HJN.chartD\");\r\n *          HJN.chartD.init();\r\n */\r\nHJN.Graph = function (chartIdName, globalName, config) {\r\n    \"use strict\";\r\n    /* メンバ変数 */\r\n    this.seriesSet = [];\r\n    this.chartIdName = chartIdName; // arg0 \"chart\",\"chartD\"\r\n    this.globalName = globalName || \"HJN.chartD\"; // arg1\r\n    if (!config) { // arg2\r\n        var isMain = (globalName === \"HJN.chart\") ? true : false;\r\n        config = {\r\n            SERIESES: [ \r\n                { n: HJN.CONC.N, process: !isMain, visiblity: !isMain, renderer: 'area' },\r\n                { n: HJN.CTPS.N, process: true,    visiblity: true,    renderer: isMain ? 'scatterplot' : 'bar' },\r\n                { n: HJN.ETPS.N, process: true,    visiblity: isMain,  renderer: 'line' },\r\n                { n: HJN.STAT.N, process: !isMain, visiblity: !isMain, renderer: 'scatterplot' },\r\n                { n: HJN.ETAT.N, process: !isMain, visiblity: !isMain, renderer: 'scatterplot' },\r\n                { n: HJN.EMPS.N, process: true,    visiblity: true,    renderer: 'line' }, \r\n                { n: HJN.EAPS.N, process: true,    visiblity: isMain,  renderer: 'line' } ],\r\n            height : 0.40,\r\n            isVisiblity : true\r\n        };\r\n    }\r\n\r\n    // FileReaderを設定する\r\n    this.fileReader = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"f\" /* FileReader */](); // #24\r\n\r\n    // グラフ定義領域の宣言\r\n    this.windowId = document.getElementById(\"hjn_chart\");\r\n    this.menuId = document.getElementById(\"hjnBoxBuger\");\r\n    this.menuPlaceOnId = document.getElementById(\"hjnBoxPlaceOn\");\r\n    this.chartId = document.getElementById(this.chartIdName);\r\n    this.dyData = [];\r\n    this.dySeries = {};\r\n\r\n    this.scale = [ null, null ];\r\n    this.graph = null;\r\n    this.cycle = 1000 * 60; // ミリ秒 #57\r\n    this.cTpsUnit = HJN.Graph.prototype.UNIT_CTPS[0];\r\n\r\n    this.cash = null; // キャッシュオブジェクト\r\n\r\n    // グラフの設定(処理対象データの設定のみ this.SERIESES[] に取り込む）\r\n    this.SERIESES = [];\r\n    this.labels = [ 'Date' ];\r\n    for (var i = 0, j = 0; i < config.SERIESES.length; i++) {\r\n        if (config.SERIESES[i].process === true) {\r\n            this.SERIESES[j] = {\r\n                key : '',\r\n                name : '',\r\n                visiblity : false,\r\n                renderer : '',\r\n                order : 0,\r\n                scale : 0,\r\n                color : ''\r\n            };\r\n            // 定数(HJN.seriesConfig)指定項目を設定する\r\n            for ( var attr in HJN.seriesConfig[i]) {\r\n                this.SERIESES[j][attr] = HJN.seriesConfig[i][attr];\r\n            }\r\n            // 引数(config)指定項目を設定する\r\n            this.SERIESES[j].visiblity = config.SERIESES[i].visiblity;\r\n            this.SERIESES[j].renderer = config.SERIESES[i].renderer;\r\n\r\n            var renderer = config.SERIESES[i].renderer;\r\n            if (renderer === 'scatterplot') {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 0.0,\r\n                    drawPoints : true\r\n                };\r\n            } else if (renderer === 'line') {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 2.0,\r\n                    connectSeparatedPoints : true,\r\n                    stepPlot : true\r\n                };\r\n            } else if (renderer === 'area') {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 0.0,\r\n                    stepPlot : true,\r\n                    fillGraph : true\r\n                };\r\n            } else { // if (renderer === 'bar' ) {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 0.0,\r\n                    connectSeparatedPoints : true,\r\n                    stepPlot : true,\r\n                    fillGraph : true\r\n                };\r\n            }\r\n            this.dySeries[this.SERIESES[j].key].color = this.SERIESES[j].color;\r\n\r\n            if (this.SERIESES[j].scale === 1) {\r\n                this.dySeries[this.SERIESES[j].key].axis = 'y2';\r\n            }\r\n\r\n            this.labels.push(this.SERIESES[j].key);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    this.height = config.height;\r\n    this.isVisiblity = config.isVisiblity;\r\n};\r\n\r\n/**\r\n * クラス定数\r\n */\r\nHJN.Graph.prototype = {\r\n    UNIT_RANGE: [ // #48\r\n        { label: \"sec\",    val: \"1000\" },\r\n        { label: \"10sec\",  val: \"10000\", selected: \"selected\" },\r\n        { label: \"min\",    val: \"60000\" },\r\n        { label: \"10min\",  val: \"600000\" }, \r\n        { label: \"hour\",   val: \"3600000\" },\r\n        { label: \"6hours\", val: \"21600000\" },\r\n        { label: \"day\",    val: \"86400000\" }, \r\n        { label: \"year\",   val: \"31536000000\" } ],\r\n    UNIT_CTPS: [\r\n        { label: \"/sec\",   unit: 1000 },\r\n        { label: \"/min\",   unit: 60000 },\r\n        { label: \"/hour\",  unit: 3600000 },\r\n        { label: \"/day\",   unit: 86400000 } ]\r\n};\r\n\r\n/**\r\n * クラスメソッド：menuのFilterのｘｙ幅指定エリアにグラフのｘｙ幅を設定する<br>\r\n * dygraphのdrawCallbackに設定する関数<br>\r\n * menuのRadio(F_SYNC)選択時に呼び出す関数（このためにクラスメソッド）\r\n */\r\nHJN.Graph.DrawCallback = function (g, is_initial) { // #50 #51\r\n    // 初期表示時は、メニューを設定しない\r\n    if (is_initial)\r\n        return;\r\n    // Filterメニューで指定されている F_SYNC の状態を取得する\r\n    var syncMode = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"b\" /* Config */](\"Filter\").getValueByKey(\"F_SYNC\"); // #59\r\n    // \"F_SYNC_UPPER\"かつ上段グラフ もしくは、\"F_SYNC_DETAIL\"かつ下段グラフのとき処理する\r\n    if ((syncMode === \"F_SYNC_UPPER\" && g.HJN === HJN.chart)\r\n            || (syncMode === \"F_SYNC_DETAIL\" && g.HJN === HJN.chartD)) {\r\n        // ｘ軸の幅をFilterメニューフェールドに反映する\r\n        setText(\"Filter.F_TIME_FROM\", __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](g.xAxisRange()[0],\r\n                \"yyyy/MM/dd hh:mm:ss.ppp\", true));\r\n        setText(\"Filter.F_TIME_TO\", __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](g.xAxisRange()[1],\r\n                \"yyyy/MM/dd hh:mm:ss.ppp\", true));\r\n        // ｙ軸(右)の幅をFilterメニューフェールドに反映する\r\n        setText(\"Filter.F_TAT_FROM\", +(g.yAxisRange(1)[0].toPrecision(4)));\r\n        setText(\"Filter.F_TAT_TO\", +(g.yAxisRange(1)[1].toPrecision(4)));\r\n    }\r\n\r\n    function setText(id, val) {\r\n        document.getElementById(id).value = val;\r\n        document.getElementById(id).onchange();\r\n    }\r\n};\r\n\r\n/**\r\n * グラフを初期化する\r\n */\r\nHJN.Graph.prototype.init = function () {\r\n    \"use strict\";\r\n    // メニューを作成する\r\n    this.addMenu();\r\n    // 凡例を作成する\r\n    if (this.isVisiblity)\r\n        addLegend(this);\r\n    // 既にグラフがあるときは削除する\r\n    if (this.graph) {\r\n        this.graph.HJN = null; // （注：循環参照対策\r\n        this.graph.destroy();\r\n    }\r\n    // ウィンドウ枠に合わせて描画領域をリサイズするイベントを登録し、リサイズする\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n    // tablet回転時も、リサイズする #22\r\n    window.addEventListener(\"orientationchange\", this.resize.bind(this));\r\n    var resizes = document.getElementsByClassName(\"hjnResize\");\r\n    for (var i = 0; i < resizes.length; i++) {\r\n        resizes[i].addEventListener(\"change\", this.resize.bind(this)); // メニュ－の開閉\r\n        // #31\r\n    }\r\n\r\n    // legendを追加する（内部関数）\r\n    function addLegend(that) { // arg0 : this\r\n        var chartIdName = that.chartIdName;\r\n        var serieses = that.SERIESES;\r\n        var divLegend = document.getElementById(chartIdName + \"_legend\");\r\n        var formName = chartIdName + \"_LegendForm\";\r\n        var htmlText = '<form name=\"' + formName + '\">';\r\n        for (var i = 0; i < serieses.length; i++) {\r\n            var ckBox = serieses[i].visiblity ? 'checked=\"checked\"' : '';\r\n            htmlText += '<label class=\"legend\" style=\"background:'\r\n                    + serieses[i].color + ';\">' + '<input type=\"checkbox\" '\r\n                    + 'name=\"' + serieses[i].key + '\"' + 'onclick=\"'\r\n                    + that.globalName + '.onClickSetVisibility(' + i + ');\" '\r\n                    + ckBox + '>' + serieses[i].name + '</label><BR>';\r\n        }\r\n        htmlText += '</form>';\r\n        divLegend.innerHTML = htmlText;\r\n    }\r\n};\r\n\r\n/**\r\n * legendの表示指定をグラフに反映する(onclick呼出用）\r\n * \r\n * @param {index}\r\n *            i seriesSet配列の設定変更するグラフのインデックス\r\n */\r\nHJN.Graph.prototype.onClickSetVisibility = function (i) { //\r\n    \"use strict\";\r\n    var formName = this.chartIdName + \"_LegendForm\";\r\n    var ck = document[formName].elements[i].checked;\r\n    this.graph.setVisibility(i, ck);\r\n};\r\n\r\n/**\r\n * ウィンドウ枠に合わせて描画領域をリサイズする（dygraphは幅は自動、高さは指定）\r\n */\r\nHJN.Graph.prototype.resize = function () {\r\n    \"use strict\";\r\n    // 幅（メニューの状態に合わせて計算） #31\r\n    var dWidth = 0;\r\n    if (this.menuId.checked && !this.menuPlaceOnId.checked) {\r\n        dWidth = this.menuId.parentNode.clientWidth;\r\n    }\r\n    var width = window.innerWidth - dWidth;\r\n    this.windowId.style.width = width + \"px\";\r\n    // 高さ（ウィンドウサイズの比率(this.height)をかけて算出）\r\n    var height = Math.floor(window.innerHeight * this.height);\r\n    this.chartId.style.height = height + \"px\";\r\n\r\n    if (this.graph)\r\n        this.graph.resize(width, height);\r\n    return height;\r\n};\r\n\r\n/**\r\n * seriesSetを取り込む\r\n * \r\n * @param {seriesSet}\r\n *            seriesSet dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.setSeriesSet = function (seriesSet) { // #30\r\n    \"use strict\";\r\n    this.seriesSet = seriesSet;\r\n    HJN.seriesConfig.forEach(function (e) {\r\n        this[e.key] = seriesSet[e.N];\r\n    }, this);\r\n};\r\n\r\n/**\r\n * 終了時刻のTAT時系列データ(eTat)から、描画用時系列データ配列を作成する\r\n * \r\n * @param {ETAT}\r\n *            eTat [[終了時刻(ms), 処理時間(sec), （任意）ログレコード等], ...]\r\n * @return {seriesSet} dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.createSeries = function (eTat) {\r\n    \"use strict\";\r\n    // 時系列データを初期化する\r\n    var conc = [], cTps = [], eTps = [], sTat = [], eMps = [], eAps = [];\r\n\r\n    // 集計対象データがないとき\r\n    if (eTat.length === 0)\r\n        return [ conc, cTps, eTps, sTat, eTat, eMps, eAps ];\r\n\r\n    /** eTatをソートする * */\r\n    // 開始時刻でソートする #35\r\n    eTat.sort(function (a, b) {\r\n        return a.x - b.x;\r\n    });\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[1:eTat sorten ] \" + eTat.length + \" plots\",\r\n            \"calc\");\r\n\r\n    /** eTps(時間あたり処理件数),eMps,eAps(時間あたり最大/平均応答時間)時系列データを作成する * */\r\n    var dFrom = Math.floor(eTat[0].x / this.cycle) * this.cycle,\r\n        dTo = dFrom + this.cycle,\r\n        num = 0, // #39\r\n        maxTat = 0.0, // #19\r\n        aveTmp = 0.0;\r\n    eTat.forEach(function (e) {\r\n        if (e.x < dTo) {\r\n            num += 1;\r\n            if (maxTat < e.y)\r\n                maxTat = e.y; // #19\r\n            aveTmp += e.y;\r\n        } else {\r\n            eTps.push({\r\n                x : dFrom,\r\n                y : num * 1000 / this.cycle // #57\r\n            });\r\n            eMps.push({\r\n                x : dFrom,\r\n                y : maxTat\r\n            }); // #19\r\n            eAps.push({\r\n                x : dFrom,\r\n                y : aveTmp / num\r\n            });\r\n            dFrom = Math.floor(e.x / this.cycle) * this.cycle;\r\n            dTo = dFrom + this.cycle;\r\n            num = 1;\r\n            maxTat = e.y; // #19 #39\r\n            aveTmp = e.y; // #39\r\n        }\r\n    }, this);\r\n\r\n    eTps.push({\r\n        x : dFrom,\r\n        y : num * 1000 / this.cycle // #57\r\n    });\r\n    eTps.push({ // #57\r\n        x : dFrom + this.cycle,\r\n        y : num * 1000 / this.cycle\r\n    });\r\n\r\n    eMps.push({ // #19\r\n        x : dFrom,\r\n        y : maxTat\r\n    });\r\n    eMps.push({ // #57\r\n        x : dFrom + this.cycle,\r\n        y : maxTat\r\n    });\r\n\r\n    eAps.push({\r\n        x : dFrom,\r\n        y : aveTmp / num\r\n    });\r\n    eAps.push({ // #57\r\n        x : dFrom + this.cycle,\r\n        y : aveTmp / num\r\n    });\r\n\r\n    \r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[3:eTps,eMps,eAps created] \" + eTps.length\r\n            + \" plots\", \"calc\");\r\n\r\n    /** sTat（開始時間）時系列データを作成する,同時に入力eTatを補正する * */\r\n    // eTatからsTatを登録する\r\n    eTat.forEach(function (e, i) {\r\n        // 処理時間=0 のとき、1マイクロ秒とみなす(有効桁0.2マイクロ秒に切上される）\r\n        if (e.y === 0) {\r\n            e.y = 0.001;\r\n            e.x += e.y;\r\n        } // ミリ秒\r\n        // sTatにeTatデータを登録する\r\n        sTat.push({\r\n            x : e.x - e.y,\r\n            y : e.y,\r\n            eTatIdx : i\r\n        });\r\n    });\r\n    // 開始時刻でソートする\r\n    sTat.sort(function (a, b) {\r\n        return a.x - b.x;\r\n    });\r\n    // eTatにsTatの位置を設定する\r\n    sTat.forEach(function (s, i) {\r\n        eTat[s.eTatIdx].sTatIdx = i;\r\n    });\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[2:sTat created] \" + sTat.length + \" plots\",\r\n            \"calc\");\r\n\r\n    /** CONC(多重度)時系列データを作成する * */\r\n    var concTmp = [];\r\n    // eTatから、多重度が変化した時刻の一覧を作成する\r\n    eTat.map(function (e, i) {\r\n        // 開始時刻にカウントアップ情報を追加する\r\n        concTmp.push({\r\n            x : e.x - e.y,\r\n            y : 1\r\n        });\r\n        // 終了時刻をカウントダウン情報を追加する\r\n        concTmp.push({\r\n            x : e.x,\r\n            y : -1\r\n        });\r\n    });\r\n    // concを変化した時刻（開始or終了）でソートする\r\n    concTmp.sort(function (a, b) {\r\n        return a.x - b.x;\r\n    });\r\n    // concに同時取引数を設定する\r\n    var concNum = 0;\r\n    concTmp.forEach(function (c, i, a) {\r\n        // 重複削除用フラグを立てる #23\r\n        if (i > 0 && c.x === a[i - 1].x) {\r\n            a[i - 1].del = true;\r\n        }\r\n        // 同時取引数を集計する(前提：c.y に、開始なら1、終了なら(-1)が設定されている)\r\n        concNum += c.y;\r\n        c.y = concNum;\r\n    });\r\n    // concの同じ時刻の点を削除する #23\r\n    conc = concTmp.filter(function (c) {\r\n        return !c.del;\r\n    });\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[4:conc created] \" + conc.length + \" plots\",\r\n            \"calc\");\r\n\r\n    /** cTPS秒間同時処理件数（concurrent transactions/sec）時系列データを作成する #18 * */\r\n    var XSec = floorTime(conc[0].x, this.cycle), // ミリ秒\r\n    YMax = conc[0].y, YNext = conc[0].y;\r\n    // concの先頭と末尾の時刻(x)の差よりPlot数を求め、Plot数が規定数(8000個)を超えたら、桁上げする #38\r\n    var cTpsMaxPlots = 8000, // 桁上げするPlot数\r\n    cTpsUnits = HJN.Graph.prototype.UNIT_CTPS, // #48\r\n    concTerm = conc[conc.length - 1].x - conc[0].x, // ミリ秒\r\n    cTpsIdx = 0;\r\n    while (cTpsIdx < cTpsUnits.length\r\n            && concTerm / cTpsUnits[cTpsIdx].unit > cTpsMaxPlots) {\r\n        cTpsIdx++;\r\n    }\r\n    cTpsIdx = (cTpsUnits.length > cTpsIdx) ? cTpsIdx : cTpsUnits.length - 1;\r\n    this.cTpsUnit = cTpsUnits[cTpsIdx];\r\n    // メニューのViewのcTPSのラベルに単位を追加する\r\n    var pos = (this === HJN.chart) ? 0 : 1;\r\n    document.getElementsByName(\"cTps\")[pos].parentNode.lastChild.data = HJN.CTPS.name\r\n            + this.cTpsUnit.label;\r\n\r\n    // 規定時間単位の最大同時処理数cTPSを作成する\r\n    conc.forEach(function (c) {\r\n        if (floorTime(c.x, this.cTpsUnit.unit) === XSec) { // c.xは ミリ秒\r\n            YMax = Math.max(YMax, c.y);\r\n        } else {\r\n            cTps.push({\r\n                x : XSec,\r\n                y : Math.max(YMax, YNext)\r\n            });\r\n            for (var t = XSec + this.cTpsUnit.unit; t < floorTime(c.x,\r\n                    this.cTpsUnit.unit); t += this.cTpsUnit.unit) { // c.xはミリ秒\r\n                cTps.push({\r\n                    x : t,\r\n                    y : YNext\r\n                });\r\n                if (YNext === 0)\r\n                    break;\r\n            }\r\n            XSec = floorTime(c.x, this.cTpsUnit.unit);\r\n            YMax = Math.max(YNext, c.y);\r\n        }\r\n        YNext = c.y;\r\n    }, this);\r\n    cTps.push({\r\n        x : XSec,\r\n        y : YMax\r\n    });\r\n    cTps.push({\r\n        x : XSec + this.cTpsUnit.unit,\r\n        y : YNext\r\n    });\r\n\r\n    // HJN_util.Logger.ShowLogText(\"[5-1:cTps created] \" + cTps.length + \"\r\n    // plots\",\"calc\");\r\n\r\n    // cTpsのxからindexを引くMapを作成する #18\r\n    eTat.tatMap = new __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"h\" /* MappedETat */](eTat);\r\n    eTat.cash = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"a\" /* Cash */]();\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[5:cTps created] \" + cTps.length + \" plots(\"\r\n            + +Math.floor(concTerm / 1000) + \"sec\" + cTpsUnits[cTpsIdx].label\r\n            + \")\", \"calc\");\r\n\r\n    // 集計結果をHJN.Graphに設定する 注）this.SERIESESと同じ順番にすること\r\n    var seriesSet = [ conc, cTps, eTps, sTat, eTat, eMps, eAps ];\r\n    this.setSeriesSet(seriesSet);\r\n    return seriesSet;\r\n\r\n    // 時刻を指定ミリ秒間隔で切り捨てる（内部関数）\r\n    function floorTime(t, cycle) {\r\n        return Math.floor(Math.floor(t / cycle) * cycle);\r\n    }\r\n};\r\n\r\n/**\r\n * データを変更し描画する\r\n * \r\n * @param {seriesSet}\r\n *            seriesSet dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.update = function (seriesSet, n) {\r\n    \"use strict\";\r\n    // 指定データがあるとき取り込む\r\n    if (seriesSet)\r\n        this.setSeriesSet(seriesSet);\r\n    // dygraph用表示データを作成する\r\n    var xy = [], // グラフデータ({x:,y:}ペアの配列）の一覧（グラフ１本が配列要素）\r\n    idx = [], // グラフデータの処理中配列位置を保有する配列\r\n    x = [], // グラフデータの処理中配列のｘ(時刻)の値を保有する配列\r\n    row = [], // dygraph１レコードワーク配列：（[x,y0,y1...]の配列）の一レコード分を保持する配列\r\n    minX = 0, i = 0; // グラフ番号用ワーク\r\n    // xy[] に処理対象seriesを指定する\r\n    for (i = 0; i < this.SERIESES.length; i++) {\r\n        xy[i] = this.seriesSet[this.SERIESES[i].N];\r\n        idx[i] = 0;\r\n    }\r\n    // dygraph表示時間帯を設定する（上段グラフは全期間が処理対象）\r\n    var xRangeMin = Number.MIN_VALUE,\r\n        xRangeMax = Number.MAX_VALUE,\r\n        xRangeUnit = HJN.detailRangeUnit; // #61\r\n    if (HJN.chartD === this) { // 詳細（下段グラフ）のとき画面で指定された期間を設定する // ミリ秒\r\n        if ((n === HJN.ETPS.N || n === HJN.EMPS.N || n === HJN.EAPS.N)  // #57\r\n                && xRangeUnit < HJN.chartD.cycle){ // #61\r\n            var dt = Math.floor(+HJN.detailDateTime / HJN.chartD.cycle) * HJN.chartD.cycle;\r\n            xRangeMin = dt - HJN.detailRangeMinus * HJN.detailRangeUnit;\r\n            xRangeMax = dt + HJN.detailRangePlus * HJN.detailRangeUnit;\r\n        } else { // undefined, HJN.CTPS.N, HJN.CONC.N, HJN.STAT.N, HJN.ETAT.N\r\n            var dt = Math.floor(+HJN.detailDateTime / xRangeUnit) * xRangeUnit; // #61\r\n            xRangeMin = dt - HJN.detailRangeMinus * HJN.detailRangeUnit; // #48\r\n            xRangeMax = dt + HJN.detailRangePlus * HJN.detailRangeUnit; // #48\r\n        }\r\n    }\r\n\r\n    // dygraph用arrayを空にする\r\n    this.dyData = [];\r\n\r\n    // 指定範囲の先頭が秒単位の端数のとき、dygraph用arrayに、先頭ワークデータを登録する #3\r\n    var xVal = Math.floor(xRangeMin / 1000) * 1000;\r\n    if (Number.MIN_VALUE < xRangeMin && xRangeMin !== xVal) { // 範囲指定（＝下段）\r\n        var firstRow = [ xRangeMin ]; // 先頭はx（時刻）\r\n        xy.forEach(function (xyData, i) {\r\n            // 秒間最大値系のyは最大値or０を、他はnullを設定する\r\n            var yVal = null;\r\n            if (this.SERIESES[i].key === HJN.CTPS.key) {\r\n                // 始端時刻を含む秒の値（最大値）を、始端時刻にセットする\r\n                var j = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"k\" /* binarySearch */](xVal, xyData, function (e) {\r\n                    return e.x;\r\n                });\r\n                yVal = (0 <= j) ? xyData[j].y : 0;\r\n            }\r\n            firstRow.push(yVal);\r\n        }, this);\r\n        this.dyData.push(firstRow);\r\n    }\r\n\r\n    // dygraph用arrayに表示データを登録する\r\n    while (xy.some(function (e, i) {\r\n        return (idx[i] < e.length);\r\n    })) {\r\n        // dygraph１レコードワーク配列 を空にする\r\n        row = [];\r\n        // dygraph１レコードワーク配列 の先頭に、次に追加するｘ（時刻＝各ｘｙ処理位置が持つｘの最小値）を設定する\r\n        xy.forEach(function (e, i) {\r\n            x[i] = (idx[i] < e.length) ? e[idx[i]].x : Number.MAX_VALUE;\r\n        });\r\n        minX = x[0]; // minX = Math.min.apply(null, x);\r\n        for (i = 1; i < x.length; i++) {\r\n            if (x[i] < minX)\r\n                minX = x[i];\r\n        }\r\n        row.push(minX); // ミリ秒\r\n        // dygraph１レコードワーク配列 の２番目以降に、各ｘｙのｘを設定する\r\n        xy.forEach(function (e, i) {\r\n            if (e.length <= idx[i]) {\r\n                row.push(null); // 末尾を過ぎたｘｙのyはnull\r\n            } else if (e[idx[i]].x === minX) {\r\n                // ｘｙのｘ(e[idx[i]].x)が、出力するｘ(minX)と同じとき、ｙを設定し、ｘｙの処理位置(idx[i])を次に進める\r\n                row.push(e[idx[i]].y);\r\n                idx[i]++;\r\n            } else {\r\n                row.push(null); // xと ｘｙのｘが異なる場合 null\r\n            }\r\n        });\r\n        // dygraph用arrayに、編集したdygraph１レコードワーク配列 を登録する\r\n        if (xRangeMin <= minX && minX <= xRangeMax) {\r\n            this.dyData.push(row);\r\n        }\r\n    }\r\n    // 指定範囲の先頭が秒単位の端数のとき、dygraph用arrayに、末尾ワークデータを登録する #3\r\n    if (xRangeMax < Number.MAX_VALUE && // 範囲指定（＝下段）\r\n    xRangeMax !== Math.floor(xRangeMax / 1000) * 1000) {\r\n        var lastRow = [ xRangeMax ]; // 先頭はx（時刻）\r\n        xy.forEach(function (e, i) { // 秒間最大値系のyは始端：最大値、終端：０を、他はnullを設定\r\n            lastRow.push((this.SERIESES[i].key === HJN.CTPS.key) ? 0 : null);\r\n        }, this);\r\n        this.dyData.push(lastRow);\r\n    }\r\n\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[7:dygraph data created] \"\r\n            + this.dyData.length + \" rows\", \"calc\");\r\n\r\n    // グラフの設定\r\n    var visibility = [];\r\n    if (this.isVisiblity) {\r\n        // visiblity指定できるとき画面の表示指定を取り込む\r\n        var inputs = document[this.chartIdName + \"_LegendForm\"];\r\n        for (i = 0; i < this.SERIESES.length; i++) {\r\n            visibility.push(inputs[this.SERIESES[i].key].checked);\r\n        }\r\n    } else {\r\n        // visiblity指定できないとき、デフォルト設定を取り込む\r\n        for (i = 0; i < this.SERIESES.length; i++) {\r\n            visibility.push(this.SERIESES[i].visiblity);\r\n        }\r\n    }\r\n\r\n    // グラフの作成\r\n    if (this.graph) {\r\n        // 既にグラフがあるときはデータのみ変更する（注：ここでdestroy()すると下段のpointClickCallback時にエラー）\r\n        this.graph.updateOptions( {\r\n            file : this.dyData\r\n        } );\r\n        this.graph.resetZoom(); // #51\r\n    } else {\r\n        // グラフが無いときは新規作成する\r\n        this.graph = new Dygraph(this.chartId, this.dyData, {\r\n            height : this.resize(),\r\n            labels : this.labels,\r\n            title : this === HJN.chart ? '' : '', // タイトル\r\n            titleHeight : 10, // タイトルの高さ＆フォントサイズ（デフォルト18px)\r\n            legend : 'always', // 'follow', //\r\n            showLabelsOnHighlight : false, // 効果不明\r\n            // labelsDiv : document.getElementById(HJN.chartName + 'Labels'), //\r\n            // ラベル表示先の変更\r\n            labelsSeparateLines : false,\r\n            // legendFormatter: this.legendFormatter, // コメントアウトでlegendが非表示\r\n            axes : {  // 軸の設定\r\n                x : { // X軸の設定\r\n                    axisLabelFormatter : xAxisLabelFormatter, // ラベル表示文字列編集関数\r\n                    axisLabelWidth : 100        // X軸ラベルの表示幅（幅が不足すると文字が切れる）\r\n                },\r\n                y : { // Y2（左）軸の設定\r\n                    independentTicks : true,    // 目盛合わせ（falseはY2軸に合わせる）\r\n                    axisLabelWidth : 40,        // ラベル表示幅\r\n                    // axisLineColor : 'rgb(0,0,0)',// 軸の色\r\n                    // axisLabelFontSize : 14, // ラベルのフォントサイズ(デフォルト:14)\r\n                    logscale : false            // 対数軸\r\n                },\r\n                y2 : { // Y2（右）軸の設定\r\n                    axisLabelFormatter : yAxisLabelFormatter, // ラベル表示文字列編集関数\r\n                    independentTicks : true,    // 目盛合わせ（falseはY1軸に合わせる）\r\n                    axisLabelWidth : 65,        // ラベル表示幅\r\n                    drawGrid : true,            // 横罫線\r\n                    gridLinePattern : [ 1, 2 ], // 罫線形状（破線）\r\n                    logscale : false            // 対数軸\r\n                }\r\n            },\r\n            includeZero : true,\r\n            // axisLabelFontSize: 10,\r\n            axisLineColor : 'rgba(0, 0, 0, 0.2)',\r\n            gridLineColor : 'rgba(0, 0, 0, 0.2)',\r\n            strokeWidth : 2,\r\n            pointSize : 3,\r\n            ylabel: 'Number of transactions',\r\n            y2label : 'Sec', // this === HJN.chart ? '' : 'Sec',\r\n            // rollPeriod: 7,\r\n            // errorBars: true,\r\n            // showRangeSelector: true\r\n            // drawPointCallback: drawPointCallback,\r\n            drawHighlightPointCallback : drawHighlightPointCallback,\r\n            highlightCircleSize : 3,\r\n            highlightCallback : highlightCallback,\r\n            pointClickCallback : pointClickCallback,\r\n            annotationClickHandler : annotationClickHandler,\r\n            annotationDblClickHandler : annotationDblClickHandler,\r\n            // clickCallback: clickCallback,\r\n            drawCallback : HJN.Graph.DrawCallback, // #50 #51\r\n            highlightSeriesOpts : {\r\n            // strokeWidth: 3,\r\n            // strokeBorderWidth: 1,\r\n            // highlightCircleSize: 5\r\n            },\r\n            series : this.dySeries,\r\n            labelsKMB : true,\r\n            visibility : visibility,\r\n            interactionModel: { // #22\r\n                mousedown: Dygraph.defaultInteractionModel.mousedown,\r\n                willDestroyContextMyself: true,\r\n                // touchstart: function(){}, 空functionと未登録は同じ効果\r\n                // touchmove: function(){},\r\n                // touchend: function(){},\r\n                dblclick: Dygraph.defaultInteractionModel.dblclick\r\n            },\r\n            animatedZooms : true, // ズームするときのアニメーション有無（デフォルト:false）\r\n            connectSeparatedPoints : true\r\n        });\r\n        // dygraphイベント処理でHJJを取れるように（注：循環参照）\r\n        this.graph.HJN = this;\r\n        // スマフォ対応 #22\r\n        __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"j\" /* TouchPanel */].DispatchEventTouchToMouse(this.graph.canvas_);\r\n        __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"j\" /* TouchPanel */].DispatchEventTouchToMouse(this.graph.canvas_ctx_.canvas);\r\n    }\r\n    // zoom reset ボタン追加 #22\r\n    this.addIcon_ZoomReset();\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[8:dygraph showen] \", \"calc\");\r\n\r\n    // 初期表示の不活性グラフの設定\r\n    function xAxisLabelFormatter(d, gran, opts) {\r\n        // return Dygraph.dateAxisLabelFormatter(new Date(d), gran, opts); #63\r\n        var isTop = (this.xAxisRange()[0] === d);\r\n        var format = \"\";\r\n        var diffTime = this.xAxisRange()[1] - this.xAxisRange()[0];\r\n        if (diffTime < 60000) { \r\n            format = isTop ? \"hh:mm:ss.ppp\" : \"ss.ppp\";\r\n        } else if (diffTime < 86400000) { // 1日未満\r\n            format = \"hh:mm:ss\";\r\n        } else if (diffTime < 31536000000) { // 365日未満\r\n            format = isTop ? \"yyyy/MM/dd\": \"MM/dd hh\";\r\n        } else { // 365日以上\r\n            format = \"yyyy/MM/dd\";\r\n        }\r\n        return __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](d,format,true);\r\n    }\r\n    function yAxisLabelFormatter(d, gran, opts) { // #63\r\n        var range = this.yAxisRanges()[1];\r\n        var format = \"\";\r\n        var diff = range[1] - range[0];\r\n        if (diff < 300000) { // 300秒未満\r\n            return \"\" + d / 1000;\r\n        } else if (diff < 86400000) { // 1日未満\r\n            return __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](d, \"hh:mm:ss\", true);\r\n        } else if (diff < 172800000) { // 2日未満\r\n            var hours = Math.ceil(d / 3600000) + \":\";\r\n            return hours + __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](d, \"mm:ss\", true);\r\n        } else { // 2日以上\r\n            var days = Math.ceil(d / 86400000) + \" days+\";\r\n            var time = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](d, \" hh:mm:ss\", false);\r\n            return (d < 172800000) ? time : days; // 2日未満？\r\n        }\r\n    }\r\n\r\n    // 再描画する\r\n    this.showBalloon();\r\n    __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowLogText(\"[9:balloon showen] \", \"calc\");\r\n\r\n    // updateメソッド内部関数宣言\r\n    // 点がハイライトになったときの描画処理（内部関数宣言） g:{dygraph} HJN.chartD.graph\r\n    function drawHighlightPointCallback(g, name, ctx, cx, cy, color, r, idx) {\r\n        // file dropのとき、新グラフデータに更新後に、旧グラフのidx値が引き渡されたとき 処理しない #12\r\n        if (!g.rawData_ || g.rawData_.length - 1 < idx)\r\n            return;\r\n        var x = g.rawData_[idx][HJN.CONC.N]; // 選択されている点(時刻)のCONCのxの値（無いときundefined)\r\n        var eTat = HJN.chart.eTat;\r\n        var sTat = HJN.chart.sTat;\r\n        var n = 0;\r\n\r\n        // ETAT,STATのときlogレコードを表示する #28\r\n        if ((name === HJN.STAT.key || name === HJN.ETAT.key)\r\n                && typeof x != 'undefined') { // #41\r\n            // eTatの配列位置をを求める\r\n            if (name === HJN.ETAT.key) {\r\n                // ETATのとき、終了時刻(x)からeTatの配列位置(n)を検索する\r\n                n = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"k\" /* binarySearch */](x, eTat, \r\n                                    function (e) { return e.x; });\r\n            } else {\r\n                // STATのとき、開始時刻(x)からsTatの配列位置(sTatN)を検索し、sTatからeTatの配列位置を取得する\r\n                var sTatN = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"k\" /* binarySearch */](x, sTat, \r\n                                    function (e) { return e.x; });\r\n                n = sTat[sTatN].eTatIdx;\r\n            }\r\n            // ログデータを表示し、線を引く\r\n            if (0 <= n) {\r\n                var e = eTat[n];\r\n                // ログデータを表示する\r\n                document.getElementById(\"lineViewer\").innerHTML =\r\n                            this.HJN.fileReader.getRecordAsText(e); // #62\r\n                // 線を引く #30\r\n                drawTatLine(ctx, e.x, e.y, 2, color);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n\r\n        // CONCのとき同時処理の線を引く\r\n        if (name === HJN.CONC.key && typeof eTat.tatMap != 'undefined') { // #17\r\n            // #41\r\n            // 指定時刻に動いているeTatの一覧(trans)を取得する\r\n            var trans = eTat.tatMap.search(x, x, 1000); // #18\r\n            // 以前に選択した線を消す\r\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n            // 同時処理の線を引く\r\n            if (0 <= i && 0 < trans.length) {\r\n                // TRANS分の線を引く\r\n                trans.forEach(function (e) {\r\n                    drawTatLine(ctx, e.x, e.y, 1, HJN.CONC.color);\r\n                });\r\n            }\r\n            ctx.stroke();\r\n        }\r\n\r\n        // 選択点の点と数値を表示する\r\n        var val = \"\";\r\n        var time = \"\";\r\n        if (0 <= idx) {\r\n            time = g.rawData_[idx][0]; // #60\r\n            val = name ? g.rawData_[idx][g.setIndexByName_[name]] : \"\";\r\n            // valが時間のとき、 時間表記に文字列編集する\r\n            if (name === HJN.STAT.key || name === HJN.ETAT.key \r\n                    || name === HJN.EMPS.key || name === HJN.EAPS.key) {\r\n                val = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](val);\r\n            }\r\n        }\r\n        drawPoint(ctx, cx, cy, r, color, val, time);\r\n        // 縦線を引く\r\n        drawLine(ctx, [ {\r\n            x : cx,\r\n            y : 0\r\n        }, {\r\n            x : cx,\r\n            y : ctx.canvas.height\r\n        } ], 1, \"rgba(127,127,127,0.5)\", [ 1, 2 ]);\r\n\r\n        // drawHighlightPointCallback 内部関数宣言\r\n        // TAT線を表示する（内部関数）\r\n        function drawTatLine(ctx, x, y, heigth, color) {\r\n            // isXend指定の始点(false)／終点（true)に合わせて、線の座標を求める\r\n            var tXs = g.toDomXCoord(x - y), // ミリ秒\r\n            tXe = g.toDomXCoord(x), // ミリ秒\r\n            tY = g.toDomYCoord(y, 1); // 第二軸:1\r\n            drawLine(ctx, [ {\r\n                x : tXs,\r\n                y : tY\r\n            }, {\r\n                x : tXe,\r\n                y : tY\r\n            } ], heigth, color);\r\n            drawPoint(ctx, tXs, tY, r, HJN.STAT.color);\r\n            drawPoint(ctx, tXe, tY, r, HJN.ETAT.color);\r\n        }\r\n\r\n        // 線を表示する（内部関数）\r\n        function drawLine(ctx, plots, r, color, lineDashSegments) {\r\n            ctx.beginPath();\r\n            ctx.lineWidth = r;\r\n            ctx.lineCap = \"round\";\r\n            ctx.strokeStyle = color;\r\n            if (lineDashSegments)\r\n                ctx.setLineDash(lineDashSegments); // lineDashは[num]\r\n            ctx.moveTo(plots[0].x, plots[0].y);\r\n            plots.forEach(function (p) {\r\n                ctx.lineTo(p.x, p.y);\r\n            });\r\n            ctx.stroke();\r\n        }\r\n\r\n        // 点を表示する（内部関数）\r\n        function drawPoint(ctx, cx, cy, r, color, val, time) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = color;\r\n            ctx.fillStyle = color;\r\n            ctx.arc(cx, cy, r, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            var text = \"\";\r\n            if (val || time) {\r\n                if (typeof(val) === \"number\") {\r\n                    text += Math.round(val * 10) / 10;\r\n                } else if (typeof(val) === \"string\") { // #60\r\n                    text += val;\r\n                }\r\n                if (val && time) text += \" \";\r\n                if (time) text += \"[\" + __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](time, \"hh:mm:ss.ppp\", true) + \"]\"; // #60\r\n                ctx.beginPath();\r\n                ctx.fillStyle = color.replace(/\\,[\\s\\.0-9]*\\)/,\",1)\"); // #60\r\n                ctx.textAlign = \"left\"; // \"rigth\" \"center\" #60\r\n                ctx.fillText(text, cx, cy - 12);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 点がハイライトになったときの処理（内部関数宣言）\r\n    function highlightCallback(e, x, pts, row, seriesName) {\r\n        // マウスクリック用に座標をHJN.hoverXYに退避する\r\n        HJN.hoverXY = {\r\n            x : x,\r\n            pts : pts,\r\n            row : row,\r\n            seriesName : seriesName\r\n        };\r\n    }\r\n\r\n    // 点をクリックしたときの処理(内部関数宣言）\r\n    function pointClickCallback(event, p) {\r\n        if (!p.annotation)\r\n            HJN.Plot.PointClickCallback(p);\r\n    }\r\n\r\n    // アノテーション（グラフ中の吹出し）をクリックしたときの処理(内部関数宣言）\r\n    function annotationClickHandler() { // annotation, p, dygraph, event\r\n        HJN.Plot.PointClickCallback(arguments[1]);\r\n    }\r\n\r\n    // アノテーション（グラフ中の吹出し）をダブルクリックしたときの処理(内部関数宣言）\r\n    function annotationDblClickHandler() { // annotation, p, dygraph, event\r\n        // 指定ポイントを削除する\r\n        HJN.Plot.PointDblClickCallback(arguments[1]);\r\n    }\r\n\r\n    // グラフをクリックしたときの処理(内部関数宣言）\r\n    // function clickCallback(e, x, pts) {}\r\n};\r\n\r\n/**\r\n * dygraphのBalloonを再描画する\r\n */\r\nHJN.Graph.prototype.showBalloon = function () {\r\n    \"use strict\";\r\n    if (this.cTps.length === 0)\r\n        return; // ctpsが空の時何もしない\r\n\r\n    var ann = {\r\n        series : \"\",\r\n        xval : 0,\r\n        shortText : \"\",\r\n        text : \"\"\r\n    }, anns = [];\r\n    // 表示時間帯を求める\r\n    var ctps = this.cTps, minX = ctps[0].x, maxX = ctps[ctps.length - 1].x;\r\n    // アノテーションをdygparhに追加する\r\n    HJN.Plot.List.forEach(function (e) {\r\n        if (minX <= e.x && e.x <= maxX) {\r\n            ann = {\r\n                series : HJN.seriesConfig[e.n].key,\r\n                xval : e.x, // ミリ秒\r\n                shortText : e.y,\r\n                text : e.label\r\n            };\r\n            anns.push(ann);\r\n            // 詳細Plot＆詳細グラフデータが無いとき、詳細Plot内のTPS Plotを追加する #7\r\n            if (\"tpsPlot\" in e) { // 詳細plotのとき\r\n                if (this.SERIESES.findIndex(function (s) {\r\n                    return s.N === e.n;\r\n                }) < 0) { // 詳細グラフデータが無いとき\r\n                    ann = {\r\n                        series : HJN.seriesConfig[e.tpsPlot.n].key,\r\n                        xval : e.tpsPlot.x, // ミリ秒\r\n                        shortText : e.tpsPlot.y,\r\n                        text : e.tpsPlot.label\r\n                    };\r\n                    anns.push(ann);\r\n                }\r\n            }\r\n        }\r\n    }, this);\r\n    // dygraphの残描画処理が完了してからアノテーションをセットする\r\n    this.graph.ready(function () {\r\n        this.setAnnotations(anns);\r\n    });\r\n};\r\n\r\n/**\r\n * dygraphのlegendを編集する(dygraph オプション登録用関数）\r\n * {@link http://dygraphs.com/options.html#legendFormatter}\r\n * \r\n * @param {ETAT}\r\n *            data [[終了時刻(ms), 処理時間(sec), （任意）ログレコード等], ...]\r\n * @return {string} dygraphのlegendに表示する文字（HTML)\r\n */\r\nHJN.Graph.prototype.legendFormatter = function (data) {\r\n    \"use strict\";\r\n    // legend: 'always'指定のとき、マウスがグラフ外にあると dataに値が設定されていなことを考慮\r\n    var html = (typeof data.x === \"undefined\") ? '' : __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"e\" /* DateToString */](\r\n            new Date(data.xHTML), \"yyyy/MM/dd hh:mm:ss.ppp\");\r\n    html = '<label class=\"datetime\">' + html + '</label>';\r\n    data.series\r\n            .forEach(function (series) {\r\n                if (!series.isVisible)\r\n                    return;\r\n                var val = (typeof series.yHTML === \"undefined\") ? \"\"\r\n                        : series.yHTML, text = '<label '\r\n                        + getStyle(series.label)\r\n                        + '\">'\r\n                        + \"&nbsp;\"\r\n                        + series.labelHTML\r\n                        + ':'\r\n                        + ('####' + val.replace(/\\.[0-9]*/, \"\")).slice(-4)\r\n                                .replace(/#/g, \"&nbsp;\") + '</label>';\r\n                html += series.isHighlighted ? '<b>' + text + '</b>' : text;\r\n                html += '&nbsp;';\r\n            });\r\n    return html;\r\n    // keyに設定された色指定するstyle文字列を取得する（legendFormatter内部関数宣言）\r\n    function getStyle(key) {\r\n        var i = HJN.seriesConfig.findIndex(function (e) {\r\n            return (e.key === key);\r\n        });\r\n        return 'style=\"background:' + HJN.seriesConfig[i].color + ';';\r\n    }\r\n};\r\n\r\n/*\r\n * メニュー関連機能 ************************************\r\n */\r\n/**\r\n * メニューを追加する\r\n * \r\n * @param {ETAT}\r\n *            eTat [[終了時刻(ms), 処理時間(sec), （任意）ログレコード等], ...]\r\n * @return {seriesSet} dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.addMenu = function () {\r\n    \"use strict\";\r\n    // メニュー用のエレメントを取得する\r\n    var divMenuId = this.chartIdName + \"_menu\";\r\n    var divMenu = document.getElementById(divMenuId);\r\n    // menu用divがないとき、chartの直前に追加する #13\r\n    if (!divMenu) {\r\n        var div = document.createElement('div');\r\n        div.id = divMenuId;\r\n        div.className = \"menuBar\";\r\n        divMenu = this.chartId.parentNode.insertBefore(div, this.chartId);\r\n    }\r\n    // メニューボタン定義を登録する\r\n    var g = this.globalName;\r\n    // 上下段共通ボタンの定義(Download Menu)\r\n    var menuDownloadImg = { // getATag\r\n        menuLabel : \"graph image(.png)\",\r\n        funcName : g + \".menuDownloadImg\",\r\n        menuId : divMenuId + \"_DownloadImg\",\r\n        fileName : \"graph.png\"\r\n    };\r\n    var menuDownloadCsv = { // getATag\r\n        menuLabel : \"graph data(.csv)\",\r\n        funcName : g + \".menuDownloadCsv\",\r\n        menuId : divMenuId + \"_DownloadCsv\",\r\n        fileName : \"graph.csv\"\r\n    };\r\n    var menuDownloadLog = { // getATag\r\n        menuLabel : \"graph log records(.csv)\",\r\n        funcName : g + \".menuDownloadLog\",\r\n        menuId : divMenuId + \"_DownloadLog\",\r\n        fileName : \"tatlog.csv\"\r\n    };\r\n    var menuDownloadConc = { // getATag\r\n        menuLabel : \"conc log records(.csv)\",\r\n        funcName : g + \".menuDownloadConc\",\r\n        menuId : divMenuId + \"_DownloadConc\",\r\n        fileName : \"conclog.csv\"\r\n    };\r\n\r\n    // メニューを追加する\r\n    var accordion = document.createElement('div'); // 要素の作成\r\n    var _id = 0;\r\n    if (HJN.chart.chartId === this.chartId) { // 上段グラフ用機能のメニュー追加\r\n        // File Menu\r\n        var menuOpenCsv = { // getInputTag\r\n            menuLabel : \"Open csv data file\",\r\n            funcName : g + \".menuOpenCsv\",\r\n            menuId : divMenuId + \"_OpenCsv \"\r\n        };\r\n        var menuSaveConfig = { // getATag\r\n            menuLabel : \"save format (.json)\",\r\n            funcName : g + \".menuSaveConfig\",\r\n            menuId : divMenuId + \"_SaveCongig\",\r\n            fileName : \"hjnconfig.json\"\r\n        };\r\n        var menuLoadConfig = { // getInputTag #10\r\n            menuLabel : \"load format (.json)\",\r\n            funcName : g + \".menuLoadConfig\",\r\n            menuId : divMenuId + \"_LoadCongig\"\r\n        };\r\n        accordion.innerHTML = '<li class=\"hjnMenuLv1\">'\r\n                + getAccordionTag(this, ++_id, \"File\") + '<ul class=\"hjnMenuLv2\">'\r\n                + getInputTag(menuOpenCsv)\r\n                + this.fileReader.getConfigHtml(\"File\") // #24\r\n                + getATag(menuSaveConfig) + getInputTag(menuLoadConfig) // #10\r\n                + '</ul>' + '</li>';\r\n\r\n        // Filter Menu #34\r\n        var menuFilterApply = { // getFuncTag #34\r\n            menuLabel : \"Apply filter & reload\",\r\n            funcName : g + \".menuFilterApply\",\r\n            menuId : divMenuId + \"_FilterApply\"\r\n        };\r\n        var menuFilterClear = { // getFuncTag #34\r\n            menuLabel : \"Clear filter condition\",\r\n            funcName : g + \".menuFilterClear\",\r\n            menuId : divMenuId + \"_FilterClear\"\r\n        };\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_Filter\">'\r\n                + getAccordionTag(this, ++_id, \"Filter\")\r\n                + '<ul class=\"hjnMenuLv2\">'\r\n                + this.fileReader.getConfigHtml(\"Filter\") // #24\r\n                + getFuncTag(menuFilterApply)\r\n                + getFuncTag(menuFilterClear)\r\n                + '</ul>' + '</li>';\r\n\r\n        // Simulator Menu #53\r\n        var menuSimulatorSimulate = {\r\n            menuLabel : \"Simulate\",\r\n            funcName : g + \".menuSimulatorSimulate\",\r\n            menuId : divMenuId + \"_SimulatorSimulate\"\r\n        };\r\n        var menuSimulatorEditor = {\r\n                menuLabel : \"JSON Editor(Open/Close)\",\r\n                funcName : g + \".menuSimulatorEditor\",\r\n                menuId : divMenuId + \"_SimulatorEditor\"\r\n            };\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_Simulator\">'\r\n                + getAccordionTag(this, ++_id, \"Simulator\")\r\n                + '<ul class=\"hjnMenuLv2\">'\r\n                + getFuncTag(menuSimulatorSimulate)\r\n                + getFuncTag(menuSimulatorEditor)\r\n                + this.fileReader.getConfigHtml(\"Simulator\") // #53\r\n                + '</ul>' + '</li>';\r\n        // シミュレーション条件JSON Editエリアを設定する\r\n        var divSimulator = document.getElementById(\"Simulator\");\r\n        var jsonEditor = document.createElement('div'); // 要素の作成\r\n        jsonEditor.innerHTML = '<textarea id=\"SimulatorEditor\" '\r\n            + 'style=\"width:99%;border:none;resize:none;background:rgba(255,255,255,0.5);height:500px;\">'\r\n        divSimulator.appendChild(jsonEditor);\r\n        var divSimulatorEditor = document.getElementById(\"SimulatorEditor\");\r\n        divSimulatorEditor.readOnly = true; // #22\r\n        divSimulatorEditor.value = __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"m\" /* virtualSystemByJson */].GetJsonConfig(); // デフォルトJSON\r\n        \r\n        // View Menu\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_View\">'\r\n                + getAccordionTag(this, ++_id, \"View\", true)\r\n                + '<ul class=\"hjnMenuLv2\">' // \r\n                + '<li><div id=\"' + this.chartIdName + '_legend\"></div></li>'\r\n                + '</ul>' + '</li>';\r\n\r\n        // Download Menu\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_Download\">'\r\n                + getAccordionTag(this, ++_id, \"Download\")\r\n                + '<ul class=\"hjnMenuLv2\">' //\r\n                + getATag(menuDownloadImg, \"Upper \")\r\n                + getATag(menuDownloadCsv, \"Upper \")\r\n                + getATag(menuDownloadLog, \"Upper \")\r\n                + getATag(menuDownloadConc, \"Upper \") + '</ul>' + '</li>';\r\n\r\n        // メニュー登録\r\n        divMenu.appendChild(accordion);\r\n        // イベントリスナー登録\r\n        document.getElementById(menuOpenCsv.menuId).addEventListener('change',\r\n                this.menuOpenCsv.bind(this), false); // File Open用\r\n        document.getElementById(menuLoadConfig.menuId).addEventListener(\r\n                'change', this.menuLoadConfig.bind(this), false); // LoadConfig用\r\n\r\n    } else { // 下段用グラフ機能のメニュー追加\r\n        _id += 100;\r\n        // Download Menu\r\n        var chartDownloadUl = document.createElement('ul');\r\n        chartDownloadUl.className = \"hjnMenuLv2\";\r\n        chartDownloadUl.innerHTML = '' //\r\n                + getATag(menuDownloadImg, \"Detail \")\r\n                + getATag(menuDownloadCsv, \"Detail \")\r\n                + getATag(menuDownloadLog, \"Detail \")\r\n                + getATag(menuDownloadConc, \"Detail \");\r\n        var chartDownload = document.getElementById(\"menu_Download\");\r\n        chartDownload.appendChild(chartDownloadUl);\r\n\r\n        // View Menu\r\n        var chartViewUl = document.createElement('ul');\r\n        chartViewUl.className = \"hjnMenuLv2\";\r\n        chartViewUl.innerHTML = '<li><div id=\"' + this.chartIdName\r\n                + '_legend\"></div></li>';\r\n        var chartView = document.getElementById(\"menu_View\");\r\n        chartView.appendChild(chartViewUl);\r\n\r\n        // \"Bottom detail graph\" Menu\r\n        accordion.innerHTML = '<li class=\"hjnMenuLv1\">'\r\n                + getAccordionTag(this, ++_id, \"Bottom detail graph\", true)\r\n                + '<ul class=\"hjnMenuLv2\">' //\r\n                + '<ol><div id=\"detailTimeRange\">' + getDetailTimeRangeTag()\r\n                + '</div></ol>' // #51\r\n                + '<li><div id=\"chartPlots\"></div></li>' //\r\n                + '</ul>' + '</li>';\r\n\r\n        // Help Menu\r\n        var menuHelpAbout = { // getAlertTag\r\n            menuLabel : \"about TAT log diver\",\r\n            menuId : divMenuId + \"_HelpAbout\",\r\n            strFuncName : \"HJN.init.Copyright()\"\r\n        };\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\">'\r\n                + getAccordionTag(this, ++_id, \"Help\")\r\n                + '<ul class=\"hjnMenuLv2\" style=\"width: 100%;\">' //\r\n                + getAlertTag(menuHelpAbout)\r\n                + '</ul>' + '</li>';\r\n\r\n        // メニュー登録\r\n        divMenu.appendChild(accordion);\r\n    }\r\n\r\n    // アコーディオンラベル用<input><label>タグ編集（内部関数宣言） #31\r\n    // idは、ユニークな英数字なら何でもよい（ラベル押下時のアコーディオン開閉ラジオボタン連動用の接尾語）\r\n    function getAccordionTag(that, id, labelText, isChecked) {\r\n        var isAccordion = true, // true:アコーディオン型 false:折りたたみ型 #21\r\n        typeStr = isAccordion ? ' type=\"checkbox\" name=\"accordion\" '\r\n                : ' type=\"radio\" name=\"accordion\" ', //\r\n        checkedStr = ' checked=\"checked\" ';\r\n        return '' + '<input id=\"ac-' + that.chartIdName + id + '\"' + typeStr\r\n                + (isChecked ? checkedStr : '') + '\">' + '<label for=\"ac-'\r\n                + that.chartIdName + id + '\">' + labelText + '</label>';\r\n    }\r\n\r\n    // File Open用<input>タグ編集（内部関数宣言）\r\n    // '<ol><a><label>Child Menu<input type=\"file\" id=\"xxx\"\r\n    // multiple/></label></a></ol>\r\n    function getInputTag(arg) {\r\n        return '' + '<ol><a><label class=\"hjnButton4Input\">' + arg.menuLabel // #51\r\n                + '<input type=\"file\" id=\"' + arg.menuId + '\"  multiple />'\r\n                + '</label></a></ol>';\r\n    }\r\n\r\n    // ダウンロード用<A>タグ編集（内部関数宣言）\r\n    // '<li><a id=\"xxx\" href=\"#\">Child Menu</a><li/>'\r\n    function getATag(arg, preLabel) {\r\n        preLabel = preLabel || \"\";\r\n        return '' + '<li><a id=\"' + arg.menuId + '\" '\r\n                + 'class=\"hjnButton4Input\" href=\"#\" ' // #51\r\n                + 'download=\"' + arg.fileName + '\" ' //\r\n                + 'onclick=\"' + arg.funcName + '(' + \"'\" + arg.menuId + \"', '\"\r\n                + arg.fileName + \"'\" + ')\" ' + '>' + preLabel + arg.menuLabel\r\n                + '</a></li>';\r\n    }\r\n\r\n    // グローバルメソッド呼出用<A>タグ編集（内部関数宣言） #34\r\n    // '<li><a id=\"xxx\" href=\"#\">Child Menu</a></li>'\r\n    function getFuncTag(arg, preLabel) {\r\n        preLabel = preLabel || \"\";\r\n        return '' + '<li><a id=\"' + arg.menuId + ' \"'\r\n                + 'class=\"hjnButton4Input\" href=\"#\" ' // #51\r\n                + 'onclick=\"' + arg.funcName + '()\">' //\r\n                + preLabel + arg.menuLabel + '</a></li>';\r\n    }\r\n\r\n    // Alert用<A>タグ編集（内部関数宣言）\r\n    // '<a id=\"xxx\" onclick=Alert(\"xxx\")>Child Menu</a>'\r\n    function getAlertTag(arg) {\r\n        return '' + '<ol><a id=\"' + arg.menuId + '\"'\r\n                + 'class=\"hjnButton4Input\" ' // #51\r\n                + ' onclick=\"alert(' + arg.strFuncName + \")\" + '\"' + '>' //\r\n                + '<label>' + arg.menuLabel + '</label></a></ol>';\r\n    }\r\n\r\n    // 下段表示幅指定用<div>タグ編集\r\n    function getDetailTimeRangeTag() {\r\n        var initPlus = 1, initMinus = 2; // #3\r\n        return 'Range: '\r\n                + '- <input type=\"number\" id=\"DetailRangeMinus\" min=\"0\" step=\"1\"'\r\n                + 'value=\"'\r\n                + initPlus\r\n                + '\" style=\"width:40px; \"  onchange=\"HJN.init.setDetailRange()\"> '\r\n                + '+ <input type=\"number\" id=\"DetailRangePlus\" min=\"0\" step=\"1\"'\r\n                + 'value=\"'\r\n                + initMinus\r\n                + '\" style=\"width:40px; \"  onchange=\"HJN.init.setDetailRange()\"> '\r\n                + '<select id=\"DetailRangeUnit\" class=\"hjnLabel4Input\" onchange=\"HJN.init.setDetailRange()\">' // #48\r\n                + HJN.Graph.prototype.UNIT_RANGE.reduce(\r\n                        function (prev, e, i, a) {\r\n                            return prev + '<option value=\"' + e.val + '\" '\r\n                                    + (e.selected || \"\") + '>' + e.label // #53\r\n                                    + '</option>';\r\n                        }, '') + '</select>';\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー機能：CSVデータファイルを開く\r\n * \r\n * @param {evt}\r\n *            evt ファイルオープンイペント\r\n */\r\nHJN.Graph.prototype.menuOpenCsv = function (evt) {\r\n    \"use strict\";\r\n    var file_list = evt.target.files;\r\n    // 指定されたファイルを処理する\r\n    HJN.init.FileReader(file_list);\r\n};\r\n\r\n/**\r\n * メニュー機能：画面設定をJSON形式のセーブファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuSaveConfig = function (menuId, fileName) {\r\n    \"use strict\";\r\n    // plotsをjsonに変換する\r\n    var save = {\r\n        \"HJN.Plot.List\" : HJN.Plot.List,\r\n        \"HJN.chart.fileReader\" : HJN.chart.fileReader._config_File.__config,\r\n        \"HJN.chartD.fileReader\" : HJN.chartD.fileReader._config_File.__config\r\n    };\r\n    var json = JSON.stringify(save, null, 4);\r\n    // ダウンロードする\r\n    this.menuDownloadBlob(this.menuBuffToBlob(json), menuId, fileName);\r\n};\r\n/**\r\n * メニュー機能：JSON形式の画面設定ファイルをロードし画面表示に反映する TODO\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ？\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名 ？\r\n */\r\nHJN.Graph.prototype.menuLoadConfig = function (evt) { // #10\r\n    \"use strict\";\r\n    // 指定されたファイルを開く\r\n    var files = evt.target.files;\r\n    for (var i = 0; i < files.length; i++) { // データを順番に取得する\r\n        try {\r\n            // ファイルを取得する\r\n            var file = files[i];\r\n            // ログ出力用にファイル名（サイズ）を編集する\r\n            if (10000 < file.size) {\r\n                var msg = \"Too large(>10KB) \" + file.name + \" [\" + file.size\r\n                        + \"byte]\";\r\n                __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowText([ \"<mark>\" + msg + \"</mark>\" ]);\r\n                return;\r\n            }\r\n            // ファイルの読み込みに成功したら、その内容をドロップエリアに追記して表示する\r\n            var reader = new FileReader();\r\n            reader.onloadend = funcOnloadend.bind(this, files[i], i);\r\n            // ファイルにArrayBufferで参照を取得する（onloadendイベントを起こす）\r\n            reader.readAsArrayBuffer(files[i]);\r\n        } catch (e) {\r\n            // 第一引数のテキストアレイの内容を#fileInfoのiframeに表示する\r\n            var msg = \"The \" + i + \"th dropped object is not a file\";\r\n            __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"g\" /* Logger */].ShowText([ \"<mark>\" + msg + \"</mark>\" ]);\r\n            console.error(\"[%o]%o\", msg, e);\r\n        }\r\n    }\r\n\r\n    // 内部関数：ファイルを読み込み後の処理（指定ファイルを読み込んだ後に呼び出される）\r\n    function funcOnloadend(file, i, evt) {\r\n        if (evt.target.readyState === FileReader.DONE) {\r\n            // ファイルからjsonを読み込む\r\n            var filesArrayBuffer = evt.target.result;\r\n            var buf = new Uint8Array(filesArrayBuffer);\r\n            var json = String.fromCharCode.apply(null, buf);\r\n            alert(json);\r\n            var jsonObj = JSON.parse(json);\r\n\r\n            // jsonからHJN.chartD.fileReaderに登録されているHJN_util.Config の定義を作成する\r\n            var conf = jsonObj[\"HJN.chart.fileReader\"];\r\n            HJN.chart.fileReader._config_File.__config = conf;\r\n            var confD = jsonObj[\"HJN.chartD.fileReader\"];\r\n            HJN.chartD.fileReader._config_File.__config = confD;\r\n\r\n            // jsonからHJN.Plot.Listを作成する\r\n            var tmpPlots = jsonObj[\"HJN.Plot.List\"];\r\n            var plots = [];\r\n            // フォーマットに合致する項目のみ抽出する\r\n            if (isSameType([], tmpPlots)) { // 最上位が配列\r\n                tmpPlots.forEach(function (e) { // 2層目がオブジェクト\r\n                    if (isSameType(0, e.x))\r\n                        plots.push(e);\r\n                });\r\n            }\r\n            if (0 < plots.length) {\r\n                HJN.Plot.List = plots;\r\n            }\r\n            HJN.Plot.Render();\r\n            // グラフ内の吹き出しを再表示する\r\n            HJN.Plot.ShowBalloon();\r\n\r\n            // 型判定\r\n            function isSameType(sample, obj) {\r\n                var clas0 = Object.prototype.toString.call(sample);\r\n                var clas1 = Object.prototype.toString.call(obj);\r\n                return clas0 === clas1;\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * メニュー機能：メニューで指定されたフィルタの条件で再描画する\r\n * \r\n */\r\nHJN.Graph.prototype.menuFilterApply = function () { // #34\r\n    \"use strict\";\r\n    if (HJN.files && HJN.files.length === 0) {\r\n        // 自動生成データのグラフを表示しているとき\r\n        HJN.init.ChartShow(HJN.chart.eTatOriginal)\r\n    } else {\r\n        // ファイル指定のグラフを表示しているとき\r\n        HJN.init.FileReader(HJN.files);\r\n    }\r\n};\r\n/**\r\n * メニュー機能：フィルタ条件を初期値にし、再描画する\r\n * \r\n */\r\nHJN.Graph.prototype.menuFilterClear = function () { // #34\r\n    \"use strict\";\r\n    // メニュー画面おフィルタ条件に、初期値を設定する\r\n    setText(\"Filter.F_TIME_FROM\", null);\r\n    setText(\"Filter.F_TIME_FROM\", null);\r\n    setText(\"Filter.F_TIME_TO\", null);\r\n    setText(\"Filter.F_TAT_FROM\", 0);\r\n    setText(\"Filter.F_TAT_TO\", null);\r\n    setSelector(\"Filter.F_TEXT_NON\");\r\n    setText(\"Filter.F_TEXT_LEN\", null);\r\n    setText(\"Filter.F_TEXT_POS\", 1);\r\n    setText(\"Filter.F_TEXT_COL\", 3);\r\n    setText(\"Filter.F_TEXT_REG\", null);\r\n\r\n    function setText(id, val) {\r\n        document.getElementById(id).value = val;\r\n        document.getElementById(id).onchange();\r\n    }\r\n    function setSelector(id) {\r\n        document.getElementById(id).checked = true;\r\n        document.getElementById(id).onchange();\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー機能：シミュレータ 指定JSONでシミュレートする\r\n * \r\n */\r\nHJN.Graph.prototype.menuSimulatorSimulate = function () { // #53\r\n    \"use strict\";\r\n    // グラフを再生成する\r\n    var json = document.getElementById(\"SimulatorEditor\").value;\r\n    HJN.files = []; // #61\r\n    HJN.Plot.List = [];\r\n    HJN.init.CreateSampleTatLogAndChartShow(json);\r\n\r\n};\r\n/**\r\n * メニュー機能：シミュレータ JSON入力エリアを広げる\r\n * \r\n */\r\nHJN.Graph.prototype.menuSimulatorEditor = function () { // #53\r\n    \"use strict\";\r\n    var divSimulator = document.getElementById(\"Simulator\");\r\n    var divSimulatorEditor = document.getElementById(\"SimulatorEditor\");\r\n    if (divSimulator.style.height === \"100%\") { // #60\r\n        // 開いているとき、textareaの親を閉じる\r\n        divSimulator.style.height = \"0\";\r\n        divSimulator.style.width = \"190px\";\r\n    } else{ // 閉じているとき\r\n        // textareaを一度閉じる（textareaが大きいとき親が大きくなりスクロールが出るため）\r\n        divSimulatorEditor.style.height = \"0\";\r\n        // textareaの親を開く\r\n        divSimulator.style.height = \"100%\";\r\n        divSimulator.style.width = \"70%\";\r\n        divSimulatorEditor.style.height = (divSimulator.scrollHeight - 10) + \"px\";\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * メニュー機能：canvas画像をファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadImg = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var type = 'image/png';\r\n    // canvas から DataURL で画像を出力\r\n    var canvas = this.chartId.getElementsByTagName('canvas')[0], dataurl = canvas\r\n            .toDataURL(type);\r\n    // DataURL のデータ部分を抜き出し、Base64からバイナリに変換\r\n    var bin = atob(dataurl.split(',')[1]);\r\n    // Uint8Array ビューに 1 バイトずつ値を埋める\r\n    var buffer = new Uint8Array(bin.length);\r\n    for (var i = 0; i < bin.length; i++) {\r\n        buffer[i] = bin.charCodeAt(i);\r\n    }\r\n    // Uint8Array ビューのバッファーを抜き出し、それを元に Blob を作る\r\n    var blob = new Blob([ buffer.buffer ], {\r\n        type : type\r\n    });\r\n    // var url = window.URL.createObjectURL(blob);\r\n\r\n    // ダウンロードする\r\n    this.menuDownloadBlob(blob, menuId, fileName);\r\n};\r\n\r\n/**\r\n * メニュー機能：グラフ全データをCSVファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadCsv = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var bom = new Uint8Array([ 0xEF, 0xBB, 0xBF ]), // Excel対応UTF8のBOMコード指定\r\n    csv = this.labels.join(','); // csvヘッダ行の作成\r\n    this.dyData.forEach(function (e) {\r\n        csv += \"\\r\\n\" + e.join(',');\r\n    }); // csvデータ展開\r\n    var blob = new Blob([ bom, csv ], {\r\n        \"type\" : \"text/csv\"\r\n    }); // blob変換\r\n    // ダウンロードする\r\n    this.menuDownloadBlob(blob, menuId, fileName);\r\n};\r\n\r\n/**\r\n * メニュー機能：グラフ全データの編集元に該当するTATログの該当行をCSVファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadLog = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var eTat = this.eTat;\r\n    if (0 < eTat.length) { // 出力対象データがあるとき\r\n        if (typeof eTat[0].pos === \"undefined\") { // 生成データのとき\r\n            // 生成データをCSVに編集する\r\n            var eTatCsv = \"\";\r\n            var delimiter = '\"';\r\n            var separator = delimiter + HJN.chart.fileReader.getValue(\"SEP\") + delimiter;\r\n            eTat.forEach(function (e) {\r\n                eTatCsv += delimiter + __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](e.x, 'yyyy/MM/dd hh:mm:ss.ppp') + separator\r\n                        + e.y + separator + e.message + delimiter + '\\r\\n'; // #61\r\n            });\r\n            // ダウンロードする\r\n            this.menuDownloadBlob(this.menuBuffToBlob(eTatCsv), menuId,\r\n                    fileName);\r\n        } else { // ファイル読込のとき\r\n            // 出力データを元ファイルのpos順にソートする（改行コードのないファイル末尾レコートがある場合も最後に来るように） #45\r\n            eTat.sort(function (a, b) {\r\n                return a.pos - b.pos;\r\n            });\r\n            // 最大作業領域として元ファイルサイズの合計分のメモリを確保する #23\r\n            var maxSize = HJN.filesArrayBuffer.reduce(function (p, c) {\r\n                return p + c.byteLength + 2;\r\n            }, 0);\r\n            var buff = new Uint8Array(maxSize), offset = 0;\r\n            // ファイルの該当行を Uint8Arrayに登録する\r\n            eTat.forEach(function (e) {\r\n                buff.set(new Uint8Array(HJN.filesArrayBuffer[e.fileIdx], e.pos,\r\n                        Math.min(e.len + 2,\r\n                                HJN.filesArrayBuffer[e.fileIdx].byteLength\r\n                                        - e.pos)), offset);\r\n                offset += (e.len + 2);\r\n            });\r\n            // 未使用作業領域を削除する\r\n            var buff2 = new Uint8Array(buff.slice(0, offset));\r\n            // ダウンロードする\r\n            this.menuDownloadBlob(this.menuBuffToBlob(buff2), menuId, fileName);\r\n        }\r\n    } else { // 出力対象データがないとき\r\n        var str = \"No log in the time.\";\r\n        // ダウンロードする\r\n        this.menuDownloadBlob(this.menuBuffToBlob(str), menuId, fileName);\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー機能：plotsでconcが選択されているとき、同時処理に該当するTATログの該当行をCSVファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadConc = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var plot = HJN.Plot.List.find(function (e) {\r\n        return e.radio;\r\n    });\r\n    if (plot.n === HJN.CONC.N || plot.n === HJN.STAT.N || plot.n === HJN.ETAT.N) {\r\n        // CONC|STAT|ETATが選択されているとき\r\n        var trans = this.eTat.tatMap.search(plot.x); // #18\r\n        if (0 < trans.length) { // 出力テキストを編集する\r\n            if (typeof trans[0].pos === \"undefined\") {\r\n                // 初期表示データのとき、CSVを編集する\r\n                // 生成データをCSVに編集する\r\n                var csv = \"\";\r\n                trans.forEach(function (e) {\r\n                    csv += __WEBPACK_IMPORTED_MODULE_0__HJN_utils_js__[\"d\" /* D2S */](e.x, \"yyyy/MM/dd hh:mm:ss.ppp\") + \",\"\r\n                            + e.y + \"\\r\\n\";\r\n                });\r\n                // ダウンロードする\r\n                this.menuDownloadBlob(this.menuBuffToBlob(csv), menuId,\r\n                        fileName);\r\n            } else {\r\n                // ファイル読み込みの時、対象レコードを表示する\r\n                // 出力データを元ファイルのpos順にソートする（改行コードのないファイル末尾レコートがある場合も最後に来るように） #45\r\n                trans.sort(function (a, b) {\r\n                    return a.pos - b.pos;\r\n                });\r\n                // 最大作業領域として元ファイルサイズの合計分のメモリを確保する #23\r\n                var maxSize = HJN.filesArrayBuffer.reduce(function (p, c) {\r\n                    return p + c.byteLength + 2;\r\n                }, 0);\r\n                var buff = new Uint8Array(maxSize), offset = 0;\r\n                // ファイルの該当行を Uint8Arrayに登録する\r\n                trans.forEach(function (e) {\r\n                    buff.set(new Uint8Array(HJN.filesArrayBuffer[e.fileIdx],\r\n                            e.pos, Math.min(e.len + 2,\r\n                                    HJN.filesArrayBuffer[e.fileIdx].byteLength\r\n                                            - e.pos)), offset);\r\n                    offset += (e.len + 2);\r\n                });\r\n                // 未使用作業領域を削除する\r\n                var buff2 = new Uint8Array(buff.slice(0, offset));\r\n                // ダウンロードする\r\n                this.menuDownloadBlob(this.menuBuffToBlob(buff2), menuId,\r\n                        fileName);\r\n            }\r\n        }\r\n\r\n    } else { // CONCが選択されていないとき\r\n        var msg = \"抽出対象データがありません。空データがダウンロードされます\\r\\n\"\r\n                + \"conc：多重度（詳細）の点を選択した状態で行ってください\";\r\n        alert(msg);\r\n        this.menuDownloadBlob(this.menuBuffToBlob(msg), menuId, fileName);\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー共通機能：BinaryString, UintXXArray, ArrayBuffer をBlobに変換する\r\n * \r\n * @param {Object}\r\n *            arrayBuffer 変換元\r\n * @param {Blob} -\r\n *            変換後\r\n */\r\nHJN.Graph.prototype.menuBuffToBlob = function (arrayBuffer) {\r\n    \"use strict\";\r\n    return new Blob([ arrayBuffer ], {\r\n        type : \"application/octet-stream\"\r\n    });\r\n};\r\n\r\n/**\r\n * メニュー共通機能：指定blobをファイルとしてダウンロードする\r\n * \r\n * @param {Objcet}\r\n *            blob ダウンロードさせるblogデータ\r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadBlob = function (blob, menuId, fileName) {\r\n    \"use strict\";\r\n    if (window.navigator.msSaveBlob) { // ie11以降のとき\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n        // msSaveOrOpenBlobの場合はファイルを保存せずに開ける\r\n        window.navigator.msSaveOrOpenBlob(blob, fileName);\r\n    } else { // Chrome, FireFoxのとき\r\n        document.getElementById(menuId).href = window.URL.createObjectURL(blob);\r\n    }\r\n};\r\n\r\nHJN.Graph.prototype.addIcon_ZoomReset = function () {\r\n    \"use strict\";\r\n    var divChart = this.chartId; // document.getElementById(\"Icons\");\r\n    var idName = this.chartIdName + \"Zoom\";\r\n    var input = document.getElementById(idName);\r\n    if (input !== null) { // 既にある場合削除する\r\n        var div = input.parentElement;\r\n        div.parentElement.removeChild(div);\r\n    }\r\n\r\n    if (divChart) {\r\n        var div = document.createElement('div');\r\n        var htmlText = '<input id=\"' + idName + '\" type=\"buttom\" class=\"hjnBoxSwitch hjnResize\" '\r\n                                + 'onClick=\"HJN.' + this.chartIdName + '.graph.resetZoom()\">'\r\n                     + '<label for=\"' + idName + '\" class=\"hjnCtrlBox\"><span></span></label>';\r\n        div.innerHTML = htmlText;\r\n        divChart.insertBefore(div, divChart.firstChild);\r\n    }\r\n    \r\n    // divIcons.appendChild(div);\r\n\r\n    // div.id = id;\r\n    // div.className = \"menuBar\";\r\n// div = element.parentElement;\r\n    /*\r\n     * var divIcons = document.getElementById(\"Icons\"); var idName =\r\n     * this.chartIdName + \"Zoom\"; if (divIcons) { var div =\r\n     * document.createElement('div'); var htmlText = '<input id=\"' + idName + '\"\r\n     * type=\"buttom\" class=\"hjnBoxSwitch hjnResize\" ' + 'onClick=\"HJN.' +\r\n     * this.chartIdName + '.graph.resetZoom()\">' + '<label for=\"' + idName + '\"\r\n     * class=\"hjnCtrlBox\"><span></span></label>'; div.innerHTML = htmlText;\r\n     * divIcons.appendChild(div); }\r\n     */\r\n\r\n};\r\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HJN_css__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__HJN_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__HJN_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__libs_dygraph_css__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__libs_dygraph_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__libs_dygraph_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__HJN_graph_init_js__ = __webpack_require__(2);\n\r\n\r\n   // JSの取込、JSのみネスト可\r\nwindow.addEventListener(\"DOMContentLoaded\",function(eve){\r\n    Object(__WEBPACK_IMPORTED_MODULE_2__HJN_graph_init_js__[\"b\" /* HJN_init_ChartRegist */])(\"chart\");      // チャートを作成する\r\n});\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(7);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(1)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js!./HJN.css\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js!./HJN.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(0)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"@CHARSET \\\"UTF-8\\\";\\r\\n/*   ****1**** ****2**** ****3**** ****4**** ****5**** ****6**** ****7***** */\\r\\n/* リセットCSS */\\r\\nhtml, body, h1, h2, h3, h4, ul, ol, dl, li, dt, dd, p, div, span, img, a, table, tr, th, td, selector{\\r\\nmargin: 0; padding: 0; border: 0; font-weight: normal; font-size: 100%; vertical-align:baseline;\\r\\n-webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }\\r\\narticle, header, footer, aside, figure, figcaption, nav, section { display:block; }\\r\\nbody { line-height: 1; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; }\\r\\nol, ul { list-style: none; list-style-type: none; }\\r\\n*:focus { outline: 0; }\\r\\n\\r\\n/* TAT log diver */\\r\\nbody\\t{ font-size: 12px; margin: 0;\\r\\n\\tfont-family:\\\"\\\\30E1\\\\30A4\\\\30EA\\\\30AA\\\",\\\"Meiriyo\\\",\\\"\\\\30D2\\\\30E9\\\\30AE\\\\30CE\\\\89D2\\\\30B4   ProN W3\\\",\\\"Hiragino Kaku Gothic ProN\\\",\\\"sans-serif\\\"; }\\r\\nnav \\t{ height: 36px }\\r\\ninput\\t{ border-width: 1px; font-size: 12px; }\\r\\nselect  { background: #eee;}\\r\\n#Simulator {overflow: auto; resize: both; position: absolute; z-index: 100;\\r\\n\\t\\t\\ttop: 0px; left: 0px; height: 0; width: 190px; background: rgba(255,255,255,0.5); }\\r\\n.statusbar\\t{ overflow: auto; resize: both; position: absolute; z-index: 99;\\r\\n\\t\\t\\ttop: 0px; left: 200px; height: 20px; width: 200px; background: #fff; }\\r\\n.statusbar > iframe { overflow: hidden; width: 95%; height: 100%; }\\r\\n.lineViewer { width: 100%; height: 42px; margin: 25px 0px; padding: 0px; border: 1px #cccccc dotted; }\\r\\nfooter { position: fixed; bottom: 0%; text-align: right; font-size: smaller; }\\r\\n\\r\\n/* ハンバーガーメニュー */\\r\\n.hjnBurgerTray { position :fixed; display: inline-block; visibility: hidden; z-index: 96;\\r\\n\\ttop :0; right :0; width :305px; height:100%; padding :0; background :#fff; }\\r\\n/* ハンバーガーボタン */\\r\\n.hjnCtrlBox { position: relative; float: right; cursor: pointer; z-index: 98;\\r\\n\\twidth: 40px; height: 40px; background-color: #fff; visibility: visible;\\r\\n\\tborder: 1px solid #ccc; box-shadow:\\t1px 1px 1px #ccc; border-radius: 4px;\\r\\n\\tline-height: 12px; box-sizing: border-box;\\ttransition: all 0.1s; }\\r\\n.hjnCtrlBox:hover { border: #ccc; }\\r\\n.hjnCtrlBox:active { border: 1px solid #999;  }\\r\\n.hjnBurger { display: none; }\\r\\n.hjnBurger + label span { top: 17px; height: 4px; border-radius: 2px;\\r\\n\\tposition: absolute; left: 6px; width: 69%; background-color: #888; }\\r\\n.hjnBurger + label span::before, .hjnBurger + label span::after { border-radius: 2px;\\r\\n\\tposition: absolute; width: 26px; height: 4px; background: #888;\\r\\n\\tdisplay: block; content: ''; transition: transform 0.1s; }\\r\\n.hjnBurger + label span::before { top: -8px; }\\r\\n.hjnBurger + label span::after { top: 8px; }\\r\\n.hjnBurger:checked + label span { background: #fff; }\\r\\n.hjnBurger:checked + label span::before { transform: translateY(8px) rotate(-45deg); }\\r\\n.hjnBurger:checked + label span::after { transform: translateY(-8px) rotate(45deg); }\\r\\n\\r\\n/* メニュー 全体 */\\r\\n.hjnBurgerTitle { /* ハンバーガーメニューオープン時の見出し */\\r\\n\\tposition: absolute;\\tvisibility: visible; color: #999; background:#fff; width: 100%;\\r\\n\\tpadding: 0 40px 0 15px; opacity: 0; z-index: 97;\\r\\n\\ttransform: translate3d(0, -15px, 0); transition: transform 0.1s, opacity 0.5s; }\\r\\n.hjnBurgerTitle p { word-wrap: break-word; line-height: 18px; width: 160px; }\\r\\n.hjnBurger:checked ~ .hjnBurgerTitle { transform: none;  opacity: 1; }\\r\\n.hjnBurgerWrap { position: absolute;  visibility: visible; width :100%; height :100%;\\r\\n\\tbackground: #fff; opacity: 0.9;\\ttop: 0; right: -100%; transition: right 0.1s; \\r\\n\\tpadding: 40px 0 0 0; overflow: scroll;}\\r\\n.hjnBurger:checked ~ .hjnBurgerWrap { right: 0; }\\r\\n/* Copyright表示 */\\r\\n.hjnBurgerTitle a {\\r\\n    color: #4d4e53; text-decoration: none; border-bottom: 1px dotted #afafaf; }\\r\\n/* モードボタン */\\r\\n.hjnBoxSwitch { display: none; }\\r\\n.hjnBoxSwitch + label span::before, .hjnBoxSwitch + label span::after\\r\\n\\t\\t{ display: inline-block; text-align:center; transition: all 0.1s; width: 100%}\\r\\n.hjnBoxSwitch + label span::before, .hjnBoxSwitch:checked + label span::after\\r\\n\\t\\t{ color: #ddd; }\\r\\n.hjnBoxSwitch + label span::after, .hjnBoxSwitch:checked + label span::before \\r\\n\\t\\t{ color: #888; font-weight: bold; }\\r\\n\\r\\n#hjnBoxPlaceOn + label span::before { content: \\\"Place on\\\"; }\\r\\n#hjnBoxPlaceOn + label span::after  { content: \\\"side\\\"; }\\r\\n#chartZoom + label span::before, #chartDZoom + label span::before  { content: \\\"reset zoom\\\"; }\\r\\n/* スイッチラベル */\\r\\n.hjnBoxOn { display: none; }\\r\\n.hjnBoxOn + label { text-align:center; color: #ddd; }\\r\\n.hjnBoxOn:checked + label { color: #888; font-weight: bold;}\\r\\n\\r\\n /* アコーデオンメニュー */\\r\\n.hjnAccordion { list-style-type: none; margin: 0; padding: 0; }\\r\\n.hjnMenuLv1 { position:rerative; margin: 0 10px; }\\r\\n.hjnMenuLv1 > input { display: none;}\\r\\n\\r\\n.hjnMenuLv1 > label::after { position: absolute; content: \\\"\\\"; border-style: solid;\\r\\n\\t\\tborder-color: #888 transparent transparent transparent;\\r\\n\\t\\tborder-width: 8px 4px 0 4px; right: 40px; transition: 0.1s;}\\r\\n.hjnMenuLv1 > input:checked ~ label::after { transform: rotate(90deg); }\\r\\n\\r\\n.hjnMenuLv1 > label, .hjnMenuLv1 > a { display: block; cursor: pointer;\\r\\n\\t\\tpadding: 10px; border-bottom: 1px solid #fff; background: #eee; transition: all 0.1s; }\\r\\n.hjnMenuLv1 > label:hover { background: rgba(0,0,0,0.2); }\\r\\n.hjnMenuLv1 > label:active { background: #999;  }\\r\\n.hjnMenuLv1 > input:checked ~ .hjnMenuLv2 { height: auto; padding: 10px; }\\r\\n\\r\\n/* 詳細メニューリスト   */\\r\\n.hjnMenuLv2 { transition: 0.1s; height: 0; overflow: hidden; padding: 0 10px; background: #ddd; }\\r\\n.hjnMenuLv2 ol { display: block; margin: 2px 0; }\\r\\n.hjnMenuLv2 label { height: 12px; }\\r\\n.hjnLabel4Input:hover,  .hjnButton4Input:hover { background: rgba(0,0,0,0.2); }\\r\\n.hjnLabel4Input:active, .hjnButton4Input:active { background: #999; }\\r\\n/* 詳細メニューリスト  ボタン */\\r\\n.hjnMenuLv2 .hjnButton4Input label, .hjnMenuLv2 label.hjnButton4Input, .hjnPlot \\r\\n\\t\\t{ display: block; padding: 8px 12px 8px 22px;}\\r\\n.hjnButton4Input { position: relative; display: block; overflow: hidden; transition: all 0.1s;  \\r\\n\\t\\ttext-decoration: none; color: #000; border: outset #fff; border-radius: 14px; }\\r\\n.hjnButton4Input:active { border: inset #fff; }\\r\\n.hjnMenuLv2 li .hjnButton4Input { padding: 8px 12px 8px 22px; } /* Download用 */\\r\\n.hjnMenuLv2 .hjnButton4Input input[type=\\\"file\\\"] { display: none; } /* File Open用 */\\r\\n/* 詳細メニューリスト  文字 */\\r\\n.hjnMenuLv2 .hjnLabel4Input { display: inline-block; position: relative;\\r\\n\\t\\t border-radius: 14px; padding-left: 1em; cursor: pointer; transition: all 0.1s; }\\r\\n.hjnMenuLv2 input { height: 12px; text-align: right; border-radius: 5px; }\\r\\n.hjnMenuLv2 .hjnLabel4Input input[type=\\\"radio\\\"] { position: absolute;\\r\\n\\t\\t top: 0; bottom: 0; left: 0; margin: auto;  cursor: pointer; }\\r\\n.hjnMenuLv2 select.hjnLabel4Input  {padding-left: 0; }\\r\\n/* 詳細メニューリスト  Legend */\\r\\n.hjnMenuLv2 .legend {cursor: pointer; width:206px; height: auto;\\r\\n \\t\\tdisplay: inline-block; padding: 8px 12px 8px 22px; border-radius: 14px;}\\r\\n.hjnMenuLv2 .legend > input { display: inline; cursor: pointer; margin: auto -15px; }\\r\\n.hjnMenuLv1 > input:checked ~ .hjnMenuLv2 .legend > input { position: absolute; }\\r\\n.hjnMenuLv2 .legend:hover { font-style: oblique; } \\r\\n\\r\\n/* dygraph用設定 */\\r\\n.item.active{ background: rgba(0,0,0,0.2) !important; border: rgba(0,0,0,0.2) !important; }\\r\\n.column { display: inline-block; }\\r\\n.dygraph-annotation { color: rgba(0,0,0,0.8) !important;\\r\\n\\t\\tbackground-color: rgba(256,256,256,0.2) !important; width: 40px !important; }\\r\\n\\r\\n/* Bottom detail graph用設定 */\\r\\n#detailTimeRange { padding: 8px; }\\r\\n#chartPlots div { float: left; padding: 2px 0;}\\r\\n.hjnPlot { margin: 2px 0; width:250px; }\\r\\n.hjnPlot > label { position:relative; margin: 2px 0px; background-color: #eee;\\r\\n\\t\\tpadding: 0px 5px; cursor: pointer; border-radius: 5px; }\\r\\n.hjnPlot > input[type=checkbox] { /* 削除アイコン */\\r\\n\\t\\tvisibility: hidden; z-index: 98; float: left; margin: -2px 0 0 0; \\r\\n\\t\\tbackground-color: #fff; box-shadow: 1px 1px 1px #ccc; height: 16px; width: 16px; }\\r\\n.hjnPlot > input[type=checkbox] + label{ /* 削除アイコンの横棒*/\\r\\n\\t\\tvisibility: hidden; z-index: 97; float: left; left: -13px; top: 2px;\\r\\n\\t\\tbackground: #aaa; height: 3px; width: 9px; padding: 0; border-radius: 2px;}\\r\\n.hjnPlot:hover > input[type=checkbox], .hjnPlot:hover > input[type=checkbox] + label \\r\\n\\t\\t{ visibility: visible; cursor: pointer; }\\r\\n.hjnPlot > input[type=radio] { display:none; }\\r\\n.hjnPlot > input[type=radio]:checked + label { background-color: #ccc; }\\r\\n.hjnPlot:hover { font-weight: bold; }\", \"\"]);\n\n// exports\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(10);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(1)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js!./dygraph.css\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js!./dygraph.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(0)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * Default styles for the dygraphs charting library.\\n */\\n\\n.dygraph-legend {\\n  position: absolute;\\n  font-size: 14px;\\n  z-index: 10;\\n  width: 250px;  /* labelsDivWidth */\\n  /*\\n  dygraphs determines these based on the presence of chart labels.\\n  It might make more sense to create a wrapper div around the chart proper.\\n  top: 0px;\\n  right: 2px;\\n  */\\n  background: white;\\n  line-height: normal;\\n  text-align: left;\\n  overflow: hidden;\\n}\\n\\n/* styles for a solid line in the legend */\\n.dygraph-legend-line {\\n  display: inline-block;\\n  position: relative;\\n  bottom: .5ex;\\n  padding-left: 1em;\\n  height: 1px;\\n  border-bottom-width: 2px;\\n  border-bottom-style: solid;\\n  /* border-bottom-color is set based on the series color */\\n}\\n\\n/* styles for a dashed line in the legend, e.g. when strokePattern is set */\\n.dygraph-legend-dash {\\n  display: inline-block;\\n  position: relative;\\n  bottom: .5ex;\\n  height: 1px;\\n  border-bottom-width: 2px;\\n  border-bottom-style: solid;\\n  /* border-bottom-color is set based on the series color */\\n  /* margin-right is set based on the stroke pattern */\\n  /* padding-left is set based on the stroke pattern */\\n}\\n\\n.dygraph-roller {\\n  position: absolute;\\n  z-index: 10;\\n}\\n\\n/* This class is shared by all annotations, including those with icons */\\n.dygraph-annotation {\\n  position: absolute;\\n  z-index: 10;\\n  overflow: hidden;\\n}\\n\\n/* This class only applies to annotations without icons */\\n/* Old class name: .dygraphDefaultAnnotation */\\n.dygraph-default-annotation {\\n  border: 1px solid black;\\n  background-color: white;\\n  text-align: center;\\n}\\n\\n.dygraph-axis-label {\\n  /* position: absolute; */\\n  /* font-size: 14px; */\\n  z-index: 10;\\n  line-height: normal;\\n  overflow: hidden;\\n  color: black;  /* replaces old axisLabelColor option */\\n}\\n\\n.dygraph-axis-label-x {\\n}\\n\\n.dygraph-axis-label-y {\\n}\\n\\n.dygraph-axis-label-y2 {\\n}\\n\\n.dygraph-title {\\n  font-weight: bold;\\n  z-index: 10;\\n  text-align: center;\\n  /* font-size: based on titleHeight option */\\n}\\n\\n.dygraph-xlabel {\\n  text-align: center;\\n  /* font-size: based on xLabelHeight option */\\n}\\n\\n/* For y-axis label */\\n.dygraph-label-rotate-left {\\n  text-align: center;\\n  /* See http://caniuse.com/#feat=transforms2d */\\n  transform: rotate(90deg);\\n  -webkit-transform: rotate(90deg);\\n  -moz-transform: rotate(90deg);\\n  -o-transform: rotate(90deg);\\n  -ms-transform: rotate(90deg);\\n}\\n\\n/* For y2-axis label */\\n.dygraph-label-rotate-right {\\n  text-align: center;\\n  /* See http://caniuse.com/#feat=transforms2d */\\n  transform: rotate(-90deg);\\n  -webkit-transform: rotate(-90deg);\\n  -moz-transform: rotate(-90deg);\\n  -o-transform: rotate(-90deg);\\n  -ms-transform: rotate(-90deg);\\n}\\n\", \"\"]);\n\n// exports\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 42dd0a2bb09af8464d54","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 0\n// module chunks = 0","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tvar styleTarget = fn.call(this, selector);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[selector] = styleTarget;\n\t\t}\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/addStyles.js\n// module id = 1\n// module chunks = 0","\"use strict\";\r\nimport * as HJN_util from './HJN.utils.js';\r\nimport HJN from './HJN.graph.js';\r\n// import {Dygraph} from '../libs/dygraph.js';\r\n// import Dygraph from '../libs/extras/synchronizer.js';\r\n\r\n\r\n/* *****1*********2*********3*********4*********5*********6*********7******* */\r\n/**\r\n * HTMLから呼ばれるサンプル実装\r\n * \r\n * @param {string}\r\n *            [chartName=HJN.chartName=\"chart\"] グラフを作成するHTMLタグ名\r\n * @return {ETAT} 終了時刻のTAT（応答時間）時系列データ\r\n * @example window.addEventListener(\"DOMContentLoaded\",function(eve){\r\n *          HJN.init.ChartRegist(\"chart\"); });\r\n */\r\n// export {HJN_init_ChartRegist};\r\nexport function HJN_init_ChartRegist(chartName){ // #70\r\n\r\n\t\"use strict\";\r\n\t// 引数１ ：デフォルトHJN.chartName(\"chart\")\r\n\tHJN.chartName = chartName = chartName || HJN.chartName;\r\n\t// タイトルを設定する #57\r\n\tdocument.title = \"tat log diver \" + HJN.ver; \r\n\t// htmlを作成する #52\r\n\tvar html_chart = document.getElementById(\"hjn_\" + chartName) || document.body;\r\n\thtml_chart.innerHTML = ''\r\n\t    + '<div id=\"' + chartName + '\"></div>'\r\n        + '<div id=\"' + chartName + 'D\"></div>'\r\n        + '<textarea id=\"lineViewer\" class=\"lineViewer\">logdata</textarea>';\r\n\t// 手前にメニュ－用htmlを作成する #52\r\n\tvar html_nav = document.createElement('nav');\r\n\thtml_nav.innerHTML = ''\r\n\t    + '<header>'\r\n        + '<div id=\"Simulator\"></div>' // #53\r\n        + '<div class=\"statusbar\">'\r\n        + '  <iframe id=\"fileInfo\"></iframe>'\r\n        + '</div>'\r\n        + '<div class=\"hjnBurgerTray\">'\r\n        + '  <input id=\"hjnBoxBuger\" type=\"checkbox\" class=\"hjnBurger hjnResize\" checked=\"checked\" />'\r\n        + '    <label for=\"hjnBoxBuger\" class=\"hjnCtrlBox\"><span></span></label>'\r\n        + '  <div class=\"hjnBurgerTitle\">'\r\n        + '    <input id=\"hjnBoxPlaceOn\" type=\"checkbox\" class=\"hjnBoxSwitch hjnResize\" />'\r\n        + '      <label for=\"hjnBoxPlaceOn\" class=\"hjnCtrlBox\"><span></span></label>'\r\n        + '    <p>'\r\n        + '      <a class=\"hjnLabel4Input\" href=\"../jsdoc/index.html\"'\r\n        + '                target=”_hirosejnJSDoc3”>TAT log diver</a><BR>'\r\n        + '      <a class=\"hjnLabel4Input\" href=\"https://github.com/hirosejn/\"'\r\n        + '                target=”_hirosejnGit”>&copy;2017 Junichiroh Hirose</a>'\r\n        + '    </p>'\r\n        + '  </div>'\r\n        + '  <div class=\"hjnBurgerWrap\">'\r\n        + '    <div class=\"hjnAccordion\">'\r\n        + '      <div id=\"' + chartName + '_menu\"></div>'\r\n        + '      <div id=\"' + chartName + 'D_menu\"></div>'\r\n        + '    </div>'\r\n        + '  </div>'\r\n        + '</div>'\r\n        + '</header>';\r\n\thtml_chart.parentNode.insertBefore(html_nav, html_chart);\r\n\t\r\n\tvar dropFieldName = chartName;\t// ファイルドロップを受け付けるタグ名\r\n\tHJN_util.Logger.ShowLogTextInit(); // 処理時間計測の初期化\r\n\r\n\t// グラフのインスタンスを作成し初期化する\r\n\tHJN.chart = new HJN.Graph(chartName, \"HJN.chart\");\r\n\tHJN.chart.init();\r\n\tHJN.chartD = new HJN.Graph(chartName + \"D\", \"HJN.chartD\");\r\n\tHJN.chartD.init();\r\n\t// ドロップフィールドに、処理を登録する(注：dygraphはイベントリスナーを登録しないとクリック時にエラーが出る）\r\n\tHJN.init.DropField(dropFieldName);\r\n\tHJN.init.DropField(dropFieldName+ \"D\");\r\n\r\n\t// 初期表示データを自動生成する // #53\r\n\tHJN_util.Config.GetConfig(\"Simulator\").getFunctionByKey(\"S_SIMU\")(); // #53\r\n\t\r\n}\r\n\r\n/**\r\n * データを自動生成し表示する\r\n * \r\n * @param {String|Number}\r\n *            [json = HJN_util.virtualSystemByJson.GetJsonConfig(0)]\r\n *            シミュレーション条件JSONテキスト、もしくはサンプルJSON番号\r\n */\r\nexport function CreateSampleTatLogAndChartShow(json){ // #53\r\n    \"use strict\";\r\n    var jsonText;\r\n    if (typeof(json) === \"number\") { // #53\r\n        jsonText = HJN_util.virtualSystemByJson.GetJsonConfig(json);\r\n    } else{\r\n        jsonText = json || HJN_util.virtualSystemByJson.GetJsonConfig(0);\r\n    }\r\n    // JSON Editorを更新する\r\n    document.getElementById(\"SimulatorEditor\").value = jsonText;\r\n    // 初期表示データを自動生成する\r\n    HJN.chart.eTatOriginal = HJN_util.virtualSystemByJson.Execute(jsonText);\r\n    // データを表示する\r\n    HJN.init.ChartShow(HJN.chart.eTatOriginal);\r\n}\r\n\r\n/**\r\n * HJN.init.ChartShow: 終了時刻とtatの配列をグラフ表示する\r\n * \r\n * @param {ETAT}\r\n *            HJN.chart.eTatOriginal 終了時刻とtatを含む配列\r\n */\r\nHJN.init.ChartShow = function(eTatOriginal){\r\n    // フィルタしたeTatを取得する #34\r\n    var eTat = HJN.chart.fileReader.createFilter().filter(eTatOriginal);\r\n    \r\n    // グラフを初期表示する\r\n    HJN.Plot.List = []; // #53\r\n    // 上段\r\n    HJN.chart.update(HJN.chart.createSeries(eTat));\r\n    var text = \"上段表示 [\" + HJN.chart.eTat.length + \"]\";\r\n    HJN_util.Logger.ShowLogText(text, \"elaps\");       // 処理時間ログ出力\r\n\r\n    // 下段(非同期）\r\n   HJN_util.setZeroTimeout( function(){\r\n        HJN.chartD.update(HJN.init.ChartRegistDetail(HJN.chart.cTps));\r\n        HJN.chart.showBalloon();    // 上段のBalloonを描画する\r\n        var text = \"下段表示 [\" + HJN.chartD.eTat.length + \"]\";\r\n        HJN_util.Logger.ShowLogText(text, \"elaps\");\r\n        text = \"<mark>Simulated data</mark>[\"\r\n            + HJN.chart.eTat.length.toString()\r\n                .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,') + \"]\"; // 整数文字列のカンマ編集\r\n        HJN_util.Logger.ShowLogText(text, \"msg\");\r\n        // 上下段のマウス操作同期設定 #49\r\n        var sync = Dygraph.synchronize(\r\n                 [ HJN.chart.graph, HJN.chartD.graph ],\r\n                 {selection: true, zoom: false});\r\n    });\r\n}\r\n\r\n/**\r\n * HJN.init.DropField: HTMLタグに、CSVファイルのドロップを受付けイベントを登録する\r\n * \r\n * @param {string}\r\n *            dropFieldName ファイルのドロップイベントを受けるフィールド名\r\n */\r\nHJN.init.DropField = function (dropFieldName) {\r\n\t\"use strict\";\r\n\t// 第一引数で指定された名前の ID 属性のエレメントを取得する\r\n\tvar element = document.getElementById(dropFieldName);\r\n\t\r\n\t// ドラッグ操作中に実行されるイベント（マウスカーソルが要素内に滞在中）\r\n\telement.addEventListener(\"dragover\" , function (e){\r\n\t\te.preventDefault();   // ドロップを許可し受け入れを表明\r\n\t});\r\n\t\r\n\t// ドロップ時に実行されるイベント\r\n\telement.addEventListener(\"drop\", function (e){\r\n\t\t\tvar data_transfer = e.dataTransfer;\t\t// DataTransfer オブジェクトを取得する\r\n\t\t\tif(!data_transfer.types) return;\t\t// ファイルのコンテンツタイプを取得できたことを確認する\r\n\t\t\tvar files = data_transfer.files;\t// ファイルのリストを取得する\r\n\t\t\tHJN.init.FileReader(files);\r\n\t\t\te.preventDefault();\t\t// デフォルトのドロップ機能を無効化\r\n\t});\r\n};\r\n\r\n/**\r\n * HJN.init.FileReader: 指定されたファイルを読込んで処理する\r\n * \r\n * @param {Object}\r\n *            files ファイルハンドラ\r\n */\r\nHJN.init.FileReader = function (files){  // #15\r\n\t\"use strict\";\r\n\tfor(var i = 0; i < files.length; i++){\t// データを順番に取得する\r\n\t\ttry{\r\n\t\t\t// ファイルを取得する\r\n\t\t\tvar file = files[i];\r\n\t\t\t// ログ出力用にファイル名（サイズ）を編集する\r\n\t\t\tvar textArray =\t\"<BR><mark><b>\" + file.name + \"</b></mark> \" +\r\n\t\t\t\t\t\t\t\"[\"+ file.size + \"byte] \" + \r\n\t\t\t\t\t\t\tfile.lastModifiedDate.toLocaleString() +\"<BR>\";\r\n\t\t\t// ファイルの読み込みに成功したら、その内容をドロップエリアに追記して表示する\r\n\t\t\tvar reader = new FileReader();\r\n\t\t\treader.onloadend = funcOnloadend.bind(this, files[i], i);\r\n\t\t\t// ファイルにArrayBufferで参照を取得する（loadイベントを起こす）\r\n\t\t    reader.readAsArrayBuffer(files[i]);\r\n\t\t}catch(e){\r\n\t\t\t// 第一引数のテキストアレイの内容を#fileInfoのiframeに表示する\r\n\t\t\tvar msg = \"The \" + i + \"th dropped object is not a file\";\r\n\t\t\tHJN_util.Logger.ShowText( [\"<mark>\"+msg+\"</mark>\"] );\r\n\t\t\tconsole.error(\"[%o]%o\",msg,e );\r\n\t\t}\r\n\t}\r\n\r\n\t// 内部関数：ファイルを読み込みｸﾞﾗﾌを表示する（指定ファイルを読み込んだ後に呼び出される） #23\r\n    function funcOnloadend(file, i, evt) {\r\n        if (evt.target.readyState === FileReader.DONE) { // DONE == 2\r\n            var filesIdx = HJN.files.length;\r\n            // ファイルの先頭2行をログ表示する\r\n            HJN.filesArrayBuffer[filesIdx] = evt.target.result;\r\n            HJN_util.Logger.ShowLogTextInit();              // 情報表示 : 初期化\r\n            HJN_util.Logger.ShowLogText(textArray, \"msg\");  // 情報表示：ドロップファイル情報\r\n            // 指定ファイルを読み込む\r\n            // CSVファイルを上段用eTatに展開する[{x:, y:,pos:,len:},...] 全件展開する\r\n            if (i === 0 && HJN.chart.fileReader.isNewETAT()){\r\n                // 新規モードかつ、同時複数ファイル指定時の最初のファイルのとき、新たに作成する\r\n                HJN.files = [file];\r\n                HJN.chart.eTatOriginal = getTatLogArray(HJN.filesArrayBuffer, filesIdx);\r\n            } else { // 2件目以降のファイルのとき、もしくは、追加モード\"ADDDATA\"のとき、追加する\r\n                HJN.files.push(file);\r\n                HJN.chart.eTatOriginal = HJN.chart.eTatOriginal.concat(\r\n                        getTatLogArray(HJN.filesArrayBuffer, filesIdx));\r\n            }\r\n            \r\n            // 全ファイルを読み込んだらグラフを描画する\r\n            if (HJN.files[HJN.files.length - 1] === file){ // 指定ファイル群の最後のファイルを処理しているとき\r\n                // フィルタしたeTatを取得する #34\r\n                var eTat = HJN.chart.fileReader.createFilter().filter(HJN.chart.eTatOriginal);\r\n\r\n                // 上段グラフを描画する（ eTatから上段用 時系列分析データ(seriesSet)を展開する）\r\n                HJN.chart.update(HJN.chart.createSeries(eTat));\r\n                HJN_util.Logger.ShowLogText(\"上段表示\", \"elaps\");\r\n\r\n                // 下段用データの展開とグラフ描画（非同期処理）\r\n                HJN.Plot.List = [];\r\n                HJN_util.setZeroTimeout(function(){\r\n                    // 下段グラフを描画する（下段用 時系列分析データ(seriesSet)を展開する）\r\n                    HJN.chartD.update(HJN.init.ChartRegistDetail(HJN.chart.cTps));\r\n                    // 上段のBalloonを描画する(上段update時にはplots登録されていないので、ここで処理）\r\n                    HJN.chart.showBalloon();\r\n                    HJN_util.Logger.ShowLogText(\"下段表示\", \"elaps\");\r\n                    HJN_util.Logger.ShowLogText(\"<mark>\"+ HJN.files[0].name +\r\n                            \"[\"+ HJN.chart.eTat.length +\r\n                            \"]を表示しました</mark>\", \"msg\");\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n\t// 内部関数： 指定ファイルの先頭ｎ行を、改行文字<BR> のテキストに変換してリターンする\r\n\tfunction topLines(file, n) {\r\n\t    var fileInfo = \"\",\r\n\t        line;\r\n\t    try{    // 先頭からnレコード取得\r\n\t        var getterOfLine = HJN.chart.fileReader.createGetterOfLine(file);\r\n\t        for (var i = 0; i < n; i++) {\r\n\t            line = getterOfLine.next();\r\n\t            fileInfo += line.str + \"<BR>\";\r\n\t        }\r\n\t    }catch (e) {\r\n\t        alert(\"[HJN.init.DropField 改行コードの無いファイルは扱えません]\");\r\n\t        console.error(e);\r\n\t    }\r\n\t    return fileInfo;\r\n\t}\r\n\r\n    // 内部関数： CSVファイルを読み込み、TatLog用アレイ[{x:日時, y:値, pos:レコード開始位置,\r\n    // len:レコード長},...]に展開する\r\n\tfunction getTatLogArray(files, idx) { // arg0:csvﾌｧｲﾙのファイルﾊﾟｽ\r\n\t    HJN_util.Logger.ShowLogText(\"----- read file -----------------------------\",\"calc\");\r\n\t    var file = files[idx], // #23\r\n\t        eTat = [],\r\n\t        xy = {date: 0, value: 0, isError: false },\r\n\t        i = 0,  // timelog用\r\n\t        getterOfLine = HJN.chart.fileReader.createGetterOfLine(file),\r\n\t        getterOfXY = HJN.chart.fileReader.createGetterOfXY(),\r\n\t        line = getterOfLine.next();     // 先頭行の初期処理\r\n\t    while (!line.isEoF) {               // 以降最終行まで処理する\r\n\t        try {\r\n\t            HJN_util.Logger.ByInterval(i++, line); // 一定時刻毎に進捗を出力する\r\n\t            xy = getterOfXY.parse(line);\r\n\t            if(!xy.isError){\r\n\t                eTat.push( {x: xy.x, y: xy.y, fileIdx: idx, // #23\r\n\t                    pos: line.pos, len: line.array.byteLength, sTatIdx: 0} );\r\n\t            }\r\n\t            line = getterOfLine.next(); // #24\r\n\t        } catch (e) {   /* 改行だけレコードをスキップ */\r\n\t            console.error(e);\r\n\t            console.err(\"err: %o\",e);\r\n\t        }\r\n\t    }\r\n\t    HJN_util.Logger.ShowLogText(\"[0:file readed & got eTat]---------------\",\"calc\");\r\n\t    return eTat;\r\n\t}\r\n};\r\n\r\n\r\n\r\n/**\r\n * 詳細グラフ用機能： 表示対象期間のcTpsから、eTps範囲を取得し、詳細Seriesを生成する。併せてPlotsを登録する。\r\n * \r\n * @param {xMs}\r\n *            cTps 日時（ミリ秒単位）\r\n * @return {seriesSet} dygraph用時系列データ配列\r\n */\r\nHJN.init.ChartRegistDetail = function(cTps){\r\n\t\"use strict\";\r\n\t// CTPSの最大値となるplotを取得する\r\n\tvar maxY =Number.MIN_VALUE,\r\n\t\tmaxYIdx = -1;\r\n\tcTps.forEach(function(c, i){\r\n\t\tif (maxY < c.y){\r\n\t\t\tmaxY = c.y;\r\n\t\t\tmaxYIdx = i;\r\n\t\t}\r\n\t});\r\n\tif(0 <= maxYIdx){\t// #26\r\n\t\t// 秒単位より大きいとき、最大値を含む時刻(秒)に補正する #38\r\n\t\tvar x = cTps[maxYIdx].x;\r\n\t\tif(HJN.chart.cTpsUnit.unit >= 1000){\r\n\t\t\tvar cTpsIdx = HJN.chart.conc.findIndex(function(e,i){return e.y === cTps[maxYIdx].y;});\r\n\t\t\tx = HJN.chart.conc[cTpsIdx].x;\r\n\t\t}\r\n\t\t// slider rangeに、下段の表示時刻を設定する\r\n\t\tHJN.init.SetDetailDateTime(x);\r\n\t\t// eTpsの範囲を取得し、詳細用seriesSet(HJN.chartD.seriesSet）を設定する\r\n\t\tHJN.chartD.createSeries(HJN.init.GetSliderRangedEtat());\r\n\t\t// plotsアイコン用 HJN.Plot.Listに、下段表示したplotを登録する\r\n\t\tHJN.Plot.Add(HJN.CTPS.N, cTps[maxYIdx].x, cTps[maxYIdx].y);\r\n\t}\r\n\tHJN_util.Logger.ShowLogText(\"[6:Plot added] \" + HJN.Plot.List.length + \" plots\",\"calc\");\r\n\r\n\treturn HJN.chartD.seriesSet;\r\n};\r\n/**\r\n * 詳細グラフ用機能： sliderRangeで指定された範囲のeTatを返却する\r\n * \r\n * @return {ETAT} 詳細グラフ用eTat\r\n */\r\nHJN.init.GetSliderRangedEtat = function(n) {\r\n\t\"use strict\";\r\n\t// 指定時刻（ｄｔ ± range）を取得する\r\n\tvar rangeTagPlus  = document.getElementById(\"DetailRangePlus\");\r\n\tvar\trangeTagMinus = document.getElementById(\"DetailRangeMinus\");\r\n    var rangeTagUnit  = document.getElementById(\"DetailRangeUnit\"); // #48\r\n\tvar\trangeCycle = HJN.chart.cTpsUnit.unit / 1000; // #38\r\n    // HJNグローバル変数に退避する\r\n    HJN.detailRangePlus  = rangeTagPlus  ? +rangeTagPlus.value  : 1 + rangeCycle; // 幅（秒）\r\n    HJN.detailRangeMinus = rangeTagMinus ? +rangeTagMinus.value : rangeCycle;     // 幅（秒）\r\n    HJN.detailRangeUnit  = rangeTagUnit  ? +rangeTagUnit.value  : HJN.chart.cycle; // #48\r\n\r\n\tvar rangeUnit = HJN.detailRangeUnit; // #48\r\n\tvar dt = Math.floor(HJN.detailDateTime / rangeUnit) * rangeUnit; // 中央時刻(ミリ秒)\r\n\tvar\tfrom = dt - HJN.detailRangeMinus * rangeUnit;  // #48\r\n\tvar\tto = dt + HJN.detailRangePlus  * rangeUnit;  // 幅（ミリ秒）\r\n\tvar eTatDetail = [{x: 0, y: 0.001, sTatIdx: 0}];\t// tatMapが無い場合の返却値\r\n\tif (HJN.chart.eTat.tatMap){\t// #18\r\n\t\t// eTatDetailがレンジキャッシュにあるか確認する #30\r\n\t\teTatDetail = HJN.chart.eTat.cash.getRangedCash(from, to);\r\n\t\tif(eTatDetail === undefined){\r\n\t\t\t// キャッシュヒットしないとき、eTatDetailを抽出し、キャッシュにセットする\r\n\t\t\teTatDetail = HJN.chart.eTat.tatMap.search(from,to);\r\n\t\t\tHJN.chart.eTat.cash.setRangedCash(eTatDetail, from, to);\r\n\t\t}\r\n\t}\r\n\tHJN_util.Logger.ShowLogText(\"[0:HJN.init.GetSliderRangedEtat] \",\"calc\");\r\n\t\r\n\treturn eTatDetail;\t// 詳細グラフ用eTatを返却する\r\n};\r\n/**\r\n * 詳細グラフ用機能： 表示期間変更時に、Detailを再描画する（onChangeイベント時に呼び出される）\r\n */\r\nHJN.init.setDetailRange = function(){\r\n    \"use strict\";\r\n    clearTimeout(HJN.timer);\r\n    HJN.timer = setTimeout(function(){\r\n            HJN_util.Logger.ShowLogTextInit(\"[-:HJN.init.setDetailRange]start---------------\",\"calc\");\r\n            // 表示中Plotsのrangeを更新する #30\r\n            var i = HJN.Plot.List.findIndex(function(e){ return (e.radio === true); });\r\n            var plot = HJN.Plot.List[i];\r\n            plot.rangePlus  = document.getElementById(\"DetailRangePlus\").value;\r\n            plot.rangeMinus = document.getElementById(\"DetailRangeMinus\").value;\r\n            var rangeTagUnit = document.getElementById(\"DetailRangeUnit\"); // #48\r\n            HJN.detailRangeUnit  = rangeTagUnit  ? +rangeTagUnit.value  : HJN.chart.cycle; // #57\r\n            plot.rangeUnit  = HJN.detailRangeUnit; // #48\r\n\r\n            // 下段データを登録する\r\n            HJN.chartD.seriesSet = HJN.chartD.createSeries( HJN.init.GetSliderRangedEtat() );\r\n            // 下段グラフを描画する\r\n            HJN.Graph.prototype.update.call(HJN.chartD, HJN.chartD.seriesSet);\r\n        }, 750);    // 750ms 値の変更がなかった時に、処理を開始する\r\n};\r\n/**\r\n * 詳細グラフ用機能： 指定日時を秒単位に丸めて、FORMのslider Rangeに設定する\r\n * \r\n * @param {xMs}\r\n *            date 日時（ミリ秒単位）\r\n */\r\nHJN.init.SetDetailDateTime=function(date) {\r\n    \"use strict\";\r\n    HJN.detailDateTime = Math.floor(date / 1000) * 1000;    // 秒単位に丸める\r\n};\r\n\r\n/**\r\n * Plot一覧（過去にクリックしたplotの一覧）およびグラフのplot(点)のクリック時の処理群\r\n * \r\n * @namespace\r\n */\r\nHJN.Plot = {}; // plot関連\r\n\r\n/**\r\n * Plotの一覧\r\n * \r\n * @type array.<String, Boolean, Boolean, index, xMs, Number, Number, Number>\r\n * @prop {String} label Plot一覧に表示する文字列\r\n * @prop {Boolean} ckBox チェックボックスの選択状態<br>\r\n *       （選択後すぐに削除されるのでtrueとなることはない）\r\n * @prop {Boolean} radio ラジオボタンの選択状態\r\n * @prop {index} n グラフ番号\r\n * @prop {xMs} x xの値\r\n * @prop {Number} y yの値\r\n * @prop {Number} rangeMinus 表示幅時間マイナス（秒）\r\n * @prop {Number} rangePlus 表示幅時間プラス（秒）\r\n * @prop {Number} rangeUnit 表示幅時間 単位（sec:1/min:60/hour:3600/day:86400)\r\n * \r\n */\r\nHJN.Plot.List = [];\r\n\r\n/**\r\n * point/baloonクリック時呼出し用関数<br>\r\n * 詳細グラフを描画し、Plotを更新する\r\n * \r\n * @param {Objcet}\r\n *            point dygraph の point\r\n */\r\nHJN.Plot.PointClickCallback = function(point) {\r\n\t\"use strict\";\r\n\tHJN_util.Logger.ShowLogText(\"[0:PointClickCallback]start---------------\",\"calc\");\r\n\tvar\tn = HJN.seriesConfig.findIndex(function(e){\treturn e.key === point.name; }),// シリーズ番号\r\n\t\tx = point.xval,\t// ミリ秒\r\n\t\ty = point.yval; // 秒\r\n\r\n\t// ETPS,EMPS,EAPSのとき、TATが幅に含まれるよう、幅(range)を拡大する #57\r\n    var rangeTagUnit = document.getElementById(\"DetailRangeUnit\");\r\n    var rangeUnit  = rangeTagUnit  ? +rangeTagUnit.value : HJN.chart.cycle;\r\n\tif ((n === HJN.ETPS.N || n === HJN.EMPS.N || n === HJN.EAPS.N) \r\n            && rangeUnit < HJN.chart.cycle) {\r\n        rangeUnit = HJN.chart.cycle;\r\n        HJN.detailRangeUnit = rangeUnit;\r\n        // selectリストの選択を、rangeUnitに合わせる #57\r\n        for (var i = 0; i < rangeTagUnit.length; i++) {\r\n            if(HJN.detailRangeUnit <= rangeTagUnit[i].value){\r\n                rangeTagUnit[i].selected = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\t// グラフの日時で、詳細グラフを再作成する\r\n\tHJN.init.SetDetailDateTime(x);\r\n\tHJN.chartD.createSeries(HJN.init.GetSliderRangedEtat(n)); // #57\r\n\t// 下段の残処理終了後、下段データを登録描画する\r\n\tHJN.chartD.graph.ready(function(){ HJN.chartD.update(HJN.chartD.seriesSet, n); }); // #57\r\n\t// Hover表示しているplotを、HJN.Plot.Listに登録し、plotsアイコンを再描画する\r\n\tHJN.Plot.Add(n, x, y);\r\n\t// Balloonを再描画する\r\n\tHJN.Plot.ShowBalloon();\r\n    // タッチデバイスでないとき、lineViewerに表示をクリップボードにコピーする\r\n\tif (!HJN_util.TouchPanel.isTouchableDevice()) { // #22\r\n\t    HJN_util.CopyToClipboard(\"lineViewer\"); // #61\r\n\t}\r\n};\r\n\r\n/**\r\n * point/baloonダブルクリック時呼出し用関数<br>\r\n * Plotを削除する\r\n * \r\n * @param {object}\r\n *            plot dygraphのpoint\r\n */\r\nHJN.Plot.PointDblClickCallback = function(point) {\r\n\t\"use strict\";\r\n\t// 指定plotを削除する\r\n\tvar n = HJN.seriesConfig.findIndex(function(e){\treturn e.key === point.name; }),\r\n\t\tx = point.xval,\t// ミリ秒\r\n\t\ti = HJN.Plot.List.findIndex(function(p){\r\n\t\t\t\treturn(p.n === n && p.x === x) ||\t// 完全一致\r\n\t\t\t\t\t\t(\"tpsPlot\" in p &&\t\t\t// 詳細一致\r\n\t\t\t\t\t\tp.tpsPlot.n === n && p.tpsPlot.x === x); });\r\n\tif(0 <= i) HJN.Plot.List.splice(i, 1);\r\n\t\r\n\tHJN.Plot.Render();\r\n\t// グラフ内の吹き出しを再表示する\r\n\tHJN.Plot.ShowBalloon();\r\n};\r\n\r\n/**\r\n * クリック時のHoverからHJN.Plot.Listを設定する\r\n * \r\n * @param {index}\r\n *            n グラフのシリーズ番号\r\n * @param {xMs}\r\n *            x マウスクリック時のxの値（ミリ秒）\r\n * @param {Number}\r\n *            y マウスクリック時のyの値\r\n * @return {index} i plots内のplotの位置\r\n */\r\nHJN.Plot.Add=function(n, x, y) {\r\n\t\"use strict\";\r\n\t// 各plotを非選択状態とする\r\n\tHJN.Plot.List.forEach(function(e){e.radio = false;});\r\n\t// ラベルフォーマットの設定\r\n\tvar format = (n === HJN.ETPS.N || n === HJN.CTPS.N) ? \"hh:mm:ss\" : \"hh:mm:ss.ppp\",\r\n\t\tlabel = HJN_util.D2S(x, format, true) + \" \" + // #61\r\n\t\t\t\tHJN.seriesConfig[n].label.replace(\"%N\",HJN_util.N2S(y));\r\n\t// 幅(range)を取り込む（秒）\r\n\tvar\trangePlusTag  =  document.getElementById(\"DetailRangePlus\"),\r\n\t\trangeMinusTag =  document.getElementById(\"DetailRangeMinus\"),\r\n\t    rangeUnitTag  =  document.getElementById(\"DetailRangeUnit\"), // #48\r\n        rangeUnit  = rangeUnitTag  ? +rangeUnitTag.value : HJN.chart.cycle, // #57\r\n\t    rangePlus  = rangePlusTag  ? +rangePlusTag.value  : 1,\t// 幅\r\n\t\trangeMinus = rangeMinusTag ? +rangeMinusTag.value : 1;\r\n\r\n\t// 既存Poltを検索する\r\n\tvar\ti = HJN.Plot.List.findIndex(function(p){\r\n\t\t\t\treturn(p.n === n && p.x === x) ||\t// 完全一致\r\n\t\t\t\t\t\t(\"tpsPlot\" in p &&\t\t\t// 詳細一致\r\n\t\t\t\t\t\tp.tpsPlot.n === n && p.tpsPlot.x === x); });\r\n\t// Plotを設定する\r\n\tvar plot;\r\n\tif(0 <= i){\t// 既存Plotsにある時、選択状態とし、rangeを再設定する\r\n\t\tplot = HJN.Plot.List[i];\r\n\t\tplot.radio = true;\r\n\t\tplot.rangePlus  = rangePlus; // 秒\r\n\t\tplot.rangeMinus = rangeMinus;\r\n\t    plot.rangeUnit  = rangeUnit; // #48\r\n\t}else{\t\t// 既存に無いときPlotを追加する\r\n\t    // ETAT,STATのとき、TATが幅に含まれるよう、幅(range)を拡大する #30 #48 #57\r\n\t    if (n === HJN.ETAT.N){\r\n\t        rangeMinus = Math.max(rangeMinus, \r\n\t                Math.floor(x / rangeUnit) - Math.floor((x - y) / rangeUnit)); // #48\r\n\t        document.getElementById(\"DetailRangeMinus\").value = rangeMinus; \r\n\t    }else if (n === HJN.STAT.N){\r\n\t        rangePlus = Math.max(rangePlus,\r\n\t                Math.floor((x + y) / rangeUnit)) - Math.floor(x / rangeUnit) ; // #48\r\n\t        document.getElementById(\"DetailRangePlus\").value = rangePlus;\r\n\t    }\r\n\t    // Plotを追加する\r\n\t    plot = {label: label, ckBox:false,\r\n\t\t\t\t radio:true, n: n, x: x, y: y, \r\n\t\t\t\t rangePlus: rangePlus, rangeMinus: rangeMinus, rangeUnit: rangeUnit };\r\n\t\tif (n === HJN.CTPS.N){\t\t\t// CTPSのとき秒内最大CONCとして登録する\r\n\t\t\tadjustPlotToY(HJN.chartD.conc, x, x + HJN.chart.cTpsUnit.unit, y, \r\n\t\t\t        HJN.CONC.N, plot, rangePlus, rangeMinus, rangeUnit);\r\n\t\t}else if (n === HJN.EMPS.N){\t// EMPSのとき秒内最大ETATとして登録する\r\n\t\t\tadjustPlotToY(HJN.chartD.eTat, x, x + HJN.chart.cycle, y, \r\n\t\t\t        HJN.ETAT.N, plot, rangePlus, rangeMinus, rangeUnit);\r\n\t\t}else {\t// CTPS,EMPS以外の時、選択Plotを追加する\r\n\t\t\tHJN.Plot.List.push(plot);\r\n\t\t}\r\n\t\t// Plotsを時刻順にソートする\r\n\t\tHJN.Plot.List.sort(\r\n\t\t\t\tfunction(a, b) { return a.x - b.x; });\r\n\t\ti = HJN.Plot.List.findIndex(\r\n\t\t\t\tfunction(p){ return(p.n === n && p.x === x); });\r\n\t}\r\n\tHJN.Plot.Render();\r\n\treturn i;\t// plots内のplotの位置\r\n\r\n\t\r\n\t// 内部関数：プロット位置を、指定秒から詳細グラフの最大時刻に変更する #19\r\n\tfunction adjustPlotToY(conc, x, toX, y, n, plot, rangePlus, rangeMinus, rangeUnit){\r\n\t\tvar\tmaxTime = 0,\r\n\t\t\tconcMax = 0,\r\n\t\t\ti = HJN_util.binarySearch(x, conc, function(e){ return e.x; });\r\n\t\tfor (; i < conc.length && conc[i].x < toX; i++){\t// #26\r\n\t\t\tif (concMax <= conc[i].y){\r\n    \t\t\t\tmaxTime = conc[i].x;\r\n    \t\t\t\tconcMax = conc[i].y;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (concMax === y) { // 補正すべき時刻が求まったときCONC,ETATを追加する #23\r\n            x = maxTime;\r\n            format = \"hh:mm:ss.ppp\";\r\n            label = HJN_util.D2S(x, format, true) + \" \" + // #61\r\n                    HJN.seriesConfig[n].label.replace(\"%N\",HJN_util.N2S(y));\r\n            HJN.Plot.List.push( {label: label, ckBox:false,\r\n                 radio:true, n: n, x: x, y: y, \r\n                 rangePlus: rangePlus , rangeMinus: rangeMinus, rangeUnit: rangeUnit,\r\n                 tpsPlot: plot} );  // 詳細plotには、tpsのplot情報も保持する\r\n        } else { // 補正すべき時刻がない場合、元のPlotを追加する\r\n            HJN.Plot.List.push(plot);\r\n        }\r\n\r\n\t}\r\n};\r\n\r\n/**\r\n * HJN.Plot.Listを再表示する\r\n */\r\nHJN.Plot.Render = function() {\r\n\t\"use strict\";\r\n    var divCheckedPlots =  document.getElementById(HJN.chartName + \"Plots\");\r\n\t// 既存のアイコンを削除する\r\n\twhile (divCheckedPlots.firstChild){\r\n\t\tdivCheckedPlots.removeChild(divCheckedPlots.firstChild);\r\n\t}\r\n\t// 登録されているplots分のアイコンを追加する\r\n\tHJN.Plot.List.forEach( function(e, i){\r\n\t\tvar div = document.createElement('div'),\t\t// 要素の作成\r\n\t\t\tradio = e.radio ? 'checked=\"checked\"' : '',\t// radio選択指定\r\n\t\t\tckBox = e.ckBox ? 'checked=\"checked\"' : '';\t// check boxのチェック指定\r\n\t\tdiv.className = \"hjnPlot\";\r\n\t\tdiv.innerHTML =\r\n\t    \t'<input type=\"checkbox\" value=\"' + e.x + '\" id=\"checkBox_' + i + '\" ' + ckBox +\r\n\t    \t\t\t' title=\"delete\" onclick=\"HJN.Plot.CheckBox(' + i + ')\">' +\r\n\t    \t'<label for=\"checkBox_' + i + '\"></label>' +\r\n\t    \t'<input type=\"radio\" name=\"CheckedPlot\" id=\"SaveTime_' + i + '\" ' + radio +\r\n\t    \t\t\t' onclick=\"HJN.Plot.CheckRadio(' + i + ')\">' +\r\n\t    \t'<label for=\"SaveTime_' + i + '\">' + e.label + '</label>';\r\n    \tdivCheckedPlots.appendChild(div);\r\n\t} );\r\n};\r\n/**\r\n * PlotのChekBox変更時呼出用関数<br>\r\n * 指定Plotを削除し、PlotsとBaloonを再描画する\r\n * \r\n * @param {index}\r\n *            i 削除対象plotの、plots内位置\r\n */\r\nHJN.Plot.CheckBox = function(i) {\r\n\t\"use strict\";\r\n\tHJN.Plot.List.splice(i,1);\t\t// checkされたplotを削除する\r\n\tHJN.Plot.Render();\t\t\t// Plotsを再描画する\r\n\tHJN.Plot.ShowBalloon();\t\t// グラフのBalloonを再描画する\r\n};\r\n/**\r\n * PlotのRadioボタン変更時呼出用関数<br>\r\n * radio選択時に下段グラフを更新する\r\n * \r\n * @param {index}\r\n *            i 選択されたplotの、plots内位置\r\n */\r\nHJN.Plot.CheckRadio = function(i) {\r\n\t\"use strict\";\r\n\t// HJN.Plot.Listにradioの状態を反映する\r\n\tHJN.Plot.List.forEach(function(e){ e.radio = false; });\r\n\tvar plot = HJN.Plot.List[i];\r\n\tplot.radio = true;\r\n\t// グラフの日時で、詳細グラフを再作成する\r\n\tHJN.init.SetDetailDateTime(plot.x);\t// 中心時刻に設定する\r\n\tdocument.getElementById(\"DetailRangePlus\").value = plot.rangePlus;\t// 幅を設定する\r\n\tdocument.getElementById(\"DetailRangeMinus\").value = plot.rangeMinus;\r\n\tdocument.getElementById(\"DetailRangeUnit\").value = plot.rangeUnit; // #48\r\n\tvar n = plot.tpsPlot ? plot.tpsPlot.n : plot.n; // #61\r\n\tHJN.chartD.createSeries( HJN.init.GetSliderRangedEtat(n) ); // #57\r\n\t// 下段データを登録描画する\r\n\tHJN.chartD.update(HJN.chartD.seriesSet, n); // #57\r\n\t// Balloonを再描画する\r\n\tHJN.Plot.ShowBalloon();\r\n};\r\n/**\r\n * Balloonを再描画する\r\n */\r\nHJN.Plot.ShowBalloon =function(){\r\n\t\"use strict\";\r\n\tHJN.chart.showBalloon();\r\n\tHJN.chartD.showBalloon();\r\n};\r\n\r\n/**\r\n * 著作権表記文字を取得する\r\n * \r\n * @return {String} str 著作権表記文字\r\n */\r\nHJN.init.Copyright=function(){\r\n    \"use strict\";\r\n    var str =   \"&copy; 2017 Junichiroh Hirose\\n\" +\r\n            \"https://github.com/hirosejn/HJN\";\r\n    return str;\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/HJN.graph.init.js\n// module id = 2\n// module chunks = 0","\"use strict\";\r\nimport {CreateSampleTatLogAndChartShow} from './HJN.graph.init.js';\r\nimport HJN from './HJN.graph.js';\r\n\r\n\r\n/** ie11 互換用 * */\r\nif(!Number.MAX_SAFE_INTEGER) Number.MAX_SAFE_INTEGER = 9007199254740991; // #59\r\nif(!Number.MIN_SAFE_INTEGER) Number.MIN_SAFE_INTEGER = -9007199254740991;\r\n\r\nif(!Uint8Array.prototype.indexOf){\r\n    Uint8Array.prototype.indexOf = function(target,index){\r\n        \"use strict\";\r\n        index = (index === undefined) ? 0 : index;  // #29\r\n        for(var i = index, last = index + 4096; i < last; i++){ // 暫定：1レコード4KBまでチェック\r\n            if(this[i] === target) return i; \r\n        }\r\n        return -1;\r\n    };\r\n}\r\nif (!Uint8Array.prototype.slice) {  // #29\r\n    Uint8Array.prototype.slice = function(begin, end) {\r\n        \"use strict\";\r\n        return this.subarray(begin, end);\r\n    };\r\n}\r\n// https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\r\nif (!Array.prototype.findIndex) {\r\n    Array.prototype.findIndex = function(predicate) {\r\n          \"use strict\";\r\n      if (this === null) throw new TypeError('Array.prototype.findIndex called on null or undefined');\r\n      if (typeof predicate !== 'function') throw new TypeError('predicate must be a function');\r\n      var list = Object(this), length = list.length >>> 0, thisArg = arguments[1], value;\r\n      for (var i = 0; i < length; i++) {\r\n        value = list[i];\r\n        if (predicate.call(thisArg, value, i, list)) return i;\r\n      }\r\n      return -1;\r\n    };\r\n  }\r\n// https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find\r\nif (!Array.prototype.find) {\r\n    Array.prototype.find = function(predicate) {\r\n        \"use strict\";\r\n      if (this === null) throw new TypeError('Array.prototype.find called on null or undefined');\r\n      if (typeof predicate !== 'function')  throw new TypeError('predicate must be a function');\r\n      var list = Object(this), length = list.length >>> 0, thisArg = arguments[1], value;\r\n      for (var i = 0; i < length; i++) {\r\n        value = list[i];\r\n        if (predicate.call(thisArg, value, i, list))  return value;\r\n      }\r\n      return undefined;\r\n    };\r\n  }\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc タッチパネル用ツール\r\n *            <p>\r\n *            参考 {@https://code.i-harness.com/ja/q/4f2389}\r\n * \r\n * @param {Number}\r\n *            [average=0.5] 平均値\r\n * @example var r = HJN_util.TouchPanel(10), val = r.exponential();\r\n */\r\nexport var TouchPanel = (function() { // #56\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function TouchPanel(average){\r\n        if(!(this instanceof TouchPanel)) return new TouchPanel(average);\r\n        this._average = average || 0.5;\r\n    }\r\n    /** @private */\r\n    \r\n    // public\r\n    /**\r\n     * タッチデバイスか判定する\r\n     * <p>\r\n     * クラスロード後、touchstart と mouosemove の初回のイベントがどちらが先に発生したかにより判定する 参考\r\n     * {@link https://lab.syncer.jp/Web/JavaScript/Snippet/44/}\r\n     * \r\n     * @memberof TouchPanel\r\n     * @return {String} 先に検出したイベントがマウス移動のとき false、以外のときtrue\r\n     * \r\n     */\r\n    TouchPanel.isTouchableDevice = function() {\r\n        Logger.ShowText([TouchPanel._deviceType]);\r\n        return true; // (TouchPanel._deviceType === \"MOUSE\") ? false : true;\r\n    }\r\n    // タッチデバイスか判定する（クラス定数）\r\n    TouchPanel._deviceType = \"SHIMULATED_TOUCH\";\r\n    function detectDeviceType(event) {\r\n        TouchPanel._deviceType = event.changedTouches ? \"TOUCH\" : \"MOUSE\" ;\r\n        document.removeEventListener(\"touchstart\", detectDeviceType) ;\r\n        document.removeEventListener(\"mousemove\", detectDeviceType) ;\r\n    }\r\n    document.addEventListener(\"touchstart\", detectDeviceType) ;\r\n    document.addEventListener(\"mousemove\", detectDeviceType) ;\r\n\r\n    /**\r\n     * タッチパネル操作をマウス操作に転送する\r\n     * <p>\r\n     * 参考 {@link https://code.i-harness.com/ja/q/4f2389}\r\n     * \r\n     * @memberof HJN_util.TouchPanel\r\n     * @param {Object}\r\n     *            element 対象dom要素\r\n     * @param {Boolean}\r\n     *            [isStopTouch=false] 元のタッチのデフォルトイベントを消すか（個別に登録されているリスナーには無関係）\r\n     * \r\n     * @example HJN_util.DispatchEventTouchToMouse();\r\n     */\r\n    TouchPanel.DispatchEventTouchToMouse = function(element, isStopTouch) { // #22\r\n        \"use strict\";\r\n        element.addEventListener(\"touchstart\", touchHandler, true);\r\n        element.addEventListener(\"touchmove\", touchHandler, true);\r\n        element.addEventListener(\"touchend\", touchHandler, true);\r\n        element.addEventListener(\"touchcancel\", touchHandler, true);\r\n        return;\r\n\r\n        function touchHandler(ev) {\r\n            var bIgnoreChilds = false;\r\n            if( !window.__TOUCH_TYPES ) {\r\n                window.__TOUCH_TYPES  = { touchstart:'mousedown', touchmove:'mousemove', touchend:'mouseup' };\r\n                window.__TOUCH_INPUTS = { INPUT: 1, TEXTAREA: 1, SELECT: 1, OPTION: 1,\r\n                                         'input':1,'textarea':1,'select':1,'option':1 };\r\n            }\r\n            var bSame = (ev.target == this);\r\n            if (bIgnoreChilds && !bSame) { return; }\r\n            // Get if object is already tested or input type\r\n            var b = (!bSame && ev.target.__ajqmeclk);\r\n            // allow multi-touch gestures to work\r\n            if (b === true || !ev.touches || ev.touches.length > 1 || !window.__TOUCH_TYPES[ev.type]) { return; }\r\n\r\n            var oEv = (!bSame && typeof b != 'boolean') ? ev.target.getAttribute('events') : false;\r\n            var b = (!bSame)\r\n                  ? (ev.target.__ajqmeclk = oEv\r\n                      ? (oEv['click'] || oEv['mousedown'] || oEv['mouseup'] || oEv['mousemove']) \r\n                      : false )\r\n                  :false;\r\n            // allow default clicks to work (and on inputs)\r\n            if (b || window.__TOUCH_INPUTS[ev.target.tagName]) { return; } \r\n\r\n            var touch = ev.changedTouches[0];\r\n            var tmpClientX = touch.clientX;\r\n            var tmpClientY = touch.clientY;\r\n            // クリックに変換するタップ誤差範囲\r\n            var CLICK_MARGIN = 20; // px\r\n            var CLICK_DELAY = 1000; // ms\r\n\r\n            // 前回touchstart時の座標と時刻が一定範囲内の時、dygraphがクリックと判定するよう補正する\r\n            if ((ev.type === \"touchstart\" || ev.type === \"touchend\") &&\r\n                    this.startTouch &&\r\n                    Math.abs(this.startTouch.x - touch.clientX) < CLICK_MARGIN && // タッチ補正幅(px)\r\n                    Math.abs(this.startTouch.y - touch.clientY) < CLICK_MARGIN &&\r\n                    +new Date() - this.startTouch.t < CLICK_DELAY) { // タッチ時間(ms)\r\n                // 位置補正\r\n                tmpClientX = this.startTouch.x;\r\n                tmpClientY = this.startTouch.y;\r\n            } else if (ev.type === \"touchstart\"){\r\n                // touchstart時の座標と時刻を退避する\r\n                this.startTouch = {x: touch.clientX, y: touch.clientY, t: +new Date()};\r\n            } else if (ev.type === \"touchend\") {  \r\n                // touchstart時の座標と時刻を初期化する\r\n                this.startTouch = {};\r\n            }\r\n            // マウスイベントを発生させる\r\n            var newEvent = document.createEvent(\"MouseEvent\");\r\n            newEvent.initMouseEvent(\r\n                window.__TOUCH_TYPES[ev.type],    // type\r\n                true,             // bubbles\r\n                true,             // cancelable\r\n                window,           // view\r\n                1,                // detail\r\n                touch.screenX,    // screenX スクリーンサイズ\r\n                touch.screenY,    // screenY\r\n                tmpClientX,       // clientX タッチ座標\r\n                tmpClientY,       // clientY\r\n                false,            // ctrlKey\r\n                false,            // altKey\r\n                false,            // shiftKey\r\n                false,            // metaKey\r\n                0,                // button\r\n                null              // relatedTarget\r\n              );\r\n            touch.target.dispatchEvent(newEvent);\r\n            \r\n            // タッチイベントを止める #22\r\n            if(isStopTouch) {\r\n                ev.stopImmediatePropagation();\r\n                ev.stopPropagation();\r\n                ev.preventDefault();\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n\r\n    /* new */\r\n    return TouchPanel;\r\n}());\r\n\r\n/**\r\n * @class\r\n * @classdesc ファイルをパースして読み込む\r\n *            <p>\r\n *            パース条件指定画面生成つき\r\n */\r\nexport var FileReader = (function() {\r\n    \"use strict\";\r\n    /** @static */\r\n    FileReader.prototype.__keyConfig = {};  // configで使用する値の定義\r\n\r\n    /** constructor */\r\n    function FileReader(){\r\n        if(!(this instanceof FileReader)) return new FileReader();\r\n\r\n        this.configId = \"_config_\" + \"File\"; // #53\r\n\r\n        // コンストラクタ内部関数：keyを定義する\r\n        var def = function(key, val, onFunc) {\r\n                    var _keyConf = FileReader.prototype.__keyConfig[key] = {};\r\n                    _keyConf.value = (val === undefined) ? key : val; // getValueByKeyの返却値（デフォルト：keyと同じ文字列）\r\n                    _keyConf.getValue = function () { return (val === undefined) ? key : val; };\r\n                    _keyConf.onFunc = onFunc || null;   // onイベント時に実行する処理（メニューのa属性などで利用）\r\n                    return key;\r\n                };\r\n        var v = function(key, fieldId) { // fieldIdの値を返却値とする(デフォルト： key+\".v\")\r\n                    var _keyConf = FileReader.prototype.__keyConfig[key] = {};\r\n                    _keyConf.value = key;           // getValueByKeyの返却値（デフォルト：keyと同じ文字列）\r\n                    _keyConf.getValue = function () {\r\n                            return Config(\"m\").getValueByKey(fieldId || key + \".v\"); // TODO:\r\n                                                                                                // m\r\n                                                                                                // の指定\r\n                        };\r\n                    return key;\r\n                };\r\n\r\n        // 名称と挙動の定義\r\n        var env = \"File\";\r\n        this[\"_config_\" + env] = Config(env) // #53\r\n            // File Format Config設定画面定義 #51\r\n            .name(\"NEWFILE\").label(null,\"Registered \") // #23\r\n                .radio(\"NEWDATA\", null, \"newly\", true)\r\n                .radio(\"ADDDATA\", null, \"additionally\").n()\r\n            .label(null,\"----- File format definition --------\").n()\r\n            .n(\"<br>\")\r\n            .name(\"LF\").label(null, \"[Line feed code]\").n()\r\n            .radio(v(\"LF_FIX\"), null, \"Fixed Length\")\r\n                .number(\"LF_FIX.v\",  null, \"byte\",\"80\",'style=\"width:60px;\"').n()\r\n            .radio(def(\"LF_WIN\",  13), null, \"Windows:CR(13)+LF(10)\", true).n()\r\n            .radio(def(\"LF_UNIX\", 10), null, \"Unix/Linux:LF(10)\").n()\r\n            .radio(def(\"LF_ZOS\",  15), null, \"zOS:NEL(15)\").n()\r\n            .radio(def(\"LF_MAC\",  13), null, \"Mac:CR(13)\").n()\r\n            .radio(v(\"LF_ELSE\"), null, \"other charcode\")\r\n                .number(\"LF_ELSE.v\", \"(\", \")\", \"10\", 'style=\"width:40px;\"').n()\r\n            .n(\"<br>\")\r\n            .name(\"SEP\").label(null,\"[CSV delimiter]\").n()\r\n            .radio(def(\"SEP_COMMA\", ','), null, \"comma\", true)\r\n            .radio(def(\"SEP_TAB\", '\\t'),   null,\"tab\")\r\n            .radio(v(\"SEP_ELSE\"), null, \"other\")\r\n                .text(\"SEP_ELSE.v\", '\"', '\"', ',', 'size=\"2\" placeholder=\",\"').n()\r\n            .n(\"<br>\")\r\n            .name(\"TIME\").label(null, \"[Timestamp field]\").n()\r\n            .number(\"TIME_COL\", \"\", \"th column of CSV\", \"1\", 'style=\"width:40px;\"').n()\r\n            .name(\"TIME_POS\")\r\n                .number(\"TIME_POS\", \"Position(byte): from\", null, \"1\", 'style=\"width:40px;\"')\r\n                .number(\"TIME_LEN\", \"length\", null, null, 'style=\"width:40px;\"').n()\r\n            .name(\"TIME_FORM\").label(null,\"Format:\").n()\r\n                .radio(\"TIME_FORM_YMD\", \"text\", null, true)\r\n                    .text(\"TIME_YMD\", null, null, null, 'size=\"23\" placeholder=\"YYYY/MM/DD hh.mm.ss.ppp\"').n()\r\n                .radio(\"TIME_FORM_TEXT\", \"(num)\", \"text\")\r\n                .radio(\"TIME_FORM_LONG\", null, \"long\").n()\r\n                .nDown()\r\n                .name(\"TIME_UNIT\").label(null, \"Units of numbers:\")\r\n                    .radio(def(\"TIME_UNIT_MS\", 1), null, \"msec\")\r\n                    .radio(def(\"TIME_UNIT_SEC\", 1000), null, \"sec\", true)\r\n                .nUp()\r\n            .n(\"<br>\")\r\n            .name(\"TAT\").label(null,\"[Turnaround time(TAT) field]\").n()\r\n            .number(\"TAT_COL\", \"\", \"th column of CSV\", \"2\", 'style=\"width:40px;\"').n()\r\n            .name(\"TAT_POS\")\r\n                .number(\"TAT_POS\", \"Position(byte): from\", null, \"1\", 'style=\"width:40px;\"')\r\n                .number(\"TAT_LEN\", \"length\", null, null, 'style=\"width:40px;\"').n()\r\n            .name(\"TAT_UNIT\").label(null, \"Units of numbers:\")\r\n                    .radio(def(\"TAT_UNIT_MS\", 1), null, \"msec\")\r\n                    .radio(def(\"TAT_UNIT_SEC\", 1000), null, \"sec\", true).n()\r\n            .name(\"TAT_FORM\").label(null,\"Format: \")\r\n                .radio(\"TAT_FORM_TEXT\", null, \"text\", true)\r\n                .radio(\"TAT_FORM_LONG\", null, \"long\").n()\r\n                .nDown()\r\n                .name(\"ENDIAN\").label(null, \"for long Endian: \")\r\n                    .radio(def(\"ENDIAN_LIL\", true), null, \"little\", true)\r\n                    .radio(def(\"ENDIAN_BIG\", false), null, \"big\")\r\n                .nUp()\r\n            .n(\"<br>\")\r\n        ;\r\n\r\n        // Filter Config用関数定義(radio用） #51\r\n        env = \"Filter\"\r\n        var func_F_SYNC_UPPER = function(){ HJN.Graph.DrawCallback(HJN.chart.graph); },\r\n            func_F_SYNC_DETAIL = function(){ HJN.Graph.DrawCallback(HJN.chartD.graph); };\r\n        // Filter Config設定画面定義 #51\r\n        this[\"_config_\" + env] = Config(env) // #53\r\n            .name(\"F_SYNC\").label(null,\"Sync\") // #50\r\n                .radio(\"F_SYNC_UPPER\", null, \"Upper\", false ,null, func_F_SYNC_UPPER) // #51\r\n                .radio(\"F_SYNC_DETAIL\", null, \"Detail\", false, null, func_F_SYNC_DETAIL)\r\n                .radio(\"F_ASYNC\", null, \"Async\", true).n()\r\n            .label(null,\"----- Data filter condition--------\").n()\r\n                .n(\"<br>\")\r\n                .name(\"F_TIME\").label(null, \"[Date filter]\").n()\r\n                .label(null,\"Include if end time is between\").n()\r\n                    .text(\"F_TIME_FROM\", null, null, null, 'size=\"23\" placeholder=\"YYYY/MM/DD hh.mm.ss.ppp\"')\r\n                    .label(null,\"and\").n()\r\n                    .text(\"F_TIME_TO\", null, null, null, 'size=\"23\" placeholder=\"YYYY/MM/DD hh.mm.ss.ppp\"').n()\r\n                .n(\"<br>\")\r\n                .name(\"F_TAT\").label(null,\"[Turnaround time(TAT) filter]\").n()\r\n                .label(null,\"Include if TAT is between\").n()\r\n                    .number(\"F_TAT_FROM\", null, null, \"0\", 'style=\"width:80px;\"')\r\n                    .number(\"F_TAT_TO\", \"and\", null, null, 'style=\"width:80px;\"').n()\r\n                .n(\"<br>\")\r\n                .name(\"F_TEXT\").label(null,\"[Text filter]\")\r\n                    .radio(\"F_TEXT_NON\", null, \"Don't use.\", true).n()\r\n                    .radio(\"F_TEXT_INCLUDE\", null, \"Include \")\r\n                    .radio(\"F_TEXT_EXCLUDE\", null, \"Exclude \").n()\r\n                    .number(\"F_TEXT_LEN\", \"if \", \" bytes\", null, 'style=\"width:40px;\"')\r\n                    .number(\"F_TEXT_POS\", \"from the \", \"th byte\", \"1\", 'style=\"width:40px;\"').n()\r\n                    .number(\"F_TEXT_COL\", \"from head of the\", \"th column of CSV\", \"3\", 'style=\"width:40px;\"').n()\r\n                    .text(\"F_TEXT_REG\", \"match the regular expression\", null, null, 'size=\"7\" placeholder=\".*\"').n()\r\n                .n(\"<br>\")\r\n        ;\r\n\r\n        // Simulator Config用関数定義(radio用） #53\r\n        env = \"Simulator\"\r\n        var func_S_SIMU_000 = function(){ CreateSampleTatLogAndChartShow(0); };\r\n        var func_S_SIMU_001 = function(){ CreateSampleTatLogAndChartShow(1); };\r\n        // Simulator Config設定画面定義 #53\r\n        this[\"_config_\" + env] = Config(env) // #53\r\n            .n(\"<br>\")\r\n            .label(null,\" If you change the scenario below,\").n()\r\n            .label(null,\"JSON is initialized and re-simulated.\").n()\r\n            .n(\"<br>\")\r\n            .name(\"S_SIMU\")\r\n                .radio(\"S_SIMU_000\", null, \r\n                          \"1 hour with table(B) lock.<br>\"\r\n                        + \"- online[100-500ms 2-5tps]<br>\" \r\n                        + \"- batch[2-5sec evry3min]\",\r\n                        true ,null, func_S_SIMU_000).n()\r\n                .radio(\"S_SIMU_001\", null, \"for test\", \r\n                        false ,null, func_S_SIMU_001).n()\r\n        ;\r\n    }\r\n\r\n    // class method\r\n    /**\r\n     * ファイルリーダのプロパティ管理インスタンスを取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @param {Object}\r\n     *            fileReader ファイルリーダ\r\n     * @param {String}\r\n     *            type プロパティ種別名（\"File\"|\"Filter\"|\"Simulator\")\r\n     * @return {Object} プロパティ\r\n     */\r\n    FileReader.Property = (function() {\r\n        \"use strict\";\r\n        /** @constructor */\r\n        function Property(fileReader, type){ \r\n            if(!(this instanceof Property)) return new Property(fileReader, type);\r\n            this._type = type || \"File\";\r\n            this._config     = fileReader[\"_config_\" + this._type];\r\n            this.__keyConfig = fileReader.__keyConfig;\r\n        }\r\n\r\n        // public\r\n        /**\r\n         * keyの値に指定されたvalue（なければkey値）を返却する\r\n         * \r\n         * @memberof HJN_util.FileReader.Property\r\n         * @param {String}\r\n         *            key Conginのキー値\r\n         */\r\n        Property.prototype.getValue = function(key) {\r\n            var cKey = this._config.getValueByKey(key);\r\n            if(!this.__keyConfig[cKey] || this.__keyConfig[cKey].value === undefined){\r\n                return cKey;    // valueが定義されていないとき、keyの設定値を返却\r\n            }else{\r\n                return this.__keyConfig[cKey].getValue(); // keyの設定値のvalueが定義されているとき\r\n            }\r\n        };\r\n        /**\r\n         * configに登録されているkey(prefix補填)の設定値を取得する\r\n         * \r\n         * @memberof HJN_util.FileReader.Property\r\n         */\r\n        Property.prototype.getValueByKey = function(key) {\r\n            return this._config.getValueByKey(key);\r\n        };\r\n    \r\n        /* new */\r\n        return Property;\r\n    }());\r\n    \r\n    /** @private */\r\n    //\r\n    // public\r\n\r\n\r\n    /**\r\n     * ファイルが新たに指定された時、eTatOriginalを再構築するか否（データを追加する）か\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @return {boolean} 再構築モードするときtrue、データを追加するときfalse\r\n     */\r\n    FileReader.prototype.isNewETAT = function() { // #23\r\n        return this.getValue(\"NEWFILE\") === \"NEWDATA\";\r\n    }\r\n    \r\n    /**\r\n     * 「ファイルから次の1レコードを取得するutil」 を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.createGetterOfLine = function(file) {\r\n\r\n        /**\r\n         * @class\r\n         * @classdesc ファイルから１レコード取得する\r\n         *            <p>\r\n         *            ファクトリのFileReaderが保持する改行コードを用いて、ファイルから１レコードを取得する\r\n         * \r\n         * @memberof HJN_util.FileReader\r\n         * @example try{ var getterOfLine =\r\n         *          HJN.chart.fileReader.createGetterOfLine(file), fileInfo;<br>\r\n         *          for(var i = 0; i < n; i++) { <br>\r\n         *          line = getterOfLine.next(); fileInfo += line.str + \"<BR>\"; }<br>\r\n         *          }catch (e) {<br>\r\n         *          console.error(\"改行コードの無いファイルは扱えません]%o\",e); }\r\n         */\r\n        function GetterOfLine(file, maxLength){ /* constructor */\r\n            if(!(this instanceof GetterOfLine)) return new GetterOfLine(file, maxLength);\r\n\r\n            this.file = file;\r\n            this.buf = new Uint8Array(file);\r\n            this.maxLength = maxLength || this.buf.length,\r\n            this.confLF = HJN.chart.fileReader.getValue(\"LF\");  // 改行コードor固定レコード長\r\n            this.from = 0;\r\n            this.to = 0;\r\n            this.len = 0;\r\n            this.line = {file: this.file, pos: 0, array: null, str: \"\", isEoF: false };\r\n        }\r\n        // public\r\n        /**\r\n         * 次の1レコードを取得する\r\n         * \r\n         * @name getValueByKey\r\n         * @memberof HJN_util.FileReader.GetterOfLine\r\n         */\r\n        if (HJN.chart.fileReader.getValueByKey(\"LF\") === \"LF_FIX\"){ // 固定長のとき\r\n            GetterOfLine.prototype.next = function () { // 次の1レコードを取得する\r\n                if(this.from >= this.maxLength ){   // ファイル末尾のとき\r\n                    this.line = {file: this.file, pos: this.maxLength, array: null, str: \"\", isEoF: true };\r\n                } else {\r\n                    this.len = Math.min(this.maxLength - this.from, this.confLF);\r\n                    var array = new Uint8Array(this.file, this.from, this.len);\r\n                    this.line = {\r\n                            file: this.file,\r\n                            pos: this.from,\r\n                            array: array,\r\n                            str: String.fromCharCode.apply(null, array),\r\n                            isEoF: false };\r\n                }\r\n                this.from += this.confLF;   // 次の行を指しておく\r\n                return this.line;\r\n            };\r\n        } else { // 可変長のとき\r\n            GetterOfLine.prototype.next = function () { // 次の1レコードを取得する\r\n                if(this.from >= this.maxLength ){   // ファイル末尾のとき\r\n                    this.line = {file: this.file, pos: this.maxLength, array: null, str: \"\", isEoF: true };\r\n                } else {\r\n                    this.to = this.buf.indexOf(this.confLF, this.from);\r\n                    if(this.to < 0) this.to = this.maxLength;   // 最終レコード（EOFで改行コードなし）のとき\r\n                    this.len = Math.min(this.to - this.from, 1024);\r\n                    var array = new Uint8Array(this.file, this.from, this.len);\r\n                    this.line = {\r\n                            file: this.file,\r\n                            pos: this.from,\r\n                            array: array,\r\n                            str: String.fromCharCode.apply(null, array),\r\n                            isEoF: false };\r\n                }\r\n                this.from = this.to + 2;    // 次の行を指しておく\r\n                return this.line;\r\n            };\r\n        }\r\n        return new GetterOfLine(file);\r\n    };\r\n    \r\n    \r\n    /**\r\n     * eTatのフィルター\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.createFilter = function() { // #34\r\n       /**\r\n         * @class\r\n         * @classdesc FileReaderのフィルター\r\n         *            <p>\r\n         *            ファクトリのFileReaderが保持するフィルタ条件を用いるフィルターを取得する\r\n         * \r\n         * @memberof HJN_util.FileReader\r\n         */\r\n        function Filter(){ /* constructor */\r\n            if(!(this instanceof Filter)) return new Filter();\r\n            this._fileReader = HJN.chart.fileReader; // #62\r\n            var c = FileReader.Property(this._fileReader, \"Filter\");\r\n\r\n            this.confF_TIME_FROM = S2D(c.getValue(\"F_TIME_FROM\"));    // 時刻(X)の最小値フィルター\r\n            this.confF_TIME_TO   = S2D(c.getValue(\"F_TIME_TO\"));      // 時刻(X)の最大値フィルター\r\n            this.confF_TIME = (isNaN(this.confF_TIME_FROM) && isNaN(this.confF_TIME_TO))\r\n                            ? false : true; // 時刻(x）フィルター指定の有無\r\n            \r\n            this.confF_TAT_FROM = c.getValue(\"F_TAT_FROM\") || 0; // 時間(Y)の最小値フィルター\r\n            this.confF_TAT_TO   = c.getValue(\"F_TAT_TO\") || Number.MAX_VALUE; // 時間(Y)の最大値フィルター\r\n            this.confF_TAT = (this.confF_TAT_FROM === 0 && this.confF_TAT_TO === Number.MAX_VALUE)\r\n                            ? false : true; // 時間(ｙ）フィルター指定の有無\r\n\r\n            this.confF_TEXT = c.getValue(\"F_TEXT\") || null; // テキストフィルタの条件（使用しない、Include,Exclude\r\n            if (this.confF_TEXT === \"F_TEXT_INCLUDE\") {\r\n                this.confF_TEXT = true;\r\n            } else if (this.confF_TEXT === \"F_TEXT_EXCLUDE\") {\r\n                this.confF_TEXT = false;\r\n            } else { // \"F_TEXT_NON\"\r\n                this.confF_TEXT = null;\r\n            }\r\n            \r\n            this.confF_TEXT_LEN = c.getValue(\"F_TEXT_LEN\") || null;    // フィルタテキストのバイト長\r\n            this.confF_TEXT_POS = c.getValue(\"F_TEXT_POS\") || 0;       // フィルタテキストの先頭バイト位置\r\n            this.confF_TEXT_COL = (c.getValue(\"F_TEXT_COL\") || 3) - 1; // フィルタテキストのカラム位置（先頭：０）\r\n            this.confF_TEXT_REG = new RegExp(c.getValue(\"F_TEXT_REG\") || \".*\");    // フィルタテキストの正規表現\r\n            \r\n            this.confF_IS = (this.confF_TIME === true \r\n                            || this.confF_TAT === true || this.confF_TEXT != null)\r\n                          ? true : false; // フィルタ指定の有無\r\n            \r\n            c = FileReader.Property(HJN.chart.fileReader, \"File\");\r\n            this.confF_SEP = c.getValue(\"SEP\").charCodeAt(0);\r\n        }\r\n        \r\n        // class method\r\n        // private\r\n        /**\r\n         * フィルター条件で判定する\r\n         * \r\n         * @memberof HJN_util.FileReader.Filter\r\n         */\r\n        Filter.prototype._isIn = function (e) {\r\n            // フィルタ指定が無いときフィルタしない（初期表示時に無駄な処理をしない）\r\n            if (this.confF_IS === false) return true;\r\n            // 時刻（ｘ）フィルタの判定 （conf指定なしのとき NaNとの比較となりfalseとなる）\r\n            if (e.x < this.confF_TIME_FROM || this.confF_TIME_TO < e.x ) {\r\n                return false;\r\n            }\r\n            // 時間（ｙ）フィルタの判定\r\n            if (e.y < this.confF_TAT_FROM || this.confF_TAT_TO < e.y){\r\n                return false;\r\n            }\r\n            // テキストフィルタの判定\r\n            if (this.confF_TEXT === null) {\r\n                return true; // フィルタ指定なし\r\n            }\r\n            var text = \"\";\r\n            if (e.pos === undefined) { // テキスト読み込みでないとき（自動生成データのとき）\r\n                // レコードを取得する #62\r\n                text = this._fileReader.getRecordAsText(e); // #61\r\n                // 指定正規表現に合致するか判定し、Include/Exclude指定に応じてリターンする\r\n                return this.confF_TEXT === this.confF_TEXT_REG.test(text);\r\n            } else { // ファイル読み込みのとき\r\n                // レコードを取得する\r\n                var arr = new Uint8Array(HJN.filesArrayBuffer[e.fileIdx+1], e.pos, e.len);\r\n                // CSVレコードの指定カラムを取得する(arr)\r\n                var colPos = 0;\r\n                for (var i = 0; i < this.confF_TEXT_COL; i++) {\r\n                    colPos = arr.indexOf(this.confF_SEP,colPos + 1);\r\n                }\r\n                if (colPos === -1){\r\n                    // 指定数のカラムが無い場合、Includeは処理対象外、Excludeは処理対象\r\n                    return !this.confF_TEXT;\r\n                }\r\n                var col = arr.slice(colPos, arr.length);\r\n                // 判定用文字列を取得する\r\n                text = col.slice(this.confF_TEXT_POS, this.confF_TEXT_POS + this.confF_TEXT_LEN);\r\n                // 指定正規表現に合致するか判定し、Include/Exclude指定に応じてリターンする\r\n                return this.confF_TEXT === this.confF_TEXT_REG.test(String.fromCharCode.apply(null, text));\r\n            }\r\n            return true;\r\n        };\r\n        \r\n        // public\r\n        /**\r\n         * eTatをフィルターする\r\n         * \r\n         * @memberof HJN_util.FileReader.Filter\r\n         * @param {eTat}\r\n         *            eTat フィルター処理対象のeTat\r\n         * @return {eTat} eTat フィルターされたeTat\r\n         * \r\n         */\r\n        Filter.prototype.filter = function (eTat) {\r\n            if (!eTat) return [];\r\n            return eTat.filter(this._isIn, this);\r\n        };\r\n\r\n        return new Filter();\r\n    };\r\n\r\n\r\n    /**\r\n     * 「１レコードからx:時刻（数値：ミリ秒）,y:Tat(数値：秒)を取得するutil」を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.createGetterOfXY = function() {\r\n\r\n        /**\r\n         * @class\r\n         * @classdesc １レコードをパースし、XとYをレコード取得する\r\n         *            <p>\r\n         *            ファクトリのFileReaderが保持するレコードフォーマット情報を用いて、ファイルの指定レコードからＸ(data)とＹ(value)を取得する\r\n         * \r\n         * @memberof HJN_util.FileReader\r\n         */\r\n        function GetterOfXY(){ /* constructor */\r\n            if(!(this instanceof GetterOfXY)) return new GetterOfXY();\r\n\r\n            var c = HJN.chart.fileReader;\r\n            this.configId = \"_config_\" + \"Filter\"; // #53\r\n            this.confSEP = c.getValue(\"SEP\");   // セパレータ\r\n            \r\n            this.confTIME_COL = c.getValue(\"TIME_COL\") - 1 || 0;    // 時刻(X)のカラム位置\r\n            this.confTIME_POS = (c.getValue(\"TIME_POS\") || 1) - 1;  // 時刻(X)の先頭バイト位置\r\n            this.confTIME_LEN = (c.getValue(\"TIME_LEN\") || 0);      // 時刻(X)のバイト長\r\n            this.confTIME_FORM = c.getValue(\"TIME_FORM\");           // 時刻(X)の文字フォーマット指定\r\n            this.confTIME_YMD = (c.getValue(\"TIME_YMD\") || \"YYYY/MM/DD hh.mm.ss.ppp\"); // #42\r\n                                                                    // 時刻(X)のYMDフォーマット\r\n            this.paseDateConf = {  // YYYY/MM/DD hh:mm:dd.ss.ppp #41\r\n                YYYY: this.confTIME_YMD.indexOf(\"YYYY\"),\r\n                MM: this.confTIME_YMD.indexOf(\"MM\"),\r\n                DD: this.confTIME_YMD.indexOf(\"DD\"),\r\n                hh: this.confTIME_YMD.indexOf(\"hh\"),\r\n                mm: this.confTIME_YMD.indexOf(\"mm\"),\r\n                ss: this.confTIME_YMD.indexOf(\"ss\"),\r\n                ppp: this.confTIME_YMD.indexOf(\"p\"),\r\n            };\r\n            this.isYMD = (this.confTIME_FORM === \"TIME_FORM_YMD\");\r\n            // 時刻(X)の数値単位(1or1000,YMDのとき1)\r\n            this.confTIME_UNIT = this.isYMD? 1 : (c.getValue(\"TIME_UNIT\") || 1);\r\n            \r\n            \r\n            this.confTAT_COL = c.getValue(\"TAT_COL\") - 1 || 1;      // 時間(Y)のカラム位置\r\n            this.confTAT_POS = (c.getValue(\"TAT_POS\") || 1) - 1;    // 時間(Y)の先頭バイト位置\r\n            this.confTAT_LEN = (c.getValue(\"TAT_LEN\") || 0);        // 時間(Y)のバイト長\r\n            this.confTAT_FORM = c.getValue(\"TAT_FORM\");             // 時間(Y)のフォーマット指定\r\n            this.confTAT_UNIT = c.getValue(\"TAT_UNIT\") || 1;        // 時間(Y)の数値単位(1/1000)\r\n            this.confENDIAN =  c.getValue(\"ENDIAN\");    // リトルエンディアンはtrue、ビッグエンディアンはfalse\r\n            this.isLittle = (function(){\r\n                // long用に4バイト取得する\r\n                var buf = new ArrayBuffer(4);               \r\n                // true:bufに、リトルエンディアン指定で1を書き込む\r\n                new DataView(buf).setUint32(0, 1, true);\r\n                // プラットフォームのエンディアンを使用するUint32Arrayと比較する\r\n                return (new Uint32Array(buf)[0] === 1);     \r\n            }());\r\n            \r\n            this.dateAndValue = {date: 0, value: 0, isError: false };\r\n        }\r\n        \r\n        // class method\r\n        /**\r\n         * 数字をパースして数値（ミリ秒）を取得する<br>\r\n         * 例：\"-1:1:1.2 -> -3661200 ms = -1*(3600+60+1+0.2)*1000\r\n         * \r\n         * @memberof HJN_util.FileReader.GetterOfXY\r\n         */\r\n        GetterOfXY.parseNumber = function (){ // str, unit,\r\n            var str = arguments[0],\r\n                unit = arguments[1];\r\n            if(!str) {console.log(\"data Y parse error\"); return 0; }\r\n            var ds = (str.indexOf(\":\") < 0) ? [str] : str.split(\":\"),   // #40\r\n                pm = (0 <= ds[0]) ? 1 : -1,\r\n                sec = 0.0;\r\n            for(var i = 0; i < ds.length; i++){\r\n                sec += pm * Math.abs(ds[i]) * Math.pow(60, ds.length - i - 1);\r\n            }\r\n            return sec * (unit || 1);\r\n        };\r\n\r\n        /**\r\n         * Long(4バイトバイナリ）数字をパースして数値（ミリ秒）を取得する\r\n         * \r\n         * @private\r\n         */\r\n        GetterOfXY.prototype._parseLong = function (arr){\r\n            if (4 <= arr.length ) { // Long(4byte)以上のときunsigned longとして処理する\r\n                // bufの先頭4byteを、指定バイトオーダ(endian)で、符号無32bit intとして参照\r\n                return (new DataView(arr.buffer, 0 , 4)).getUint32(0, this.confENDIAN);\r\n            } else {\r\n                // Long(4バイト）より短いとき、Byte単位に処理する\r\n                if (this.confENDIAN) { // little endianのとき\r\n                    return arr.reduceRight(function(a, b){ return a*256 + b; });\r\n                } else {               // big endianのとき\r\n                    return arr.reduce(function(a, b){ return a*256 + b; });\r\n                }\r\n            }\r\n        };\r\n\r\n        // public\r\n        /**\r\n         * レコードからXとYを取得する\r\n         * \r\n         * @memberof HJN_util.FileReader.GetterOfXY\r\n         */\r\n        GetterOfXY.prototype.parse = function (line) {\r\n            // セパレータでカラム分割する\r\n            var posMax = Math.max(this.confTIME_COL, this.confTAT_COL),\r\n                sep = this.confSEP.charCodeAt(0),   // 区切り文字のUint値\r\n                pos = 0,\r\n                nextPos = line.array.indexOf(sep),  // 行末（次の区切り文字位置）\r\n                x = 0,\r\n                y = -1;\r\n            for (var i = 0; i <= posMax; i++) {\r\n                if (i === this.confTIME_COL){\r\n                    // パース対象フィールドを切り出す\r\n                    var posX =  pos + this.confTIME_POS;\r\n                    var arrX = (0 < this.confTIME_LEN) \r\n                             ? line.array.slice(posX, posX + this.confTIME_LEN)\r\n                             : line.array.slice(posX, nextPos);\r\n                    var strX = \"\";\r\n                    // フィールドをパースする\r\n                    if (this.isYMD){    // 年月日時分秒の文字列のとき\r\n                        strX = String.fromCharCode.apply(null,arrX);\r\n                        x = S2D(strX, this.paseDateConf);\r\n                    } else if (this.confTIME_FORM === \"TIME_FORM_TEXT\"){    // テキスト数字のUNIX経過時間のとき\r\n                        strX = String.fromCharCode.apply(null,arrX);\r\n                        x = GetterOfXY.parseNumber(strX);\r\n                    } else{ // this.confTIME_FORM === \"TIME_FORM_LONG\"\r\n                            // longのUNIX経過時間のとき\r\n                        x = this._parseLong(arrX);\r\n                    }\r\n                    // 単位を補正する\r\n                    x *= this.confTIME_UNIT;\r\n                }\r\n                if (i === this.confTAT_COL){\r\n                    // パース対象フィールドを切り出す\r\n                    var posY =  pos + this.confTAT_POS;\r\n                    var arrY = (0 < this.confTAT_LEN) \r\n                             ? line.array.slice(posY, posY + this.confTAT_LEN)\r\n                             : line.array.slice(posY, nextPos);\r\n                    // フィールドをパースする\r\n                    if (this.confTAT_FORM === \"TAT_FORM_TEXT\"){\r\n                        // テキスト数字によるUNIX経過時間のとき\r\n                        var strY = String.fromCharCode.apply(null,arrY);\r\n                        y = GetterOfXY.parseNumber(strY);\r\n                    } else{\r\n                        // TAT_FORM_TEXT === \"TAT_FORM_LONG\" 数値によるUNIX経過時間のとき\r\n                        y = this._parseLong(arrY);\r\n                    }\r\n                    // 単位を補正する\r\n                    y *= this.confTAT_UNIT;\r\n                }\r\n                pos = nextPos + 1;\r\n                nextPos = line.array.indexOf(sep, pos);\r\n                if (nextPos < 0) nextPos = line.array.length;\r\n            }\r\n            \r\n            if(0 < x && 0 <= y){ // 正常時\r\n                return {x: x, y: y, isError: false };\r\n            } else {            // エラー時\r\n                return {x: x, y: y, isError: true };\r\n            }\r\n        };\r\n        \r\n        return new GetterOfXY();\r\n    };\r\n    \r\n    /**\r\n     * configに登録されているid(=prefix+key)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getObjctById = function(id) {\r\n        return this[this.configId].getObjctById(id);\r\n    };\r\n    /**\r\n     * configに登録されているkey(prefix補填)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getValueByKey = function(key) {\r\n        return this[this.configId].getValueByKey(key);\r\n    };\r\n    /**\r\n     * 設定値を保有するオブジェクトを返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getConfig = function() {\r\n        return this[this.configId]._config;\r\n    };\r\n    /**\r\n     * HTML（config設定用）テキストを返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getConfigHtml = function(type) {\r\n        type = type || \"File\";\r\n        return this[\"_config_\" + type].getHtml(); // #53\r\n    };\r\n    /**\r\n     * keyの値に指定された関数（なければ何もしない関数）を返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     */\r\n    FileReader.prototype.getFunction = function(key) {\r\n        var cKey = this[this.configId].getValueByKey(key);\r\n        if(!this.__keyConfig[cKey] || !this.__keyConfig[cKey].func){\r\n            return function(){};    // funcが定義されていないとき、何もしない関数を返却する\r\n        }else{\r\n            return this.__keyConfig[cKey].func; // keyの設定値のfuncが定義されているとき\r\n        }\r\n    };\r\n    /**\r\n     * eTatの指定行の編集元レコードを、テキストフォーマットに変換して取得する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @param {Object}\r\n     *            e eTat[n]：eTatの指定行\r\n     * @return {String} eTatの指定行の表示用テキスト\r\n     */\r\n    FileReader.prototype.getRecordAsText = function (e) { // #62 ADD\r\n        if (!e) return \"\";\r\n        var text = \"\";\r\n        if (typeof e.pos === \"undefined\") { // 生成データのとき\r\n            // 生成データをCSVのログデータとして編集する #61\r\n            text = D2S(e.x, \"yyyy/MM/dd hh:mm:ss.ppp\", true)\r\n                    + \", \" + e.y + \", \" + e.message; // #53\r\n            // 状態遷移履歴を追加する #62\r\n            if (e.history){\r\n                e.history.forEach(function(h){\r\n                    var timeStr = \"\";\r\n                    if (typeof(h.time) === \"number\") {\r\n                        timeStr = D2S(h.time, \"mm:ss.ppp\", true) + \" seq:\"\r\n                    }\r\n                    text += \" [\" + h.sequenceIdx + \":\" + h.status + \"]\" // #61\r\n                        + timeStr + D2S(h.sequenceTime, \"mm:ss.ppp\", true);\r\n                }, this);\r\n            }\r\n        } else { // ファイル読込のとき\r\n            // ファイルの該当行を Uint8Arrayに登録する\r\n            var buff = new Uint8Array(e.len + 2);\r\n            var file = HJN.filesArrayBuffer[e.fileIdx]; // #23\r\n            buff.set(new Uint8Array(file, e.pos,\r\n                    Math.min(e.len + 2, file.byteLength - e.pos)));\r\n            // ログデータを編集する\r\n            text = String.fromCharCode.apply(null, buff);\r\n        }\r\n        return text;\r\n        \r\n    };\r\n    /**\r\n     * keyの値に指定されたvalue（なければkey値）を返却する\r\n     * \r\n     * @memberof HJN_util.FileReader\r\n     * @param {String}\r\n     *            key Conginのキー値\r\n     */\r\n    FileReader.prototype.getValue = function(key) {\r\n        var cKey = this[this.configId].getValueByKey(key);\r\n        if(!this.__keyConfig[cKey] || this.__keyConfig[cKey].value === undefined){\r\n            return cKey;    // valueが定義されていないとき、keyの設定値を返却\r\n        }else{\r\n            return this.__keyConfig[cKey].getValue(); // keyの設定値のvalueが定義されているとき\r\n        }\r\n    };\r\n    \r\n    // new\r\n    return FileReader;\r\n}());\r\n\r\n\r\n/**\r\n * 日時文字列を指定フォーマットでパースして数値(ミリ秒単位）を取得する\r\n * \r\n * @param {String}\r\n *            str\r\n * @param {Object|String}\r\n *            [conf={YYYY: 0, MM: 5, DD: 8, hh: 11, mm: 14, ss: 17, ppp: 20}]\r\n *            Object指定のとき：年月日時分秒ミリ秒の先頭位置を示す構造体オブジェクト<br>\r\n *            String指定とき：フォーマットを示す文字列<br>\r\n *            デフォルト値は、\"YYYY/MM/DD hh:mm:ss.ppp\"相当\r\n * @return {Number} timeNum 日時（１ミリ秒を１とする数値、エラーのときNumber.NaN）\r\n */\r\nexport var S2D = function(str, conf){ // #34\r\n    \"use strict\";\r\n    if(!str) return Number.NaN;\r\n    \r\n    if(typeof(conf) === \"Object\"){\r\n        // confが\"Object\"のとき、指定された構造体オブジェクトの条件でパースする（最も高速な処理）\r\n        return parse(str, conf);\r\n    } else if (typeof(conf) === \"string\") {\r\n        // confが\"String\"のとき、指定された文字列フォーマットから構造体オブジェクトを作成し、パースする（準高速処理）\r\n        var config = {  // YYYY/MM/DD hh:mm:dd.ss.ppp #41\r\n                YYYY: conf.indexOf(\"YYYY\"),\r\n                MM: conf.indexOf(\"MM\"),\r\n                DD: conf.indexOf(\"DD\"),\r\n                hh: conf.indexOf(\"hh\"),\r\n                mm: conf.indexOf(\"mm\"),\r\n                ss: conf.indexOf(\"ss\"),\r\n                ppp: conf.indexOf(\"p\")};\r\n        return parse(str, config);\r\n    } else {\r\n        // confが指定されていないとき、デフォルト条件でパースする（汎用処理）\r\n        // デフォルトフォーマット：\"YYYY/MM/DD hh:mm:dd.ss.ppp\" #42\r\n        var config = {YYYY: 0, MM: 5, DD: 8, hh: 11, mm: 14, ss: 17, ppp: 20};\r\n        return parse(str, config);\r\n    }\r\n\r\n    // 内部関数：構造体オブジェクトで指定された条件でパースする\r\n    function parse(str, conf){\r\n        var y   = (0 <= conf.YYYY) ? parseInt( str.substr( conf.YYYY, 4), 10) : 1970,\r\n                m   = (0 <= conf.MM)   ? parseInt( str.substr( conf.MM, 2), 10) - 1 : 0, // デフォルト1月\r\n                // 1970/1/1だと時差でマイナスになることがあるので日付のデフォルトは2日\r\n                d   = (0 <= conf.DD)   ? parseInt( str.substr( conf.DD, 2), 10) : 2,\r\n                h   = (0 <= conf.hh)   ? parseInt( str.substr( conf.hh, 2), 10) : 0,\r\n                min = (0 <= conf.mm)   ? parseInt( str.substr( conf.mm, 2), 10) : 0,\r\n                sec = (0 <= conf.ss)   ? parseInt( str.substr( conf.ss, 2), 10) : 0,\r\n                // ミリ秒以下を指定すると丸め誤差が生じるため、秒以下のミリ秒は個別に加算\r\n                p   = (0 <= conf.ppp)  \r\n                    ? (\"0.\" + str.substr( conf.ppp).match(/[0-9]*/)[0]) * 1000.0 \r\n                    : 0;\r\n        return +(new Date( y, m, d, h, min, sec )) + p;  // #14\r\n    }\r\n};\r\n\r\n/**\r\n * 日時(Date)から、ローカル時刻に基づく、指定フォーマットの文字列を取得する\r\n * \r\n * @param {Date}\r\n *            dt Date型（内部実装はミリ秒単位）\r\n * @param {String}\r\n *            str フォーマット yyyy-MM-dd hh:mm:ss.ppp （戻り値で上書きされる）\r\n * @return {String} str 編集後文字列\r\n */\r\nexport var DateToString = function() {\r\n    \"use strict\";\r\n    var dt = arguments[0],  // arg0\r\n        str = arguments[1]; // arg1\r\n    // if (typeof(dt) === \"number\") dt = new Date(dt);\r\n    str = str.replace(/yyyy/, dt.getFullYear() );\r\n    str = str.replace(/MM/, ('0' + (dt.getMonth() + 1) ).slice(-2) );\r\n    str = str.replace(/dd/, ('0' + dt.getDate()).slice(-2) );\r\n    str = str.replace(/hh/, ('0' + dt.getHours()).slice(-2) );\r\n    str = str.replace(/mm/, ('0' + dt.getMinutes()).slice(-2) );\r\n    str = str.replace(/ss/, ('0' + dt.getSeconds()).slice(-2) );\r\n    str = str.replace(/ppp/,('00' + dt.getMilliseconds()).slice(-3) ); // #60\r\n    // str = str.replace(/ppp/,('00' + Math.floor(dt % 1000)).slice(-3) );\r\n\r\n    return str;\r\n};\r\n\r\n/**\r\n * 日時(ミリ秒：Ｘ軸用）から、時差補正のない、指定フォーマットの文字列を取得する\r\n * \r\n * @param {Number|Date}\r\n *            ds 時刻をUNIX経過時間（ミリ秒）で表した数値、もしくはDate(日付）\r\n * @param {String}\r\n *            [str=自動] フォーマット yyyy-MM-dd hh:mm:ss.ppp （戻り値で上書きされる）<br>\r\n *            自動のとき 日数+ hh:mm:ss.ppp 表示単位に至らない単位は表示しない、ミリ秒は分単位以下の時表示<br>\r\n *            例： 日数表示：\"1 02:03:04\",時表示\"02:03:04\" 分表示\"0:03:04.567\" 秒表示\"04.567\"\r\n * @param {Boolean}\r\n *            [isLocal=false] trueのとき時差補正をしない\r\n * @return {String} str 編集後文字列\r\n */\r\nexport var D2S = function(ds, str, isLocal){ // #60\r\n    \"use strict\";\r\n    var minus = \"\";\r\n    var ret = \"\";\r\n    if (ds < 0) {\r\n        minus = \"-\";\r\n        ds = -1 * ds;\r\n    }\r\n    var datetime = new Date(ds);\r\n    if (!isLocal) { // #60\r\n        datetime = new Date(+datetime + 60000 * datetime.getTimezoneOffset()); // 環境タイムゾーンの補正\r\n    }\r\n    if(str){ // フォーマット指定があるとき\r\n        ret = DateToString(datetime, str);\r\n    } else if (ds < 1000) { // 自動で1秒(1000)未満のとき\r\n        ret = \"0.\" + Math.round(ds);\r\n    } else if (ds < 60000) { // 自動で1分(1*60*1000)未満のとき\r\n        ret = DateToString(datetime, \"ss.ppp\");\r\n    } else if (ds < 3600000) { // 自動で1分以上、1時間(1*60*60*1000)未満のとき\r\n        ret = \"0:\" + DateToString(datetime, \"mm:ss.ppp\");\r\n    } else if (ds < 86400000) { // 自動で1時間以上、1日(1*24*60*60*1000)未満のとき\r\n        ret = DateToString(datetime, \"hh:mm:ss\");\r\n    } else { // 自動で1日以上のとき\r\n        ret = Math.floor(ds / 86400000) + \" \";\r\n        ret += DateToString(datetime, \"hh:mm:ss\");\r\n    }\r\n    return minus + ret;\r\n};\r\n\r\n/**\r\n * 数値(Ｙ軸用）から、誤差のない表示用文字列を取得する<br>\r\n * （hover、legendなどでY軸の値を使うときに使用する）\r\n * \r\n * @param {Number|Date}\r\n *            y 時刻をUNIX経過時間（ミリ秒）で表した数値、もしくはDate(日付）\r\n * @return {String} str 編集後文字列\r\n *         {@linkhttps://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat}\r\n */\r\nexport var N2S = function(y){\r\n    \"use strict\";\r\n    return Intl.NumberFormat('en-IN').format(y);\r\n};\r\n\r\n/**\r\n * 文字列を数値に変換する\r\n * \r\n * @param {String|Number}\r\n *            [str = sub] 計算式（日時分秒ミリ秒(d,h,mim,sec,ms)の文字は、ミリ秒に変換する）\r\n * @param {String|Number}\r\n *            [sub] 第一引数が指定されていない(undefined)ときの代用\r\n * @return {Number} n eval(str||sub)で取得した数値\r\n * \r\n */\r\nexport var S2N = function(str, sub){ // #53\r\n    \"use strict\";\r\n    var s = (typeof(str) !== \"undefined\") ? str : sub;\r\n    var h = 3600000; // 1時間（ミリ秒）\r\n    var min = 60000; // 1分（ミリ秒）\r\n    var sec =  1000; // 1秒（ミリ秒）\r\n    var ms =      1; // 1ミリ秒\r\n\r\n    return eval(s);\r\n};\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc キャッシュ\r\n *            <p>\r\n *            キャッシュを保持させるオブジェクト\r\n * @param {Number}\r\n *            [size=10] キャッシュ最大件数（未対応機能、設定は無視される）\r\n */\r\nexport var Cash = (function() {\r\n    \"use strict\";\r\n    /** constructor */\r\n    function Cash(size){\r\n        size = size || 10;  // TODO 未使用\r\n        if(!(this instanceof Cash)) return new Cash(size);\r\n        // インスタンス変数\r\n        this._cash = {};    // キャッシュ {data:, count:, lastTime:}\r\n        this._ranges = [];  // RangedCash用 {key: ,from: , to:, }\r\n        this._size = size;  // キャッシュ最大件数\r\n    }\r\n    \r\n    /* method */\r\n    /**\r\n     * 第一引数のargumentsを配列に変換する<br>\r\n     * （注：引数が１つ以上あることを前提）\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Number}\r\n     *            args 引数一覧（arguments）\r\n     * @return {Array} 引数の配列\r\n     */\r\n    Cash._arg2arr = function(args) {\r\n            return args.length === 1 ? [args[0]] : Array.apply(null, args);\r\n        };\r\n    /**\r\n     * cash判定Keyを取得する<br>\r\n     * （注：引数を'.'でつないだ文字列をkeyとするので、関数名長の上限を超える大きな配列は不可）\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Number}\r\n     *            args 引数一覧（argumentsオブジェクト）\r\n     * @return {String} キャッシュキー用の文字列\r\n     */\r\n    Cash._getKey = function(args) {\r\n            var argsArr = this._arg2arr(args);\r\n            return argsArr.reduce(function(a,b){return a+'.'+b; });\r\n        };\r\n        \r\n    /* private */\r\n\r\n    /* public */\r\n    /**\r\n     * cashオブジェクトを、cashが無いときはundefinedを返却する<br>\r\n     * cashヒットした場合、cashの使用回数をカウントアップする\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Object}\r\n     *            arguments 引数からキー文字列を定める\r\n     * @return {Number|undefined} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.getCash = function () {\r\n            if (arguments.length < 1) return undefined;\r\n            var args = Cash._arg2arr(arguments),\r\n                key = Cash._getKey(args);\r\n            if (key in this._cash){\r\n                var cash = this._cash[key];\r\n                cash.lastTime = new Date();\r\n                cash.count++;\r\n                return cash.data;\r\n            }else{\r\n                return undefined;\r\n            }\r\n        };\r\n    /**\r\n     * オブジェクトをcashする\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Object}\r\n     *            cashVal キャッシュするオブジェクト\r\n     * @param {Object}\r\n     *            arguments 第二引数以降の、引数からキー文字列を定める\r\n     * @return {Object} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.setCash = function () {\r\n            if (arguments.length < 2) return undefined;\r\n            var cashVal = arguments[0],\r\n                args = Cash._arg2arr(arguments).slice(1, arguments.length),\r\n                key = Cash._getKey(args);\r\n            this._cash[key] = {data: cashVal, count: 0, lastTime:new Date()};\r\n            return cashVal;\r\n        };\r\n\r\n    /**\r\n     * レンジキー(form,to)範囲内でキーマッチするcashを、cashが無いときはundefinedを返却する<br>\r\n     * キーは大小比較できる数値であることが前提\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Number}\r\n     *            from 抽出するキャッシュキー最小値\r\n     * @param {Number}\r\n     *            to 抽出するキャッシュキーの最大値\r\n     * @return {Object} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.getRangedCash = function (from, to) {\r\n            var range = this._ranges.find(function(e){\r\n                    return (e.from <= from && to <= e.to);\r\n                });\r\n            return (range !== undefined) ? this.getCash(range.from,range.to) : undefined;\r\n        };\r\n    /**\r\n     * レンジキー(from,to)指定でキャッシュする<br>\r\n     * キーは大小比較できること（通常、数値）、from-to期間内の既存のキャッシュは削除される\r\n     * \r\n     * @memberof HJN_util.Cash\r\n     * @param {Object}\r\n     *            cashVal キャッシュするオブジェクト\r\n     * @param {Number}\r\n     *            from 抽出するキャッシュキー最小値\r\n     * @param {Number}\r\n     *            to 抽出するキャッシュキーの最大値\r\n     * @return {Object} キャッシュデータ（デーがが無い場合は undefined)\r\n     */\r\n    Cash.prototype.setRangedCash = function (cashVal, from, to) {\r\n            if (arguments.length < 3) return undefined;\r\n            // 登録キー範囲に包含される既存キャッシュを削除する\r\n            var count = 0;\r\n            this._ranges = this._ranges.filter(function(e){\r\n                    if (from <= e.from && e.to <= to){\r\n                        // 登録キャッシュ範囲内のキャッシュを削除する\r\n                        count += this._cash[e.key].count;   // 削除分のカウンタ合算\r\n                        delete this._cash[e.key];\r\n                        return false;\r\n                    }else{  // 登録キャッシュの範囲外の一覧を返却する\r\n                        return true;\r\n                    }\r\n                }, this);\r\n            // 引数をキャッシュに登録する\r\n            var key = Cash._getKey([from, to]);\r\n            this._ranges.push( {from: from, to: to, key: key} );\r\n            this.setCash(cashVal, from, to);\r\n            this._cash[key].count= count + 1;   // 再作成時はカウンタ合算値\r\n            return cashVal;\r\n        };\r\n\r\n    // newの戻り値\r\n    return Cash;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 非同期化\r\n * \r\n * @param {function}\r\n *            global 非同期化して実行する関数\r\n *            <p>\r\n *            参考 {@link https://jsfiddle.net/kou/j73tLum4/8/}\r\n *            {@link https://gist.github.com/mathiasbynens/579895}\r\n *            {@link http://dbaron.org/log/20100309-faster-timeouts}\r\n */\r\nexport var setZeroTimeout = (function(global) {\r\n    \"use strict\";\r\n    var timeouts = [], \r\n        messageName = \"zero-timeout-message\";\r\n    function handleMessage(event) {\r\n        if (event.source === global && event.data === messageName) {\r\n            if (event.stopPropagation)  event.stopPropagation();\r\n            if (timeouts.length) timeouts.shift()();\r\n        }\r\n    }\r\n    if (global.postMessage) {\r\n        if (global.addEventListener) {\r\n            global.addEventListener(\"message\", handleMessage, true); \r\n        }else if (global.attachEvent) {\r\n            global.attachEvent(\"onmessage\", handleMessage); \r\n        }\r\n        return function (fn) { timeouts.push(fn); global.postMessage(messageName, \"*\"); };\r\n    } \r\n    else {\r\n        return function (fn) { setTimeout(fn, 0); }; \r\n    }\r\n}(window));\r\n\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc ロガー\r\n *            <p>\r\n *            モードに応じたログを出力する。画面ログ表示領域、コンソールログへの出力に対応\r\n * \r\n * @param {String}\r\n *            [mode=0] ログ出力モード\r\n */\r\nexport var Logger = (function() { // #27\r\n    \"use strict\";\r\n    /** @static */\r\n    Logger.prototype = {\r\n            _logText: [],\r\n            _timestamp : new Date(),\r\n            _logtime : new Date()\r\n        };\r\n    /** @constructor */\r\n    function Logger(mode){\r\n        if(!(this instanceof Logger)) return new Logger(mode);\r\n        this._mode = mode || 0;\r\n        // getKeyによりIndex作成関数を設定する\r\n    }\r\n    /**\r\n     * 一定時間（１分）経過後、最初に本メソッドが呼ばれたときのみログ出力する（ループ用）\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {Number}\r\n     *            i 参考番号<br>\r\n     *            経過時間内のループ回数などの表示に使用することを想定\r\n     * @param {String}\r\n     *            text ログ出力文字列\r\n     */\r\n    Logger.ByInterval = function(i, text) {\r\n        var ts = new Date(),\r\n            freq = 60000;   // 1分毎\r\n        if (freq < ts - Logger._logtime){\r\n            var t = D2S(ts, \"hh:mm:ss.ppp\"); // #60\r\n            console.log(t + \"[\" + i + \"]~~~~\" + text);\r\n            Logger._logtime = ts;\r\n        }\r\n    };\r\n    /**\r\n     * ログ出力： ログテキストを初期化する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            text ログ出力文字列\r\n     * @param {String}\r\n     *            [type] ログ区分（\"calc\"：計算用ログ、\"msg\"：メッセージのみ（タイムスタンプなし））\r\n     */\r\n    Logger.ShowLogTextInit=function(text, type) {\r\n        Logger._timestamp = new Date();\r\n        Logger._logText = [];\r\n        if(text) Logger.ShowLogText(text, type);\r\n    };\r\n    /**\r\n     * ログ出力： ログテキストをテキストアレイに追記し、表示する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            text ログ出力文字列\r\n     * @param {String}\r\n     *            [type] ログ区分（\"calc\"：計算用ログ、\"msg\"：メッセージのみ（タイムスタンプなし））\r\n     */\r\n    Logger.ShowLogText=function(text, type) {\r\n        if (type === \"calc\") return; // 集計時評価用ログ出力抑止\r\n        // \"msg\"指定のときは経過時間を取らずに、ログのみ出力する\r\n        if (type !== \"msg\"){\r\n            // 処理時間情報を追加する\r\n            var lastTimestamp = Logger._timestamp;\r\n            Logger._timestamp = new Date();\r\n            text = (Math.round( Logger._timestamp - lastTimestamp ) / 1000.0)\r\n                    + \"s \" + text;\r\n            // 数値のカンマ編集（小数部もカンマが入る）\r\n            text = text.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n            text = D2S(Logger._timestamp, \"hh:mm:ss.ppp     \")\r\n                    + text; // #60\r\n        }\r\n        Logger._logText.push(text);\r\n        Logger.ShowText(Logger._logText);\r\n        if(true) console.log(text);\r\n    };\r\n    /**\r\n     * 第一引数のテキストアレイの内容を#fileInfoのiframeに表示する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            textArray 出力するログ（配列１行がログ１件）\r\n     */\r\n    Logger.ShowText=function(textArray) {\r\n        var iHtmlBody = \"\";\r\n        for (var i = textArray.length - 1; 0 <= i; i--){\r\n            iHtmlBody += textArray[i] + \"<BR>\"; \r\n        }\r\n        Logger.ShowIHtmlBody('fileInfo',iHtmlBody);\r\n    };\r\n    /**\r\n     * 第一引数のID名のiframeに、第二引数のログ（HTML化）を表示する\r\n     * \r\n     * @memberof HJN_util.Logger\r\n     * @param {String}\r\n     *            elementId iframeのID名\r\n     * @param {String}\r\n     *            iHtmlBody ログ（HTML化）\r\n     */\r\n    Logger.ShowIHtmlBody=function(elementId, iHtmlBody){\r\n        var body = document.createElement('body');\r\n        body.innerHTML = \"\"\r\n            + \"<style>body{font-size: 10px; margin: 1px; }</style>\"\r\n            + \"<body id='iHtmlBody'>\" + iHtmlBody + \"</body>\";\r\n        var iframe = document.getElementById(elementId);\r\n        iframe.contentDocument.body = body;\r\n    };\r\n    \r\n    // newの戻り値\r\n    return Logger;\r\n}());\r\n\r\n/**\r\n * 指定されたtextareaを使って、クリップボードにコピーする\r\n * \r\n * @param {Object}\r\n *            elementID textareaのID名\r\n */\r\nexport var CopyToClipboard = function(elementId) { // #61\r\n    \"usestrict\";\r\n    // textareaをクリップボードにコピーする\r\n    var area = document.getElementById(elementId);\r\n    area.select();\r\n    document.execCommand(\"copy\");\r\n}\r\n\r\n/**\r\n * @class\r\n * @classdesc 配列二分木検索\r\n * \r\n * @param {Number}\r\n *            val 検索する値\r\n * @param {Array}\r\n *            arr 検索対象の配列\r\n * @param {Function}\r\n *            [func=function(val){return val.valueOf();}] 配列要素に対して、値を取得する関数\r\n * @param {Index}\r\n *            [low=0] 配列の検査範囲の下限\r\n * @param {Index}\r\n *            [high=arr.length-1] 配列の下限検査範囲の上限\r\n * @param {Boolean}\r\n *            [isEqual=false] 完全一致しないときのリターン値：trueのとき-1、falseのとき値との差が最も少ない位置\r\n * @example i=HJN_util.binarySearch(x,arrXY,function(e){return e.x;});\r\n */\r\nexport var binarySearch = function (val, arr, func, low, high, isEqual) {\r\n    \"use strict\";\r\n    func = func || function(val){ return val.valueOf(); };\r\n    low = low || 0;\r\n    high = high || arr.length - 1;\r\n    isEqual = isEqual || false;\r\n    var middle,\r\n        valMiddle;\r\n    while( low <= high ){\r\n        middle = Math.floor(low + high) / 2 | 0;\r\n        valMiddle = func(arr[middle]);\r\n        if(valMiddle === val) return middle;\r\n        else if(val < valMiddle) high = middle - 1;\r\n        else low = middle + 1;\r\n    }\r\n    // 値が完全一致する要素がなかった場合の戻り値を編集する\r\n    if (isEqual){\r\n        return -1;  // 完全一致指定のとき(-1)をリターンする\r\n    } else {        // 完全一致指定でないとき、値との差が最も少ない位置をリターンする #46\r\n        // low,middle,high を補正する\r\n        low = Math.min(Math.max(0, low), arr.length - 1);\r\n        high = Math.max(0, Math.min(high, arr.length - 1));\r\n        middle = Math.max(low, Math.min(middle, high));\r\n        if(high < low){\r\n            var tmp = high;\r\n            high= low;\r\n            low = tmp;\r\n        }\r\n        // low,middle,high のうち、値との差が最も少ない位置をリターンする\r\n        if(func(arr[middle]) < val){\r\n            if (val - func(arr[middle]) < func(arr[high]) - val) {\r\n                return middle;\r\n            } else {\r\n                return high;\r\n            }\r\n        }else{\r\n            if (func(arr[high]) <= val && val < func(arr[middle])){\r\n                return high;\r\n            } else if (val - func(arr[low]) < func(arr[middle]) - val){\r\n                return low;\r\n            } else {\r\n                return middle;\r\n            }\r\n        }\r\n        return -1;  // 指定範囲外\r\n    }\r\n};\r\n\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 期間指定eTat取得用Map\r\n *            <p>\r\n *            指定期間に動いているeTatの一覧を、高速に取得するマップ\r\n * \r\n * @param {ETAT}\r\n *            eTat インデックスを追加するETAT\r\n * @example eTat.tatMap = new HJN_util.MappedETat(eTat); var trans =\r\n *          eTat.tatMap.search(x, x, 1000);\r\n */\r\nexport var MappedETat = (function() { // #18\r\n    \"use strict\";\r\n    /** @static */\r\n    MappedETat.prototype = {\r\n            _abscissa: [],\r\n            _conf :[{ms:      10, step:5, label:\"0_10ms_\"},\r\n                    {ms:      50, step:2, label:\"1_50ms_\"},\r\n                    {ms:     100, step:5, label:\"2_100ms_\"},\r\n                    {ms:     500, step:2, label:\"3_500ms_\"},\r\n                    {ms:    1000, step:5, label:\"4_1sec_\"},\r\n                    {ms:    5000, step:4, label:\"5_5sec_\"},\r\n                    {ms:   20000, step:3, label:\"6_20sec_\"},\r\n                    {ms:   60000, step:5, label:\"7_1min_\"},\r\n                    {ms:  300000, step:4, label:\"8_5min_\"},\r\n                    {ms: 1200000, step:3, label:\"9_20min_\"},\r\n                    {ms: 3600000, step:6, label:\"10_1h_\"},\r\n                    {ms:21600000, step:4, label:\"11_6h_\"},\r\n                    {ms:Number.MAX_VALUE, step:1, label:\"12_overDay_\"}] // 最後はstep:１\r\n        };\r\n    /** @constructor */\r\n    function MappedETat(eTat){\r\n        if(!(this instanceof MappedETat)) return new MappedETat(eTat);\r\n        // MappedArrayを作成する\r\n        this._tatMap = new MappedArray(eTat, this._getKey, true);\r\n    }\r\n\r\n    /** @private */\r\n    MappedETat.prototype._row = function(label, step) {return label + step;};\r\n\r\n    /** @private */\r\n    // MapKey取得関数\r\n    MappedETat.prototype._getKey = function(e, i) {        // MapedMap用Key配列関数\r\n        var start = e.x - e.y,      // x,yはミリ秒\r\n            end = e.x,\r\n            _conf = MappedETat.prototype._conf,\r\n            _row = MappedETat.prototype._row,\r\n            term = _conf[0].ms,\r\n            rowLv = 0;\r\n        if(Math.ceil(end / term) - 1 === Math.floor(start / term)){ // 最小BOX\r\n            return [_row(_conf[0].label, 0),\r\n                    (Math.ceil(e.x / _conf[0].ms) - 1) * _conf[0].ms];\r\n        }\r\n        for (i = 1; i < _conf.length; i++) {                // 最下位から上に評価\r\n            term = _conf[i].ms;\r\n            if(Math.floor(end / term) === Math.floor(start / term) \r\n                    || end - start < term){                      // 上位BOXを起点\r\n                term = _conf[i-1].ms;   // ひとつ下位のBOX期間（下から評価したので二段下となることは無い\r\n                rowLv = Math.floor(end / term) - Math.floor(start / term);\r\n                return [_row(_conf[i-1].label, rowLv),\r\n                        (Math.ceil(e.x / _conf[i-1].ms) - 1) * _conf[i-1].ms];\r\n            }\r\n        }\r\n        return \"error\";\r\n    };\r\n\r\n    // static メンバーの設定\r\n    // _confから_abscissa(横軸）を生成する\r\n    var c = MappedETat.prototype._conf,\r\n        e2 = c[c.length - 2],\r\n        \r\n        e  = c[c.length - 1];\r\n    MappedETat.prototype._abscissa.push(\r\n            {label: MappedETat.prototype._row(e.label, e.step), ms: e.ms ,i: 1,\r\n                step: e.step, from: e2.ms * e2.step, to: e.ms} );   // 末尾を先頭に追加\r\n    for (var j = c.length - 1; 0 <= j; j--){    // 降順に追加\r\n        e = c[j];\r\n        for (var i = e.step; 0 < i; i--){ // #39\r\n            MappedETat.prototype._abscissa.push(\r\n                    {label: MappedETat.prototype._row(e.label, i), ms: e.ms, i: i, \r\n                                step: e.step, from: e.ms * i, to: e.ms * (i + 1)} );\r\n        }\r\n    }\r\n    MappedETat.prototype._abscissa.push( \r\n            {label: MappedETat.prototype._row(c[0].label, 0), ms: c[0].ms, i: 0,\r\n                step: 0, from: 0, to: c[0].ms} );   // 先頭を末尾に追加\r\n\r\n    \r\n    // public\r\n    /**\r\n     * 指定期間に動いているeTatを検索する\r\n     * \r\n     * @memberof HJN_util.MappedETat\r\n     * @parm {Number} from 指定期間(from)\r\n     * @parm {Number} [to=from] 指定期間(to)\r\n     * @parm {Number} [cap] cap件数となったら抽出を終了する（指定なしの時：全件）\r\n     * @return {ETAT} eTatArr 指定期間内のeTat配列\r\n     */\r\n    MappedETat.prototype.search = function (from, to, cap) {\r\n        to = to || from;    // to省略時は時刻指定(from=to)\r\n        cap = cap || Number.MAX_VALUE; // 指定なしの時：全件\r\n        var map = this._tatMap._map,\r\n            eTat = this._tatMap._arr,\r\n            abscissa = this._abscissa,\r\n            eTatArr = [],\r\n            start = 0,\r\n            end = 0;\r\n        // 検索対象のBOX一覧を生成する\r\n        abscissa.forEach(function(e){   // 存在しうる横軸のうち（tatが長時間の方から）\r\n            if (map[e.label]){          // 横軸が存在するものについて\r\n                var boxNum = e.i + Math.ceil(to / e.ms) - Math.floor(from / e.ms), // #45\r\n                    key = Math.floor(from / e.ms) * e.ms;\r\n                // 存在しうるKey値を終了時間が早い方から集計する\r\n                for(var j = 0; j <= boxNum; j++){\r\n                    // Key値が存在するものみが集計対象\r\n                    if (map[e.label][key]){ \r\n                        // かつ、Keyが持っている要素(eTatへの参照:k)が集計対象\r\n                        map[e.label][key].forEach(function(k){\r\n                            // かつ、from-toの期間に動いている要素(eTatのindex)が集計対象\r\n                            start = eTat[k].x - eTat[k].y;\r\n                            end   = eTat[k].x;\r\n                            if((start <= to) && (from <= end)){\r\n                                // かつ、戻り値の配列要素数がcap未満の場合が集計対象\r\n                                if(eTatArr.length < cap){\r\n                                    // 集計対象条件に合致する要素を、戻り値の配列に追加する\r\n                                    eTatArr = eTatArr.concat(eTat[k]);\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    key += e.ms;    // 次のKey値\r\n                }\r\n            }\r\n        }, this);\r\n        return eTatArr;\r\n    };\r\n    \r\n    // newの戻り値\r\n    return MappedETat;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 配列位置逆引きマップ\r\n *            <p>\r\n *            配列に格納されているオブジェクトのx値で、配列位置を高速検索するマップ<br>\r\n *            指定関数の戻り値(x)をキーとするマップを作成する\r\n *            <p>\r\n *            参考 {@link http://qiita.com/alucky0707/items/10052866719ba5c5f5d7}\r\n * \r\n * @param {Array}\r\n *            arr インデクスをつける対象の配列\r\n * @param {String|function}\r\n *            [getKey=\"\"] MappedArrayのKey値の取得方法\r\n *            <p>\r\n *            String指定のとき（デフォルト\"\"を含む）、配列要素の値(valueOf)\r\n *            <p>\r\n *            注： 0,00,\"0\"は同値、1,01,\"1\"は同値 Stringのとき、 配列要素が持つ指定要素の値\r\n *            <p>\r\n *            functionのとき、配列要素に指定関数を適用した戻り値\r\n *            <p>\r\n *            関数の引数：(配列要素オブジェクト、配列のインデックス、作成中のMappedArrayへの参照）\r\n * @param {Boolean}\r\n *            [isMappedMap] getKeyが2段Map用の配列を返却する\r\n * @return {object} Index arrに対するインデックス（連想配列名で検索）\r\n * @example _tatMap = new HJN_util.MappedArray(eTat, this._getKey, true);\r\n */\r\nexport var MappedArray = (function() {    // #18\r\n    /** @constructor */\r\n    function MappedArray(arr, getKey, isMappedMap){\r\n        if(!(this instanceof MappedArray)) return new MappedArray();\r\n        this._arr = arr;\r\n        // getKeyによりIndex作成関数を設定する\r\n        if(!getKey || getKey === \"\"){\r\n            // getKey指定がないとき、配列の値\r\n            this._getKey = function(e){ return e.valueOf(); };\r\n        }else if ((typeof(getKey) === \"string\") && (getKey !== \"\")){    // #29\r\n            // getKeyが文字列のとき、配列内オブジェクトのgetKey要素の値\r\n            this._getKey = function(e){ return e[getKey]; };\r\n        }else if (typeof(getKey) === \"function\" ){  // #29\r\n            // getKeyが関数のとき、配列内オブジェクトに関数を適用した戻り値\r\n            this._getKey = getKey;\r\n        }else{  // 以外のときエラーログを出力し、getKey指定なしと同様、配列の値\r\n            console.error(\"MappedArrayの第二引数エラー：[ %o ]を無視します \",getKey);\r\n            this._getKey = function(e){ return e.valueOf(); };\r\n        }\r\n        // MappedArrayを作成する\r\n        if(!isMappedMap){\r\n            this._createMappedArray();          \r\n        }else{\r\n            this._createMappedMappedArray();\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    MappedArray.prototype._createMappedArray = function() {\r\n        var key = \"\"; \r\n        this._map = this._arr.reduce(function(m, a, i) {\r\n            key = this._getKey.call(a, a, i, m);\r\n            m[key] = (m[key] || []).concat(i);\r\n            return m;\r\n        }, {});\r\n    };\r\n    /** @private */\r\n    MappedArray.prototype._createMappedMappedArray = function() {\r\n        var keys = [],\r\n            key = \"\",\r\n            mKey = \"\",\r\n            _getKey = this._getKey;\r\n        this._map = this._arr.reduce(function(m, a, i) {\r\n            keys = _getKey.call(a, a, i, m);\r\n            key = keys[1] || \"error\";\r\n            mKey = keys[0] || \"error\";\r\n            if(m[mKey] === undefined) m[mKey] = {};\r\n            m[mKey][key] = (m[mKey][key] || []).concat(i);\r\n            return m;\r\n        }, {});\r\n    };\r\n\r\n    // public\r\n    /**\r\n     * 値の存在チェック\r\n     * \r\n     * @meexport var N_util.MappedArray\r\n     */\r\n    MappedArray.prototype.has = function (keyValue) {\r\n        return keyValue in this._map;\r\n    };\r\n    /**\r\n     * 該当位置を配列で返す\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.indexes = function (keyValue) {\r\n        return this._map[keyValue] || [];\r\n    };\r\n    /**\r\n     * 該当する要素を配列で返す\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.search = function (keyValue) {    \r\n        var arr = this._arr;\r\n        return this.indexes(keyValue).reduce(function(m, i) {\r\n            m.push(arr[i]);\r\n            return m;\r\n        }, []);\r\n    };\r\n    /**\r\n     * Array.prototype.indexOf() 同等\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.indexOf = function (keyValue) {\r\n        var idxArr = this._map[keyValue],\r\n            i = idxArr ? idxArr.length : -1;\r\n        return (0 < i) ? idxArr[0] : -1;\r\n    };\r\n    /**\r\n     * Array.prototype.lastIndexOf() 同等\r\n     * \r\n     * @memberof HJN_util.MappedArray\r\n     */\r\n    MappedArray.prototype.lastIndexOf = function (keyValue) {\r\n        var idxArr = this._map[keyValue],\r\n            i = idxArr ? idxArr.length : -1;\r\n        return (0 < i) ? idxArr[i-1] : -1;\r\n    };\r\n    \r\n    return MappedArray;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 定数設定機能（設定HTML作成機能付き）\r\n *            <p>\r\n *            日時、TATフォーマット指定機能追加用に作成\r\n * \r\n * @param {String}\r\n *            [prefix=''] 定数の名前空間を一位に指定する文字列、指定しない場合グローバル\r\n * @param {String}\r\n *            [ol='ol'] インデント(.nDown() .nUp())に使うHTMLタグ\r\n * @example this._config = HJN_util.Config(\"m\") // config設定画面定義\r\n *          .label(null,\"------\").n() // ラベルを表示し、改行\r\n *          .name(\"ENDIAN\").label(null,\"[endian(long field)]\") //key:ENDIAN\r\n *          .radio(def(\"ENDIAN_LIL\", true), null, \"little\", true) //表示ラベルと選択時設定値\r\n *          .radio(def(\"ENDIAN_BIG\", false), null, \"big\");\r\n */\r\nexport var Config = (function() { // #24\r\n    \"use strict\";\r\n    /** @static */\r\n    Config.prototype.__config = {};   // config設定コンテナ\r\n    Config.prototype.__config._onFunctions = {}; // 関数登録用\r\n\r\n    /** @constructor */\r\n    function Config(prefix, ol){ \r\n        if(!(this instanceof Config)) return new Config(prefix, ol);\r\n        this._pre = (prefix || '') + \".\"; // 各フィールド、要素の名称のプレフィックス(区切り文字\".\")\r\n        this._ols = ol ? '<' + ol + '>' : '<ol>';   // リストに使用する要素（初期値 ol )\r\n        this._ole = ol ? '</' + ol + '>' : '</ol>';\r\n        this._html = this._ols; // config設定画面のHtml\r\n        this._nameHtml = '';    // HTMLタグの name属性指定\r\n        this._name = '';        // radioのConfig.get用\r\n// this._onFunctions = {}; // onイベント時に呼び出す関数の設定用 #51\r\n    }\r\n\r\n    /**\r\n     * HTML要素の値が変更した時に、configに当該要素を登録する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.on = function(t) {\r\n        if (t.type === \"radio\") { // radioのとき、nameに対して、選択されたキー値（idからprefixを削除した値）を登録\r\n            this.prototype.__config[t.name] = t.id.substr(t.id.indexOf(\".\") + 1);\r\n            // on呼出し関数が登録されているとき、登録関数を呼び出す #51\r\n            var func = Config.GetConfig().getFunctionById(t.id); // #59\r\n            if(typeof(func) === \"function\") func();\r\n        }else if (t.type === \"number\") {    // numberのとき、idに対する、value(入力値)を数値として登録\r\n            this.prototype.__config[t.id] = +t.value;\r\n        } else {                            // textのとき、idに対する、value(入力値)を登録\r\n            this.prototype.__config[t.id] = t.value;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Configリポジトリ管理インスタンスを取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.GetConfig = function(prefix) { // #59\r\n        return new Config(prefix);\r\n    }\r\n    \r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    /**\r\n     * configに登録されているid(=prefix+key)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getObjctById = function(id) {\r\n        return this.__config[id];\r\n    };\r\n    /**\r\n     * configに登録されているkey(prefix補填)の関数を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getFunctionByKey = function(key) { // #59\r\n        return Config.prototype.__config\r\n                ._onFunctions[this._pre + this.getValueByKey(key)];\r\n    };\r\n    /**\r\n     * configの指定Idに登録されている関数を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getFunctionById = function(id) { // #53\r\n        return Config.prototype.__config._onFunctions[id];\r\n    };\r\n    /**\r\n     * configに登録されているkey(prefix補填)の設定値を取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getValueByKey = function(key) { \r\n        return this.getObjctById(this._pre + key);\r\n    };\r\n    /**\r\n     * config設定用HTMLテキストを取得する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.getHtml = function() { \r\n        return this._html + this._ole;\r\n    };\r\n    /**\r\n     * keyに値を設定する\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.set = function(key, val) { \r\n        this.value[this._pre + key] = val;\r\n    };\r\n    \r\n    // config作成用 メソッド\r\n    /**\r\n     * 定義＆設定画面作成用機能： 改行\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.n = function (str) {\r\n        str = str || \"\";\r\n        this._html += this._ole + str + this._ols;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ネスト一つ下げ\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.nDown = function () {\r\n        this._html += this._ols;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ネスト一つ上げ\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.nUp = function () {\r\n        this._html += this._ole;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： nameを変更する（radio等の先頭で指定）\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.name = function (str) {\r\n        this._nameHtml = str ? 'name=\"' + this._pre + str + '\" ' : '';\r\n        this._name = str;\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ラベル要素(prefix+keyで関連付けるformのid属性となる)\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.label = function (key, str, attribute) {\r\n        this._html += '<label ' +\r\n                        (key ? 'for=\"' + this._pre + key + '\" ': '') +\r\n                        (attribute || '') + '>' +\r\n                        (str || '') +\r\n                        '</label>\\n'; // #51\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ラベル付された各種入力フォーム\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.labeledForm = function (key, type, typedAttribute,\r\n                                pLabel, sLabel, val, attribute, check, cssClass) {\r\n        var classStr = (cssClass) ? ' class=\"' + cssClass + '\"' : ''; // #51\r\n        this._html += '<label' + classStr + '>' + // #51\r\n                    (pLabel ? pLabel : '') +\r\n                    '<input type=\"' +type + '\" ' +\r\n                        (typedAttribute || '') + \r\n                        this._nameHtml +\r\n                        'id=\"' + this._pre + key + '\" '+        // idがユニークになるようkeyにprefixを付与\r\n                        'onchange=\"HJN_util.Config.on(this);\" ' +\r\n                        (val ? 'value=\"' + val + '\" ' : '') +   // val は、キー値のまま\r\n                        (attribute || '') + \r\n                        (check ? ' checked=\"checked;\"' : '') +\r\n                    '>' +\r\n                    (sLabel ? sLabel : '') +\r\n                    '</label>\\n'; // #51\r\n        // デフォルト指定があるとき configにデフォルト値を設定する\r\n        if (type === \"radio\" && check) {    // radioのとき、nameに対して、選択状態のkeyを登録\r\n            Config.prototype.__config[this._pre + this._name] = key;\r\n        } else if (type === \"number\") { // numberradioのとき、keyに対する、val(入力値)を数値として登録\r\n            Config.prototype.__config[this._pre + key] = +val;\r\n        } else {    // text,numberのとき、keyに対する、val(入力値)を登録\r\n            Config.prototype.__config[this._pre + key] = val;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： テキストボックス要素で、文字列を設定\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.number = function (key, pLabel, sLabel, val, attribute) {\r\n        Config.prototype.labeledForm.call(this, key, \"number\", \"\", \r\n                                pLabel, sLabel, val, attribute);\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： テキストボックス要素で、数値を設定\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.text = function (key, pLabel, sLabel, val, attribute) {\r\n        Config.prototype.labeledForm.call(this, key, \"text\", \"\", \r\n                                pLabel, sLabel, val, attribute);\r\n        return this;\r\n    };\r\n    /**\r\n     * 定義＆設定画面作成用機能： ラジオボタン要素で、選択肢の一つを設定\r\n     * \r\n     * @memberof HJN_util.Config\r\n     */\r\n    Config.prototype.radio = function (key, pLabel, sLabel, check, attribute, func) {\r\n        Config.prototype.labeledForm.call(this, key, \"radio\", (check ? 'checked=\"checked;\"' : ''),\r\n                                pLabel, sLabel, \"\", attribute, check, \"hjnLabel4Input\");\r\n        // 関数登録指定時、attributeを関数名として、指定関数を登録する #51\r\n        if (func){\r\n            Config.prototype.__config._onFunctions[this._pre + key] = func;\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /* new */\r\n    return Config;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc Heap ヒープ(二分ヒープ)\r\n *            <p>\r\n *            最小値(最大値)を効率よく取り出すことができるデータ構造\r\n *            <p>\r\n *            参考 {@link http://d.hatena.ne.jp/otaks/20121220/1355993039}\r\n * \r\n * @param {Function}\r\n *            [func=function(obj){ return +obj; }]\r\n *            pushで登録するオブジェクトからヒープの大小比較判定値を取り出す関数\r\n * @param {Function}\r\n *            [delFunc=function(obj){ return obj; }] 削除対象ノードを特定する関数<br>\r\n *            「delの引数オブジェクト === delFunc(heapのノードのオブジェクト)」 で判定する\r\n * \r\n * @example h = HJN_util.Heap( function(obj){ return +obj; } );<br>\r\n *          h.push(\"12.34\") // データを登録する ;<br>\r\n *          h.push(0.12) // ;<br>\r\n *          h.pop() // => 0.12 最小値のオブジェクトを取り出す ;<br>\r\n *          h.pop() // => \"12.34\" ;<br>\r\n *          h.top() // =>undefined 最小値のオブジェクト ;<br>\r\n *          h.size() // =>0 登録オブジェクト数\r\n */\r\nexport var Heap = (function() { // #55\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function Heap(func, delFunc){ \r\n        if(!(this instanceof Heap)) return new Heap(func, delFunc);\r\n        \r\n        this._func = (typeof(func) === \"function\")\r\n                ? func\r\n                : function(node){\r\n                    if (typeof(node.val) === \"undefined\") { return node }\r\n                    else { return node.val}; \r\n                  };\r\n        this._delFunc = (typeof(delFunc) === \"function\")\r\n                ? delFunc\r\n                : function(node){\r\n                    if(typeof(node.obj) === \"undefined\"){ return node }\r\n                    else { return node.obj};\r\n                  };\r\n        this._heap = []; // Heap構造体（大小比較数値用）\r\n    }\r\n\r\n    //\r\n    /**\r\n     * upheap：root方向へheapを再構築する\r\n     * \r\n     * @private\r\n     * @param {Number}\r\n     *            k 起点の_heap配列位置\r\n     */\r\n    Heap.prototype._upHeap = function(k) {\r\n        // 指定位置のオブジェクトとその値の控えを取る\r\n        var obj = this._heap[k];\r\n        var val = this._func(obj);\r\n        while( 0 < k ) {\r\n            // 親ノードの配列位置を求める\r\n            var p = Math.floor( (k - 1) / 2 );\r\n            // 逆転していなければ処理終了\r\n            if( this._func(this._heap[p]) <= val ) break;\r\n            // 親ノードと処理対象を入れ替える\r\n            this._heap[k] = this._heap[p];\r\n            this._heap[p] = obj;\r\n            k = p;\r\n        }\r\n    };\r\n    /**\r\n     * downheap：reaf方向へheapを再構築する\r\n     * \r\n     * @private\r\n     * @param {Number}\r\n     *            k 起点の_heap配列位置\r\n     */\r\n    Heap.prototype._downHeap = function(k) {\r\n        // 指定位置のオブジェクトとその値を控えを取る\r\n        var obj = this._heap[k];\r\n        var val = this._func(obj);\r\n        var size = this._heap.length;\r\n        // 子ノードが無くなるまで繰り返す\r\n        while( k * 2 + 1 < size) {\r\n            var a = k * 2 + 1;  // 子ノード（左）\r\n            var b = a + 1;      // 子ノード（右）\r\n            // aが大小比較対象先となる小さい子ノードを指すようにする\r\n            if( b < size && this._func(this._heap[a]) > this._func(this._heap[b]) ) a = b;\r\n            // 逆転していなければ処理終了\r\n            if( val < this._func(this._heap[a]) ) break;\r\n            // 子ノード（比較対象）と処理対象を入れ替える\r\n            this._heap[k] = this._heap[a];\r\n            this._heap[a] = obj;\r\n            k = a;\r\n        }\r\n    };\r\n    /**\r\n     * _heapのk番目を削除し、_heapを再構築する\r\n     * \r\n     * @private\r\n     * @param {Number}\r\n     *            k 起点の_heap配列位置\r\n     * @return {object|undefined} 削除したオブジェクト（削除対象が無いとき undefined）\r\n     */\r\n    Heap.prototype._del = function(k) {\r\n        if (this._heap.length <= k) return undefined; // ヒープ外を指定したとき\r\n\r\n        var ret = this._heap[k]; // 削除したオブジェクト\r\n        var obj = this._heap.pop(); // 末尾ノードを取り出す\r\n        var size = this._heap.length;\r\n        if (k === size) return ret; // 末尾ノードを削除したとき再構築不要\r\n\r\n        this._heap[k] = obj; // 末尾ノードを指定位置に移動する\r\n        if (size === 1) return ret; // ヒープが１個のとき、再構築不要\r\n\r\n        // upHeapの判定\r\n        var val = this._func(obj); // 末尾ノードにあったオブジェクトの値\r\n        var p = Math.floor( (k - 1) / 2 );\r\n        if (0 < k && val < this._func(this._heap[p])) {\r\n            // 親ノードより小さいときupheapする\r\n            this._upHeap(k);\r\n        } else {\r\n            var a = k * 2 + 1;  // 子ノード（左）\r\n            var b = a + 1;      // 子ノード（右）\r\n            if (a < size) { // 子ノードがあるとき（末端の枝葉でないとき）のみdownHeapする\r\n                // aに、子ノードの小さい方のノードを設定する\r\n                if( b < size && (this._func(this._heap[a]) > this._func(this._heap[b])) ) a = b;\r\n                // 自分より小さい子ノードがあるとき、downheapする\r\n                if( this._func(this._heap[a]) < val ) this._downHeap(k);\r\n            }\r\n        }\r\n        return ret;\r\n    };\r\n    // public\r\n    /**\r\n     * データを追加する\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @param {Object}\r\n     *            obj 登録オブジェクト\r\n     */\r\n    Heap.prototype.push = function(obj) {\r\n        // 末尾に追加し、upHeapする\r\n        this._heap.push(obj);\r\n        this._upHeap(this._heap.length - 1);\r\n        if (this._deletable) {\r\n            this._deleteMap = {};\r\n        }\r\n    };\r\n    /**\r\n     * 最小値のデータを取り出す\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @return {Object|undefined} 最小値\r\n     */\r\n    Heap.prototype.pop = function() {\r\n        // 先頭ノードを戻り値用に退避する\r\n        var ret = this._heap[0];\r\n        // 末尾ノードを退避し削除する\r\n        var obj = this._heap.pop();\r\n        if(0 < this._heap.length){\r\n            // ヒープが空でないとき、末尾ノードを先頭に移動し、downHeapする\r\n            this._heap[0] = obj;\r\n            this._downHeap(0);\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * 指定データを削除する\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @param {Object}\r\n     *            obj 削除対象と同一オブジェクト(=== で判定)\r\n     * @return {Object|undefined} 削除したオブジェクト（undefined：合致するオブジェクトが無いとき）\r\n     */\r\n    Heap.prototype.del = function(obj) { // #59\r\n        // 削除対象オブジェクトのHeap配列位置を取得する\r\n        var k = -1;\r\n        if (this._heap.some(find, this)){\r\n            // 合致するオブジェクトのノードを削除し、合致ノードをリターンする\r\n            return this._del(k);\r\n        }\r\n        // 合致するオブジェクトが無いとき\r\n        return undefined;\r\n        \r\n        function find(e, i) {\r\n            if(this._delFunc(e) === obj){\r\n                k = i;\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * 最小値を返却する（登録データは変更しない）\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @return {Object|undefined} 最小値\r\n     */\r\n    Heap.prototype.top = function() {\r\n        return this._heap[0];\r\n    };\r\n    /**\r\n     * ヒープのサイズを返却する\r\n     * \r\n     * @memberof HJN_util.Heap\r\n     * @return {Number} ヒープサイズ（0以上）\r\n     */\r\n    Heap.prototype.size = function() {\r\n        return this._heap.length;\r\n    };\r\n    \r\n    /* new */\r\n    return Heap;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc Random 乱数取得\r\n *            <p>\r\n *            ある事象の単位時間あたりの発生回数がポアソン分布, その発生間隔が指数分布に従う<br>\r\n *            M/M/1モデルは、到着がポアソン過程となり、(したがって到着間隔は指数分布に従う)、サービス時間が指数分布に従う\r\n *            <p>\r\n *            参考 {@link http://www.ishikawa-lab.com/montecarlo/4shou.html}\r\n * \r\n * @param {Number}\r\n *            [average=0.5] 平均値\r\n * @example var r = HJN_util.Random(10), val = r.exponential();\r\n */\r\nexport var Random = (function() { // #56\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function Random(average){\r\n        if(!(this instanceof Random)) return new Random(average);\r\n        this._average = average || 0.5;\r\n    }\r\n\r\n    /** @private */\r\n    \r\n    // public\r\n    /**\r\n     * 一様分布となる乱数を返却する\r\n     * \r\n     * @memberof HJN_util.Random\r\n     * @param {Number}\r\n     *            [average=this._average] 平均値<br>\r\n     * @return {Number} 乱数\r\n     */\r\n    Random.prototype.uniform = function(average) {\r\n        average = average || this._average;\r\n        return  2.0 * average * Math.random();\r\n    };\r\n\r\n    /**\r\n     * 指数分布となる乱数を返却する(lambda = 1/average)\r\n     * \r\n     * @memberof HJN_util.Random\r\n     * @param {Number}\r\n     *            [average=this._average] 平均値=1/λ、分散=1/(λ^2)<br>\r\n     * @return {Number} 乱数\r\n     */\r\n    Random.prototype.exponential = function(average) {\r\n        average = average || this._average;\r\n        return (-1.0 * average) * Math.log(1.0 - Math.random());\r\n    };\r\n    \r\n    /**\r\n     * ポアソン分布となる乱数を返却する(lambda = average)\r\n     * \r\n     * @memberof HJN_util.Random\r\n     * @param {Number}\r\n     *            [average=this._average] 平均値=分散=λ<br>\r\n     * @return {Number} 乱数\r\n     */\r\n    Random.prototype.poisson = function(average) {\r\n        var lambda = average || this._average;\r\n        var xp = Math.random();\r\n        var k = 0;\r\n        while (xp >= Math.exp(-lambda)) {\r\n            xp = xp * Math.random();\r\n            k = k + 1;\r\n        }\r\n        return (k);\r\n    };\r\n    \r\n    /* new */\r\n    return Random;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想システム(VirtualSystem)\r\n *            <p>\r\n *            Web3層(Web-AP-DB)をシミュレートしたWebのTATログ生成する\r\n *            <p>\r\n *            Webサーバ<br>\r\n *            最大スレッド数： Apache 2.4 [MaxClients = 1024]<br>\r\n *            JBossトランザクションタイムアウト [default-timeout = 300 秒]<br>\r\n *            キュー長 ： Apache 2.4 ListenBackLog (511) + Linux\r\n *            tcp_max_syn_backlog(769=1024*0.75+1)、タイムアウトなし<br>\r\n *            APサーバ<br>\r\n *            最大スレッド数(maxThreads)<br>\r\n *            JBossトランザクションタイムアウト [default-timeout=300 秒]<br>\r\n *            DBサーバ 最大コネクション数(max_connections)\r\n * \r\n * @param {Number}\r\n *            [start = 1970/01/02 00:00:00)] シミュレート開始時刻（UNIX日付（ミリ秒））\r\n * @param {Number}\r\n *            [end = startの24時間後] シミュレート終了時刻（UNIX日付（ミリ秒））\r\n * @param {String}\r\n *            [resourcesJson] リソース指定JSONテキスト\r\n * @param {Boolean}\r\n *            [log=false] 詳細ログ出力有無\r\n * @example sim = HJN_util.VirtualSystem()\r\n */\r\nexport var VirtualSystem = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function VirtualSystem(start, end, resourcesJson, log){\r\n        if(!(this instanceof VirtualSystem)){\r\n            return new VirtualSystem(start, end, resourcesJson, log);\r\n        }\r\n        if (!resourcesJson) {\r\n            var jsonText =  '['\r\n                +   '{\"type\" :\"WEB\",\"thread\":1024,\"timeout\":300000, \"q\":1280, \"qWait\":0},'\r\n                +   '{\"type\" :\"AP\", \"thread\":20,  \"timeout\":300000, \"q\":1280, \"qWait\":0},'\r\n                +   '{\"type\" :\"DB\", \"thread\":2,   \"timeout\": 10000, \"q\":1000, \"qWait\":10000}'\r\n                + ']';\r\n            resourcesJson = JSON.parse(jsonText);\r\n        }\r\n        this.eTat = []; // シミュレートにより生成するTATログ出力先\r\n        var _resources = resourcesJson;\r\n        this._log = log ? log : false; // #53\r\n        this._start = +start || new Date(1970, 1, 2);   // シミュレート開始時刻\r\n        this._end = end || this._start + 24*60*60*1000; // シミュレート終了時刻（デフォルト：24時間後)\r\n        this._simulator = Heap(                // イベント予約スケジュール（ヒープ）\r\n                function(obj){ return obj.getTime(); }, // プライオリティの判定\r\n                function(obj){ return obj; });  // 削除対象の判定 #61\r\n        this._now = 0; // シミュレーション時の現在時刻\r\n        // リソースを設定する\r\n        this._resources = {}\r\n        for (var i = 0; i < _resources.length; i++) {\r\n            var e = _resources[i];\r\n            e.log = e.log ? e.log : this._log; // #53\r\n            this._resources[e.type] = VirtualResource(this, // #61\r\n                    e.type, e.thread, e.timeout, e.q, e.qWait, e.log);\r\n        };\r\n        VirtualSystem.debug = this; // ★\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    /**\r\n     * 仮想クライアントをスケジューラに登録する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {String}\r\n     *            [userName = \"Default_\"] ログに出力するユーザ名\r\n     * @param {String}\r\n     *            [message = \"\"] ログの末尾に出力するデータ\r\n     * @param {Number}\r\n     *            [num = 3] 期間内に生成する仮想クライアントの数\r\n     * @param {Number}\r\n     *            [start = HJN_util.S2D(\"1970/01/02 00:00:00\")]\r\n     *            仮想クライアント生成開始時刻（UNIX時刻の数値、ミリ秒）\r\n     * @param {Number}\r\n     *            [end = startの0.1秒後] 仮想アプリケーション強制終了時刻（UNIX時刻の数値、ミリ秒）\r\n     * @param {Object}\r\n     *            model 仮想クライアントが実行する取引モデル\r\n     */\r\n    VirtualSystem.prototype.setClients = function(userName, message, num, start, end, model) {\r\n        userName = userName || \"Default_\";\r\n        message = message || \"\";\r\n        num = (typeof(num) === \"number\") ? num : 1; // #61\r\n        start = +start || S2D(\"1970/01/02 00:00:00\");\r\n        end = +end || start + 100;\r\n        // baseModelが指定されているとき、modelに展開する\r\n        if (model.baseModel){\r\n            model = VirtualSystem.getModel(\r\n                model.baseModel.holds, model.baseModel.tatMin, model.baseModel.tat,\r\n                model.sequence, model.times, model.thinkTimeMin, model.thinkTime);\r\n        }\r\n        // modelにmessageを設定する\r\n        if (typeof(model.message) === \"string\") {\r\n            model.message += message;\r\n        } else {\r\n            model.message = message;\r\n        }\r\n        // 仮想APを登録する\r\n        var checkStart = start;\r\n        var r = Random((end - start) / num);\r\n        var t = start;\r\n        for (var i = 0; i < num; i++) {\r\n            // 仮想APを作成する\r\n            var vApp = VirtualApp(userName + i, model);\r\n            // 仮想APに開始時刻（指数分布）を設定し、登録する\r\n            t += Math.round(r.exponential());\r\n            this.setEvent(vApp.start(t));\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * イベントをスケジューラに登録する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {Object}\r\n     *            event 仮想クライアントもしくは仮想リソースのイベント\r\n     */\r\n    VirtualSystem.prototype.setEvent = function(event) {\r\n        this._simulator.push(event);\r\n    }\r\n\r\n    /**\r\n     * スケジューラからイベントを削除する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {Object}\r\n     *            event 仮想クライアントもしくは仮想リソースのイベント\r\n     */\r\n    VirtualSystem.prototype.removeEvent = function(event) {\r\n        this._simulator.del(event);\r\n    }\r\n\r\n    /**\r\n     * シミュレーションを実行する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @return {eTat} シミュレート実行結果のログ（this.eTat）\r\n     */\r\n    VirtualSystem.prototype.execute = function() {\r\n        var event, events;\r\n        // 処理対象がなくなるか、シミュレート終了時刻になるまでシミュレートする\r\n        while(0 < this._simulator.size() &&\r\n                this._simulator.top().getTime() <= this._end ) {\r\n            // 次にイベントを迎える仮想APを取り出し、「次の処理」をシミュレートする\r\n            event = this._simulator.pop();\r\n            this._now = event.getTime(); // #59\r\n            events = event.next(this);\r\n            // 「次の処理」のシミュレートに伴い発生したイベントを、スケジュールする\r\n            while (events.length) {\r\n                this._simulator.push(events.pop());\r\n            }\r\n        }\r\n        // シミュレーション終了後処理（処理中のvAppを強制終了する） #59\r\n        while(0 < this._simulator.size()){\r\n            event = this._simulator.pop();\r\n            if (event._finish) {\r\n                event._finish(this, \"N_EoS\", \"\", this._end);\r\n            }\r\n        }\r\n        // シミュレーション終了後処理（リソース開放待ちのvAppを強制終了する） #59\r\n        for (var key in this._resources){\r\n            this._resources[key]._finish(this, \"N_EoS\", \"\", this._end);\r\n        }\r\n        \r\n        return this.eTat;\r\n    };\r\n\r\n    /**\r\n     * リソースを取得する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {String}\r\n     *            [name = \"unlimited\"] 仮想リソース名\r\n     * @return {Object} 仮想リソース（登録されていないときは、新たにholdCapacity=1の仮想リソースを登録）\r\n     */\r\n    VirtualSystem.prototype.getResouce = function(name) {\r\n        if (typeof(this._resources[name]) === \"undefined\") {\r\n            this._resources[name] = VirtualResource(this, name);\r\n        }\r\n        return this._resources[name];\r\n    };\r\n\r\n    /**\r\n     * シミュレーション現在時刻（処理中のイベントの時刻）を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @return {Number} イベント時刻（UNIX時刻：ミリ秒）\r\n     */\r\n    VirtualSystem.prototype.getTime = function() {\r\n        return this._now;\r\n    };\r\n\r\n\r\n    // Static Method\r\n    /**\r\n     * 取引モデルを取得する（ユーティリティ）\r\n     * \r\n     * @memberof HJN_util.VirtualSystem\r\n     * @param {Array}\r\n     *            [baseModel = []] 使用リソースの一覧[\"WEB\",\"AP\",\"DB\"]\r\n     * @param {Number}\r\n     *            [tat = 5] 使用リソースの平均取得時間＆平均開放時間\r\n     * @param {Number}\r\n     *            [tatMin = 2] 使用リソースの最小取得時間＆最小開放時間\r\n     * @param {Array}\r\n     *            [sequence = []] イベントシーケンス\r\n     * @param {Number}\r\n     *            [times = undefined] イベントシーケンスの繰り返し回数（未指定時:1)\r\n     * @param {Number}\r\n     *            [thinkTime= undefined] イベントシーケンス終了時に再実行する場合の平均再開時間（未指定時:500)\r\n     * @param {Number}\r\n     *            [thinkTimeMin = undefined]\r\n     *            イベントシーケンス終了時に再実行する場合の最小再開時間（未指定時:thinkTimeと同じ）\r\n     * @param {String}\r\n     *            [message = \"\"] 自動生成ログの末尾に追加する文字列\r\n     * @return {Object} 取引モデル\r\n     */\r\n    VirtualSystem.getModel = function(baseModel, tatMin, tat, sequence, times, thinkTimeMin, thinkTime, message) {\r\n        baseModel = baseModel || [];\r\n        tatMin = tatMin || 2;\r\n        tat = tat || 5;\r\n        message = message || \"\";\r\n        sequence = sequence || [\r\n                {tatMin:6,   tat:15,  note:\"Req\",     hold:\"DB\",    free:[]},\r\n                {tatMin:70,  tat:100, note:\"selectA\", hold:\"TBL_A\", free:[\"TBL_A\"]},\r\n                {tatMin:150, tat:200, note:\"updateB\", hold:\"TBL_B\", free:[]},\r\n                {tatMin:30,   tat:50,  note:\"Res\",     hold:\"\",      free:[\"TBL_B\",\"DB\"]}\r\n            ];\r\n        var model = {sequence :[], message : message}; // 戻り値\r\n        if (typeof(times) === \"number\") model.times = times;\r\n        if (typeof(thinkTimeMin) === \"number\") model.thinkTimeMin = thinkTimeMin;\r\n        if (typeof(thinkTime) === \"number\") model.thinkTime = thinkTime;\r\n        \r\n        // baseModelを返却用シーケンスに展開する\r\n        baseModel.forEach( function(e) {\r\n            model.sequence.push({hold:e, tatMin:tatMin, tat:tat, free:[]});\r\n        });\r\n        // 指定シーケンスを返却用シーケンスに追加する\r\n        model.sequence = model.sequence.concat(sequence);\r\n\r\n        // 返却用シーケンスに、holdingを追加するとともにシーケンス終了時未開放リソースを取得する\r\n        var resources = []; // #61\r\n        var holding = []; // #59\r\n        model.sequence.forEach( function(tran) { // #61\r\n            // tatMinがtatより大きいとき、tatをtatMin一定とする #59\r\n            if (tran.tat < tran.tatMin) tran.tat = tran.tatMin;\r\n            // 処理開始時にholdしているリソース一覧をholdingに登録する #59\r\n            tran.holding = [];\r\n            resources.forEach(function(r) {tran.holding.push(r)});\r\n            // 未開放リソース一覧を更新する\r\n            if (typeof(tran.hold) !== \"undefined\" && tran.hold !== \"\") {\r\n                resources.push(tran.hold);                \r\n            }\r\n            if (tran.free) {\r\n                tran.free.forEach( function(free){\r\n                    resources.some( function(r, i){\r\n                        if (r == free) {\r\n                            resources.splice(i,1);\r\n                            return true;\r\n                        }\r\n                    })    \r\n                })\r\n            }\r\n        }, this);\r\n        // シーケンス終了時未開放リソースが残っているとき、返却用シーケンスにリソース開放処理を追加する\r\n        if (0 < resources.length){\r\n            model.sequence = model.sequence.concat(\r\n                    [{hold: \"\", tatMin: tatMin * baseModel.length, tat: tat * baseModel.length,\r\n                        free: resources.reverse()}]);\r\n        }\r\n        return model;\r\n    };\r\n    \r\n    /* new */\r\n    return VirtualSystem;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想アプリケーション(VirtualApp)\r\n * \r\n * @param {String}\r\n *            [userName = \"dafault\"] ログに出力するユーザ名\r\n * @param {Array}\r\n *            [sequence = SQL３個のオン処理] 取引の処理シーケンスを格納した配列\r\n * @param {Number}\r\n *            [times = 2 回] 繰返し回数\r\n * @param {Number}\r\n *            [thinkTime = 300 ms] 繰返し時の次回処理開始までの平均時間(ミリ秒）\r\n */\r\nexport var VirtualApp = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function VirtualApp(userName, model){\r\n        if(!(this instanceof VirtualApp)){\r\n            return new VirtualApp(userName, model);\r\n        }\r\n        this._userName = userName || \"default\"; // ログ出力テキスト\r\n        // 定数の設定\r\n        // イベントシーケンスを取得する\r\n        if (typeof(model) === \"undefined\") model = {}\r\n        model.baseModel = model.baseModel || {\"holds\": []};\r\n        this._sequence = model.sequence;\r\n        // イベントシーケンスの繰り返し回数\r\n        this._times = (typeof(model.times) !== \"undefined\") ? model.times : 1;\r\n        // イベントシーケンス終了時に再実行する場合の平均再開時間\r\n        this._thinkTime = Math.max(0,\r\n                (typeof(model.thinkTime) !== \"undefined\") ? model.thinkTime : 500);\r\n        // イベントシーケンス終了時に再実行する場合の最小再開時間\r\n        this._thinkTimeMin = Math.max(0,\r\n                (typeof(model.thinkTimeMin) !== \"undefined\") ? model.thinkTimeMin : 500);\r\n        // メッセージ（ログ末尾に付与する文字列）\r\n        this._baseMessage = model.message + \"\\n\";\r\n        this._message = \"\";\r\n        this._history = []; // #62\r\n\r\n        // 変数の設定\r\n        this._startTime = Number.MIN_SAFE_INTEGER; // イベントシーケンス開始時刻（UNIX時刻：ミリ秒）\r\n        this._sequenceTime = Number.MIN_SAFE_INTEGER; // シミュレータに登録したイベントの時刻（現在時刻）\r\n        this._sequenceIdx = 0;    // シミュレータに登録したイベントシーケンスの位置\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n\r\n    \r\n    /**\r\n     * シミュレータのログを出力する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Number}\r\n     *            logLv ログレベル（isLog <= logLvのときログ出力する）<br>\r\n     *            (0:なし, 1:エラー時のみ, 2:+ETAT, 3:+push/pop, 4:+HOLD/FREE)\r\n     * @param {boolean}\r\n     *            isLog ログ出力レベル\r\n     * @param {Number}\r\n     *            time 日時を表す数値（ミリ秒）\r\n     * @param {Object}\r\n     *            vApp 仮想アプリ\r\n     * @param {Object}\r\n     *            resource リソース\r\n     * @param {String}\r\n     *            text ログテキスト\r\n     * @param {String}\r\n     *            highText 強調表示テキスト\r\n     */\r\n    VirtualApp.prototype.logger = function(logLv, isLog, time, vApp, resource, text, highText) {\r\n        // 0:なしの時\r\n        if (!isLog) return;\r\n        var errCode = 0;\r\n        if (resource && (resource._holdHeap.size() !== resource._holdingQty)) {\r\n            // エラー時★\r\n            errCode = 1;\r\n            highText = highText ? highText + \"　unkown error!!\" : \"　unkown error!!\";\r\n        } else if (logLv > +isLog) {\r\n            return; \r\n        }\r\n        \r\n        // エラーログ編集\r\n        var user = vApp ? \" \" + vApp._userName : \" \";\r\n        var resourceText = resource ? (\" [\" + resource._name + \" wait:\"\r\n                + resource._waitHeap.size() + \"hold:\"\r\n                + resource._holdHeap.size() + \"=\"\r\n                + resource._holdingQty + \" qty] \") : \" \";\r\n        text = text || \"\";\r\n        var logText = D2S(this.getTime(),\"hh:mm:ss.ppp\",true) \r\n                    + user +\"(\" + this._times + \"-\" + this._sequenceIdx + \")\"\r\n                    + resourceText \r\n                    + text;\r\n        highText = highText || \"\";\r\n\r\n        // エラー時の強制補正★\r\n        var modify = \"\";\r\n        if (errCode === 1) { // リソースヒープもしくはリソース量を強制補正する\r\n            var deleted = undefined;\r\n            if (resource._holdHeap.size() < resource._holdingQty) {\r\n                deleted = resource._holdHeap.del(this);\r\n            }\r\n            if (deleted){\r\n                modify = \"FORCE★: holdHeap.del(\" + deleted.userName + \")\";\r\n            } else {\r\n                modify = \"FORCE★: holdingQty modified\"\r\n                    resource._holdingQty = resource._holdHeap.size();\r\n            }\r\n        }\r\n                \r\n        // エラーログ出力\r\n        if (highText || modify){\r\n            console.log(logText + \" %o\", highText + \" \" + modify);\r\n        } else {\r\n            console.log(logText);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取引を開始する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Number}\r\n     *            startTime 開始時刻（UNIX時刻：ミリ秒）\r\n     * @return {Object}仮想アプリケーション(this)\r\n     */\r\n    VirtualApp.prototype.start = function(startTime) {\r\n        this._times--; // イベントシーケンスの繰り返し回数を1減らす\r\n        this._sequenceIdx = 0;    // シミュレータに登録したイベントシーケンスの位置\r\n        this._startTime = startTime;      // イベントシーケンス開始時刻（UNIX時刻：ミリ秒）\r\n        this._sequenceTime = startTime;   // シミュレータに登録したイベントの時刻\r\n        this._message = this._baseMessage; // ログ末尾に出力する文字列の初期化\r\n        this._history = []; // ログ末尾に出力する状態遷移履歴情報の初期化 #62\r\n        this.addHistory(\"start\");\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * イベント時刻を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @return {Number} イベント時刻（UNIX時刻：ミリ秒）\r\n     */\r\n    VirtualApp.prototype.getTime = function() {\r\n        return this._sequenceTime;\r\n    };\r\n\r\n    /**\r\n     * リソース使用量を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            [resource| 指定なしのとき1.0を返却する] リソース\r\n     * @return {Number} リソース使用量\r\n     */\r\n    VirtualApp.prototype.getAmount = function(resource) {\r\n        return 1.0;\r\n    };\r\n\r\n    /**\r\n     * 次の状態に遷移する、シーケンス終了時TATログを出力する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @return {Array}再スケジュールするイベント（仮想アプリケーションorリソース）の配列、登録処理完了時はthisを含まない\r\n     */\r\n    VirtualApp.prototype.next = function(system) {\r\n        this.logger(4, system._log, system.getTime(), this, undefined, 'NEXT', undefined);\r\n        var events = []; // 戻り値\r\n        var ret = {result: true, events: [this]};\r\n        \r\n        if (this._sequenceIdx < this._sequence.length) { // イベントシーケンス処理途中のとき\r\n            var seq = this._sequence[this._sequenceIdx]; // 現在の処理シーケンス位置\r\n            // holdリソースを取得する\r\n            if (seq.hold && seq.hold !== \"\") {\r\n                // holdリソースが指定されているとき、指定リソースを確保する（確保できたとき[this]が戻り値）\r\n                ret = system.getResouce(seq.hold).hold(system, this); // #61\r\n                events = ret.events;\r\n            } else {\r\n                // holdリソースが指定されていないとき、無条件に自身をスケジュール対象に加える\r\n                events = [this];\r\n            }\r\n            // リソースを確保できたとき、該当シーケンスを完了させる\r\n            if (0 < events.length && (0 <= this._times) && ret.result) { // #61\r\n                // 完了した処理の処理時間を加える\r\n                var tatAdd = Math.ceil(Random().exponential(seq.tat - seq.tatMin));\r\n                this.setSequenceTime(this._sequenceTime += seq.tatMin + tatAdd, seq.hold); // #61\r\n                // シーケンスのfreeで指定されているリソースの解放\r\n                if (seq.free) {\r\n                    for (var i = 0; i < seq.free.length; i++) {\r\n                        events = events.concat(system.getResouce(seq.free[i]).free(this));\r\n                    }\r\n                }\r\n                // 次の処理を参照する（ シミュレータに登録したイベントシーケンスの位置）\r\n                this._sequenceIdx++;\r\n            }\r\n            return events;\r\n        }\r\n        \r\n        // イベントシーケンスを終えたときTATログを出力する(this._sequenceIdx >= this._sequence.length)\r\n        var vApp = this._finish(system, \"N_000\");\r\n        // シーケンスをstart状態に設定する\r\n        // this._sequenceTime = system.getTime(); はfinishで更新されるので不可\r\n        // this._startTime = this._sequenceTime; finishで設定する\r\n        // 繰返し処理を継続する場合、自アプリケーションを再スケジュールする\r\n        if (vApp) {\r\n            events.push(this);\r\n        }\r\n        return events;\r\n    };\r\n\r\n    /**\r\n     * Freeに伴い、次の状態に遷移する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Number}\r\n     *            [time | 変更しない} イベント時刻（UNIX時刻：ミリ秒）\r\n     * @param {String}\r\n     *            status ログに追記する時刻設定理由文字列\r\n     * @return {Object} 仮想アプリケーション(this)\r\n     */\r\n    VirtualApp.prototype.setSequenceTime = function(time, status) {\r\n        status = status || \"\"; \r\n        // 解放された時刻をイベント時刻に設定する\r\n        this._sequenceTime = time;\r\n        // ログに状態遷移履歴を追記する\r\n        return this.addHistory(status);\r\n    };\r\n\r\n    /**\r\n     * ログにステータス変更履歴を追記する\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {String}\r\n     *            status ログに追記する状態遷移の理由文字列\r\n     * @param {Number}\r\n     *            time 状態遷移時刻（ミリ秒）\r\n     * @return {Object} 仮想アプリケーション(this)\r\n     */\r\n    VirtualApp.prototype.addHistory = function(status, time) {\r\n// var timeStr = \"\";\r\n// if (typeof(time) === \"number\") {\r\n// timeStr = D2S(time, \"mm:ss.ppp\", true) + \" seq:\"\r\n// }\r\n// this._message += \" [\" + this._sequenceIdx + \":\" + status + \"]\" // #61\r\n// + timeStr + D2S(this._sequenceTime, \"mm:ss.ppp\", true);\r\n        // 状態遷移履歴（ログ出力用）を追加する\r\n        this._history.push({ // #62\r\n            sequenceIdx : this._sequenceIdx,\r\n            status : status,\r\n            time : time,\r\n            sequenceTime : this._sequenceTime\r\n        });\r\n        return this;\r\n    };\r\n    \r\n    /**\r\n     * アベンド処理（holdしている可能性のあるリソースを解放し、イベントシーケンスを強制終了する）\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {Object}\r\n     *            holdedResource アベンドさせたVirtualResource\r\n     * @param {String}\r\n     *            [logID=\"E_600\"] ログID\r\n     * @param {String}\r\n     *            [logMesseage=\"\"] ログメッセージ\r\n     * @param {Boolean}\r\n     *            [isHolding=true] リソース(holdedResource)をholdしているか否か<br>\r\n     * @param {Number}\r\n     *            [abendTime=sytem.getTime()] abend時刻\r\n     * @return {Array}再スケジュールするイベント（仮想アプリケーションorリソース）の配列、登録処理完了時はthisを含まない\r\n     */\r\n    VirtualApp.prototype.abend = function(system, holdedResource, \r\n                                    logID, logMesseage, isHolding, abendTime) {\r\n        logID = logID || \"E_600\";\r\n        abendTime = abendTime || system.getTime();\r\n        isHolding = (typeof(isHolding) === \"boolean\") ? isHolding : true; // #61\r\n        var events = []; // 戻り値\r\n        this.logger(3, system._log, this._sequenceTime, this, holdedResource, 'abend', undefined);\r\n        var seq = this._sequence[this._sequenceIdx];\r\n        // 現在のシーケンスでholdするリソースがあるとき、waitしている可能性があるため、waitから削除する\r\n        if (seq && seq.hold) { // #61\r\n            system._resources[seq.hold].release(this);\r\n        }\r\n        // holdingリソースを開放する\r\n        var holdings;\r\n        // シーケンスから、holdingリソース一覧を取得する #59\r\n        if (seq) holdings = seq.holding;\r\n        if (holdings) { // シーケンス上holdingリソースがあるとき(undefined対策） #61\r\n            for (var i = holdings.length - 1; 0 <= i; i--) { // #61\r\n                // holdedResourceは削除処理対象外（呼び出し元リソースは、呼び出し前に削除済なので）\r\n                if (holdings[i] !== holdedResource._name || isHolding){ // #61\r\n                    // holdingリソースを開放し、使用リソース減に伴って新たにスケジュールするvAppを取得 #59\r\n                    events = events.concat(system._resources[holdings[i]].free(this));\r\n                }\r\n            }\r\n        }\r\n        // イベントシーケンスを強制終了する\r\n        this.setSequenceTime(abendTime, logID); // #59\r\n        var vApp = this._finish(system, logID, logMesseage);\r\n        // 自vAppに継続処理があれば、自vAppをスケジュール対象に加える\r\n        if (vApp && (0 <= this._times)) { // #61\r\n            events = events.concat([vApp]);\r\n        }\r\n        return events;\r\n    };\r\n    \r\n    /**\r\n     * イベント終了時処理（ログ出力と、繰り返し判定）\r\n     * \r\n     * @memberof HJN_util.VirtualApp\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {String}\r\n     *            [logID=\"N_000\"] ログID（ログメッセージの先頭文字）\r\n     * @param {String}\r\n     *            [logMesseage=\"\"] ログメッセージ\r\n     * @param {Number}\r\n     *            [forceTime] 強制終了時刻を指定する（ミシュレーション停止後のeTat強制出力用）\r\n     * @return {Object|undefined} 再スケジュールするときthis、再スケジュールしないときundefined\r\n     */\r\n    VirtualApp.prototype._finish = function(system, logID, logMesseage, forceTime) {\r\n        logID = logID || \"N__00\";\r\n        logMesseage = logMesseage || \"\";\r\n        var events = []; // 戻り値\r\n        var logText = logID + \" \" + this._userName + \" \" + logMesseage + \" \" + this._message;\r\n        var now = this._sequenceTime;\r\n\r\n        // 強制終了時（シミュレーション終了時刻到来時）、自APのシミュレーションを強制終了する\r\n        if (typeof(forceTime) === \"number\") {\r\n            // 起動済処理はTATログを出力する #59\r\n            if (this._startTime <= forceTime) { \r\n                // TATログを出力する\r\n                system.eTat.push( { x: forceTime, \r\n                                    y: Math.round(forceTime - this._startTime),\r\n                                    sTatIdx: 0,\r\n                                    message: logText,\r\n                                    history: this._history} ); // #62\r\n                this.logger(2, system._log, forceTime, this, undefined, 'finish() FORCE\"', logText);\r\n            }\r\n            this._sequenceIdx = this._sequence.length; // #61 処理完了状態にする\r\n            this._startTime = this._sequenceTime; // #61 念のため設定\r\n            return undefined;\r\n        }\r\n        \r\n        // 起動済処理はTATログを出力する #59\r\n        if (this._startTime <= now ) { // || this._sequenceIdx ===\r\n                                        // this._sequence.length) {\r\n            system.eTat.push( { x: now,\r\n                                y: Math.round(now - this._startTime),\r\n                                sTatIdx: 0,\r\n                                message: logText,\r\n                                history: this._history} ); // #62\r\n            this.logger(2, system._log, now, this, undefined, 'finish() \"', logText);\r\n        } else  {\r\n            this.logger(0, system._log, now, this, undefined,\r\n                    'finish() Unexpected error★ _startTime > _sequenceTime:'\r\n                    + D2S(this._startTime, \"hh:mm:ss.ppp\", true)\r\n                            + \" \" + this._startTime + \" > \" + now\r\n                            + \" Idx:\" + this._sequenceIdx \r\n                    , logText);\r\n        }\r\n        this._message = this._baseMessage; // ログ末尾に追加するメッセージの初期化\r\n \r\n        // 継続判定\r\n        if (0 < this._times) { // イベントシーケンスを繰り返すとき\r\n            // イベント時刻にThink time（指数分布）を加える\r\n            var nextTime = this.getTime() + this._thinkTimeMin;\r\n            if (this._thinkTimeMin < this._thinkTime) {\r\n                nextTime += Math.ceil(Math.abs( // #61\r\n                        Random().exponential(this._thinkTime - this._thinkTimeMin)));\r\n            }\r\n            // 処理の先頭に戻る\r\n            return this.start(nextTime);\r\n        }\r\n        // イベントシーケンスを継続しない時(this._times < 0)\r\n        this._times--;       // イベントシーケンスの繰り返し回数を1減らす\r\n        this._sequenceIdx = this._sequence.length; // #61 処理完了状態にする\r\n        this._startTime = this._sequenceTime; // #61\r\n        return undefined;\r\n    };\r\n\r\n    /* new */\r\n    return VirtualApp;\r\n}());\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想リソース(VirtualResource)\r\n * \r\n * @param {Object}\r\n *            system 仮想システム（シミュレーション中の現在時刻取得等に用いる）\r\n * @param {String}\r\n *            [name = \"unlimited\"] リソース名（\"unlimited\"はリソース解放待ちを管理しない）\r\n * @param {Number}\r\n *            [holdCapacity = 1.0] 保有リソース総量（数）\r\n * @param {Number}\r\n *            [timeout = 10秒] 処理のタイムアウト時間（未使用）\r\n * @param {Number}\r\n *            [waitCapacity = Number.MAX_SAFE_INTEGER]\r\n *            リソース取得待ちキューの深さ（数）、キュー溢れ時は即時エラー終了しリソース処理しない\r\n * @param {Number}\r\n *            [queueWait = 10秒] 最大キュー滞留時間（リソース取得待ちタイムアウト時間）\r\n * @param {Boolean}\r\n *            [log=false] 詳細ログ出力有無\r\n */\r\nexport var VirtualResource = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function VirtualResource(system, name,\r\n                        holdCapacity, timeout, waitCapacity, queueWait, log){\r\n        if(!(this instanceof VirtualResource)){\r\n            return new VirtualResource(system, name,\r\n                        holdCapacity, timeout, waitCapacity, queueWait, log);\r\n        }\r\n        this._system = system;\r\n        this._name = name || \"unlimited\";\r\n        this._log = log ? +log : 0; // #59\r\n\r\n        // 処理待ち管理用\r\n        this._waitTimeout = (typeof(queueWait) !== \"undefined\")\r\n                                ? queueWait : 10000;   // キュー滞留時間上限\r\n        this._waitCapacity  = (typeof(waitCapacity) !== \"undefined\")\r\n                                ? waitCapacity : Number.MAX_SAFE_INTEGER; // キューの深さ\r\n        this._waitHeap = Heap(    // リソース解放待ちキュー（登録時間順）\r\n                function(obj){ return obj.getTime(); });\r\n        \r\n        // リソース管理用\r\n        this._holdTimeout  = (typeof(timeout)  !== \"undefined\") \r\n                                ? timeout : 10000;   // 処理のタイムアウト時間\r\n        this._holdCapacity = (typeof(holdCapacity) !== \"undefined\")\r\n                                ? holdCapacity : 1.0;   // 保有リソース量（数）\r\n        this._holdingQty = 0;   // 使用リソース量\r\n        this._holdHeap = Heap( // 処理のタイムアウト管理用ヒープ{obj:,val:} #59\r\n                 function(node){ return node.val; }, // valはタイムアウト時刻\r\n                 function(node){ return node.obj; }); // objはvApp\r\n        \r\n        // イベントスケジュール制御用\r\n        this._sequenceTime = 0;   // シミュレータに登録したイベントの時刻（タイムアウトチェック用）\r\n        this._isScheduled = false; // シミュレータにタイムアウトチェックイベントをスケジュールしたか\r\n        if (0 < this._waitTimeout && 0 < this._holdTimeout){ // スケジュール間隔 #61\r\n            this._interval = Math.min(this._waitTimeout, this._holdTimeout);\r\n        } else if (0 < this._waitTimeout) {\r\n            this._interval = this._waitTimeout;\r\n        } else if (0 < this._holdTimeout) {\r\n            this._interval = this._holdTimeout;\r\n        } else {\r\n            this._interval = 0;\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    /**\r\n     * リソースチェックイベント（タイムアウトチェック）を開始する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Number}\r\n     *            startTime 開始時刻（UNIX時刻：ミリ秒）\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @return {Object} イベント(this)\r\n     */\r\n    VirtualResource.prototype.start = function(startTime, system) { // #59\r\n        this._sequenceTime = startTime + this._interval; // シミュレータに登録するイベントの時刻\r\n        system.setEvent(this);    // シミュレータにタイムアウトチェックイベントをスケジュールする\r\n        this._isScheduled = true; // 「シミュレータにタイムアウトチェックイベントをスケジュールしたかフラグ」をON\r\n        return this;\r\n    };\r\n    \r\n    /**\r\n     * イベント時刻を返却する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @return {Number} イベント時刻（UNIX時刻：ミリ秒）\r\n     */\r\n    VirtualResource.prototype.getTime = function() {\r\n        return this._sequenceTime;\r\n    };\r\n    \r\n    /**\r\n     * タイムアウトチェック用仮想イベント\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @return {Array}再スケジュールするイベント（仮想アプリケーションorリソース）の配列、登録処理完了時はthisを含まない\r\n     */\r\n    VirtualResource.prototype.next = function(system) {\r\n        var events = []; // 戻り値\r\n        var now = this.getTime();\r\n        // リソース解放待ち時間がタイムアウトしたappをタイムアウトさせる\r\n        var queuedTime = Number.MIN_SAFE_INTEGER; \r\n        while (0 < this._waitHeap.size() && this._waitTimeout <= now - queuedTime) {\r\n            queuedTime = this._waitHeap.top().getTime();\r\n            if (this._waitTimeout <= now - queuedTime) { // キューイング取引がタイムアウトしているとき\r\n                // リソース解放待ちHeapからfreeするappを取り出す\r\n                var app = this._waitHeap.pop();\r\n                // appをアベンドさせる(holdリソース解放なし）\r\n                var apps = app.abend(system, this, \"E_QTO\", this._name + \" queue timeout\",\r\n                        false, queuedTime + this._waitTimeout); // appにfree時刻をセットする\r\n                // appsをスケジュールイベント登録対象に加える\r\n                if (apps.length){\r\n                    events = events.concat(apps);\r\n                }\r\n            }\r\n        }\r\n        // リソース使用時間がタイムアウトしたappをタイムアウトさせる #59\r\n        var holdTimeoutTime = Number.MIN_SAFE_INTEGER;\r\n        while (0 < this._holdHeap.size() && holdTimeoutTime <= now) {\r\n            var top = this._holdHeap.top();\r\n            holdTimeoutTime = top.val;\r\n            if (holdTimeoutTime <= now) { // 処理中取引がタイムアウトしているとき #61\r\n                var app = top.obj;\r\n                // appがスケジュールされている場合削除する（スケジューラに登録されていない場合何も起きない）\r\n                system.removeEvent(app);\r\n                // appの使用時間がタイムアウトしたリソースを解放する（注：abendで解放させると永久ループする）\r\n                events = events.concat(this.free(app));                \r\n                // appをタイムアウト時刻にアベンドさせる(holdリソース解放を伴う）\r\n                events = events.concat(app.abend(system, this,\"E_HTO\", \r\n                            this._name + \" hold timeout\", false, holdTimeoutTime));\r\n            }\r\n        }\r\n        // 次回タイムアウトチェック時刻を設定する\r\n        if ((0 < this._waitHeap.size()) || (0 < this._holdHeap.size())) {\r\n            // タイムアウトの設定があるとき、 #61\r\n            // リソース解放待ちvAppがあるとき、(タイムアウトしていない)最古vAppのタイムアウト時刻\r\n            // リソース解放待ちvAppがないとき、現在からタイムアウト時刻後 にスケジュールする\r\n            var nextWaitTimeout = Number.MAX_SAFE_INTEGER;\r\n            if (0 < this._waitTimeout) {\r\n                if ( 0 < this._waitHeap.size() \r\n                        && now <= this._waitTimeout + this._waitHeap.top().getTime()) {\r\n                    nextWaitTimeout = this._waitHeap.top().getTime() + this._waitTimeout; \r\n                } else {\r\n                    nextWaitTimeout = now + this._waitTimeout;\r\n                }\r\n            }            \r\n            var nextHoldTimeout = Number.MAX_SAFE_INTEGER;\r\n            if (0 < this._holdTimeout) {\r\n                if(0 < this._holdHeap.size()) {\r\n                    nextHoldTimeout = this._holdHeap.top().val;\r\n                } else {\r\n                    nextHoldTimeout = now + this._holdTimeout;\r\n                }\r\n            }\r\n            this._sequenceTime = Math.min(nextWaitTimeout, nextHoldTimeout);\r\n            if (this._sequenceTime < Number.MAX_SAFE_INTEGER) {\r\n                events.push(this); // タイムアウトチェックイベントをケジュールイベント登録対象に加える\r\n            } else {\r\n                this._isScheduled = false;\r\n            }\r\n        } else { \r\n            // 以外のとき、シミュレータにタイムアウトチェックイベントを再スケジュールしない\r\n            this._isScheduled = false;\r\n        }\r\n        return events;\r\n    };\r\n\r\n    /**\r\n     * リソースを取得する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {Object}\r\n     *            vApp リソースにhold要求する仮想AP\r\n     * @return {Objcet} 処理結果{result:boolean, events:Array}<br>\r\n     *         {boolean} result :\r\n     *         true:正常（リソース取得、取得待ち、取得不要）、false:エラー（リソース枯渇E_QOF)）<br>\r\n     *         {Array} :events リソース取得後、スケジューラに登録するイベントの配列<br>\r\n     *         [vApp]： リソースを取得できたとき、もしくはリソース枯渇時でvApp再処理の場合、スケジュール対象の vApp\r\n     *         が登録された配列[vApp]を返却<br>\r\n     *         []： リソース待ちに登録されたとき、既にリソースが管理するスケジューラに登録さているので、空の配列[]を返却<br>\r\n     *         もしくはリソース枯渇時で繰返し完了時、再スケジュールしないので[]を返却\r\n     */\r\n    VirtualResource.prototype.hold = function(system, vApp) {\r\n        var ret = { result : true,\r\n                    events : [vApp] }; // 戻り値 #61\r\n        if (this._name === \"unlimited\") return ret; // [vApp] リソース解放待ちを管理しないとき\r\n        vApp.logger(4, this._log, vApp._sequenceTime, vApp, this, 'HOLD' , undefined);\r\n        // タイムアウトチェックイベントがスケジュールされていないとき、スケジュールする\r\n        if (!this._isScheduled && (0 < this._interval)) {\r\n            this.start(system.getTime(), system);\r\n        }\r\n        // リソースを取得できるとき、使用リソース量（数）を増やし、実行中処理管理ヒープに登録し、スケジュール対象とする\r\n        var amount = vApp.getAmount(this); // 消費リソース量(デフォルト1.0）\r\n        if (amount <= (this._holdCapacity - this._holdingQty)) {\r\n            // 使用リソースを増やす\r\n            this._holdingQty += amount;\r\n            // タイムアウト管理対象リソースのとき、vAppをタイムアウト管理対象に加える #59\r\n            if (0 < this._holdTimeout) {\r\n                this._holdHeap.push({obj: vApp, val: system.getTime() + this._holdTimeout});\r\n            }\r\n            vApp.logger(3, this._log, system.getTime(), vApp, this, 'hold' , undefined);\r\n            return ret; // [vApp]\r\n        }\r\n\r\n        // リソース解放待ちキューに空きがあるとき、vAppをリソース解放待ちに 登録する（スケジュールしない）\r\n        if ((this._waitHeap.size() < this._waitCapacity) && (0 < this._waitTimeout)){\r\n            // リソース解放待ちタイムアウト管理対象に加える\r\n            this._waitHeap.push(vApp);\r\n            vApp.addHistory(\"wait:\" + this._name, system.getTime()); // #61\r\n            vApp.logger(3, this._log, system.getTime(), vApp, this, 'wait' , undefined);\r\n            return { result: true, events: [] };\r\n        }\r\n        \r\n        // リソース解放待ちキューが溢れていた時、リソースを取得できずにアベンド（リソース解放なし、自AP継続の場合[vApp]をリターン） #61\r\n        var apps = vApp.abend(system, this, \"E_QOF\",\r\n                    \"[\" + this._name + \"] over flow\", false);\r\n        vApp.logger(3, this._log, system.getTime(), vApp, this, 'over' , undefined);\r\n        return { result: false, events: apps }; // #61\r\n    };\r\n\r\n    /**\r\n     * 引数vAppが使用していたリソースを解放する\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            vApp リソースにfree要求する仮想AP\r\n     * @param {Boolean}\r\n     *            [isHolding=true] 該当vAppが自リソースをholdしているか否か<br>\r\n     *            false指定時、指定vAppはリソースをholdしていない前提で、hold vApp一覧からの削除処理を行わない\r\n     * @return {Array} スケジューラに登録するイベントの配列([vApp] | [])\r\n     */\r\n    VirtualResource.prototype.free = function(vApp, isHolding) { // #59\r\n        vApp.logger(4, this._log, this._system.getTime(), vApp, this, 'FREE' , undefined);\r\n        isHolding = (typeof(isHolding) === \"boolean\") ? isHolding : true;\r\n        if (this._name === \"unlimited\") return []; // リソース解放待ちを管理しないとき\r\n        var vApps = []; // 戻り値\r\n        // 自リソースを使用している可能性があるとき、使用リソースを解放する\r\n        // 解放したvAppが使用していたリソース量(デフォルト1.0）を、使用リソース量（数）から減らす #59\r\n        if (isHolding === true) { // #61\r\n            this._holdingQty -= vApp.getAmount(this);\r\n            // タイムアウト管理対象リソースのとき、vAppをタイムアウト管理対象から削除する #61\r\n            if (0 < this._holdTimeout) { // #61\r\n                var app = this._holdHeap.del(vApp);\r\n            }\r\n            vApp.addHistory(\"free:\" + this._name, this._system.getTime());\r\n            vApp.logger(3, this._log, this._system.getTime(), vApp, this, 'del' , undefined);\r\n        }\r\n        // リソース解放待ちキューから、空きリソースで処理できるようになったvAppを取り出しスケジュールする #61\r\n        var marginQty = this._holdCapacity - this._holdingQty;\r\n        var addQty = this._waitHeap.top()\r\n                    ? this._waitHeap.top().getAmount(this) // 次のリソース解放待ちキューの使用量\r\n                    : Number.MAX_SAFE_INTEGER;\r\n        for (var i = this._waitHeap.size() && addQty <= marginQty; 0 < i; i--) {\r\n            // リソース解放待ちキューからfreeするappを取り出す\r\n            var app = this._waitHeap.pop();\r\n            // appにfree時刻をセットし、スケジュールイベント登録対象に加える\r\n            // (注：リソース取得はスケジュール後、E_HTOに伴う他のリソースの時刻は将来）\r\n            app.setSequenceTime(this._system.getTime(), \"release:\" + this._name);\r\n            vApps.push(app);\r\n            // 次のappのリソース量を加える\r\n            addQty += this._waitHeap.top() \r\n                    ? this._waitHeap.top().getAmount(this) // 次のリソース解放待ちキューの使用量\r\n                    : Number.MAX_SAFE_INTEGER;\r\n        }\r\n        return vApps;\r\n    };\r\n\r\n\r\n    /**\r\n     * 引数vAppをリソース開放待ちキューからリリースする\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            vApp リリースする仮想AP\r\n     * @return {Object | undefined} リリースした仮想AP\r\n     */\r\n    VirtualResource.prototype.release = function(vApp) { // #61\r\n        var app = this._waitHeap.del(vApp);\r\n        if (app) vApp.addHistory(\"release\", this._system.getTime());\r\n        return app;\r\n    }\r\n\r\n    \r\n    \r\n    /**\r\n     * イベント終了時処理（リソースが管理しているvAppをfinishさせる（強制終了させ処理中vAppはTATログ出力する）\r\n     * \r\n     * @memberof HJN_util.VirtualResource\r\n     * @param {Object}\r\n     *            system VirtualSystem\r\n     * @param {String}\r\n     *            [logID=\"N_000\"] ログID（ログメッセージの先頭文字）\r\n     * @param {String}\r\n     *            [logMesseage=\"\"] ログメッセージ\r\n     * @param {Number}\r\n     *            forceTime 強制終了時刻を指定する（ミシュレーション停止後のeTat強制出力用）\r\n     * @return {null}\r\n     */\r\n    VirtualResource.prototype._finish = function(system, logID,\r\n                                        logMesseage, forceTime) { // #59\r\n        // シミュレーション終了後処理（処理中のvAppを強制終了する）\r\n        logID = logID || \"N_EoS\";\r\n        logMesseage = logMesseage || \"\";\r\n        while(0 < this._waitHeap.size()){\r\n            event = this._waitHeap.pop();\r\n            if (event._finish) {\r\n                event._finish(system, logID,\r\n                        \"[\" + this._name + \"] \" + logMesseage , forceTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* new */\r\n    return VirtualResource;\r\n}());\r\n\r\n\r\n/**\r\n * @class\r\n * @classdesc 仮想システム生成ツール(virtualSystemByJson)\r\n *            <p>\r\n *            util管理用クラス（スタティックメソッドのみ）のためコンストラクタは使用しない\r\n */\r\nexport var virtualSystemByJson = (function() { // #53\r\n    \"use strict\";\r\n    /** @constructor */\r\n    function virtualSystemByJson(){\r\n        if(!(this instanceof virtualSystemByJson)){\r\n            return new virtualSystemByJson();\r\n        }\r\n    }\r\n\r\n    /** @private */\r\n    //\r\n\r\n    // public\r\n    \r\n    // static\r\n    /**\r\n     * 初期表示用サンプルデータ(ETAT)を自動生成する\r\n     * \r\n     * @memberof HJN_util.virtualSystemByJson\r\n     * @param {String}\r\n     *            [jsonText] シミュレーション条件JSONテキスト\r\n     * @return {ETAT} 終了時刻のTAT（応答時間）時系列データ [{x:終了時刻(UNIX時刻の経過時間(秒)),\r\n     *         y:レスポンス(秒)}]\r\n     */\r\n    // CreateSampleTatLog\r\n    virtualSystemByJson.Execute = function(jsonText){ // #53\r\n        \"use strict\";\r\n        var vSys = {};\r\n        // parse\r\n        var json = JSON.parse(jsonText)\r\n        // virtual system と resources の設定\r\n        var log = (json.log !== undefined) ? json.log : false; // #59\r\n        var start = (json.start !== undefined) \r\n                    ? S2D(json.start) : new Date(1970,1,2);\r\n        var end = start + S2N(json.end, \"24*h\");\r\n        var resources = json.resources;\r\n        for (var i = 0; i < resources.length; i++) {\r\n            resources[i].timeout = S2N(resources[i].timeout, \"10*sec\");\r\n            resources[i].qWait = S2N(resources[i].qWait, \"10*sec\");\r\n        }\r\n        vSys = VirtualSystem(start, end, json.resources, log);\r\n        // model の取得\r\n        var models = json.models;\r\n        for (var i = 0; i < models.length; i++) {\r\n            var model = models[i];\r\n            var name = Object.keys(model)[0]; // モデルの名称\r\n            var m = model[name]; // モデル\r\n            var baseModel = m.baseModel; // baseModel\r\n            for (var j = 0; j < m.sequence.length; j++) {\r\n                // 時間指定文字列を、ミリ秒数値に変換する（例：\"3*sec\"->3000)\r\n                m.sequence[j].tatMin = S2N(m.sequence[j].tatMin);\r\n                m.sequence[j].tat = S2N(m.sequence[j].tat);\r\n            }\r\n            // sequenceに、baseModelを展開し、未開放リソースの開放処理を登録する\r\n            models[name] = VirtualSystem.getModel(\r\n                        baseModel.holds, \r\n                        S2N(baseModel.tatMin), S2N(baseModel.tat),\r\n                        m.sequence, \r\n                        (typeof(m.times) === \"number\") ? m.times : 1, // #61\r\n                        S2N(m.thinkTimeMin), S2N(m.thinkTime)); \r\n        }\r\n        // client の設定\r\n        var clients = json.clients;\r\n        for (var i = 0; i < clients.length; i++) {\r\n            var c = clients[i];\r\n            var cStart = start + S2N(c.start, 0);\r\n            var cEnd   = start + S2N(c.end, 24*60*60*1000);\r\n            vSys.setClients(c.user, c.message, c.num, cStart, cEnd, models[c.model]);\r\n        }\r\n        if (log) console.log(vSys); // #59\r\n        return vSys.execute();\r\n    }\r\n\r\n    /**\r\n     * シミュレーション条件JSONテキストを作成する\r\n     * \r\n     * @memberof HJN_util.virtualSystemByJson\r\n     * @param {Number}\r\n     *            [n = 0] シナリオ番号\r\n     * @return {String} シミュレーション条件JSONテキスト\r\n     */\r\n    // CreateSampleTatLogJson\r\n    virtualSystemByJson.GetJsonConfig = function(n){ // #53\r\n        \"use strict\";\r\n        n = (typeof(n) !== \"undefined\") ? n : 0;\r\n        var jsonText = \"\";\r\n        if (n === 0) {\r\n            jsonText =  '{\\n'\r\n                + '\"log\" : 1,\\n'\r\n                + '\"start\" : \"2017/01/02 00:00:00.000\",\\n'\r\n                + '\"end\"   : \"17.0*h\",\\n'\r\n                + '\"resources\" : [\\n'\r\n                + '  {\"type\" :\"WEB\", \"thread\":1024,\"timeout\":\"300*sec\", \"q\":1280, \"qWait\":0},\\n'\r\n                + '  {\"type\" :\"AP\",  \"thread\":20,  \"timeout\":\"300*sec\", \"q\":1280, \"qWait\":0},\\n'\r\n                + '  {\"type\" :\"DB\",  \"thread\":10,  \"timeout\": \"10*sec\", \"q\":10,  \"qWait\":\"10*sec\"}\\n'\r\n                + '],\\n'\r\n                + '\\n'\r\n                + '\"models\" : [\\n' // 取引モデル一覧\r\n                + '  { \"ON-1\" : {\\n' // オンライン取引1\r\n                + '    \"times\": 60, \"thinkTimeMin\":\"3*sec\", \"thinkTime\": \"10*sec\",\\n'\r\n                + '    \"baseModel\":  {\"holds\": [\"WEB\",\"AP\",\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"5*ms\"},\\n'\r\n                + '    \"sequence\": [\\n'\r\n                + '      {\"tatMin\":30, \"tat\":50, \"note\":\"select A\"},\\n'\r\n                + '      {\"tatMin\":50, \"tat\":50, \"note\":\"updateB\", \"hold\":\"TBL_B\"},\\n'\r\n                + '      {\"tatMin\":80, \"tat\":100,\"note\":\"updateC\", \"hold\":\"TBL_C\"}\\n'\r\n                + '    ]}},\\n'\r\n                + ' { \"ON-2\" : {\\n' // オンライン取引2\r\n                + '    \"times\": 60, \"thinkTimeMin\":\"500*ms\", \"thinkTime\": \"1*sec\",\\n'\r\n                + '    \"baseModel\":  {\"holds\": [\"WEB\",\"AP\",\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"5*ms\"},\\n'\r\n                + '    \"sequence\": [\\n'\r\n                + '      {\"tatMin\":\"100*ms\", \"tat\":\"500*ms\", \"hold\":\"\"}\\n'\r\n                + '    ]}},\\n'\r\n                + ' { \"BATCH-1\" : {\\n' // バッチ取引3\r\n                + '    \"baseModel\":  {\"holds\": [\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"5*ms\"},\\n'\r\n                + '    \"sequence\": [\\n'\r\n                + '      {\"tatMin\":\"2*sec\",\"tat\":\"5*sec\",\"note\":\"updateB\",\"hold\":\"TBL_B\"}\\n'\r\n                + '    ]}}\\n'\r\n                + '],\\n'\r\n                + '\\n'\r\n                + '\"clients\" : [\\n' // ユーザ作成条件\r\n                + '  {\"num\":100,\"start\":\"16.0*h\", \"end\":\"17.0*h\", \"model\":\"ON-1\",  \"user\" :\"userU\", \"message\":\"select A update B,C\"},\\n'\r\n                + '  {\"num\": 20,\"start\":\"16.5*h\", \"end\":\"16.6*h\", \"model\":\"ON-1\",  \"user\" :\"userT\", \"message\":\"select A update B,C 【増】\"},\\n'\r\n                + '  {\"num\":100,\"start\":\"16.0*h\", \"end\":\"17.0*h\", \"model\":\"ON-2\",  \"user\" :\"userS\", \"message\":\"排他なし(WEBのみ)\"},\\n'\r\n                + '  {\"num\": 20,\"start\":\"16.0*h\", \"end\":\"17.0*h\", \"model\":\"BATCH-1\",\"user\":\"userB\", \"message\":\"バッチ処理 update B＊＊＊＊＊\"}\\n'\r\n                + ']\\n'\r\n                + '}\\n';\r\n        } else if (n === 1) {\r\n            // test用\r\n            jsonText =  '{\\n'\r\n                + '\"//\" : \"log（任意、デフォルト3）:詳細ログ出力指定(0:なし, 1:エラー時のみ, 2:+ETAT, 3:+push/pop, 4:+HOLD/FREE)\",\\n'\r\n                + '\"//\" : \"start/end:シミュレーション開始時刻/終了時刻\",\\n'\r\n                + '\"log\" : 1,\\n'\r\n                + '\"start\" : \"1970/01/02 00:00:00.000\",\\n'\r\n                + '\"end\"   : \"30.0*sec\",\\n'\r\n                + '\\n'\r\n                + '\"//\" : \"resources:sequenceのhold/freeで指定するリソース名の定義\",\\n'\r\n                + '\"//\" : \"type:リソース名、thread:最大同時hold数、timeout：holdタイムアウト時間\",\\n'\r\n                + '\"//\" : \"　　　　　　　　　　　q:最大hold待ち数、qWait:最大hold待ち時間\",\\n'\r\n                + '\"resources\" : [\\n'\r\n                + '  {\"type\" :\"DB\",  \"thread\":2,  \"timeout\": \"5*sec\", \"q\":1,  \"qWait\":\"2*sec\"}\\n'\r\n                + '],\\n'\r\n                + '\\n'\r\n                + '\"//\" : \"models:clientsで指定するモデル名(model)の定義、以下modelsで指定できる項目\",\\n'\r\n                + '\"//\" : \"baseModel:複数リソースのsequenceをまとめて宣言できる、sequenceに展開した後処理される、任意指定\",\\n'\r\n                + '\"//\" : \"sequence:指定された順にリソースを取得する、配列内に複数指定可、sequenceも複数指定可\",\\n'\r\n                + '\"//\" : \"hold：リソース名、holds(baseModelのみ指定可）：リソース一覧、各々にtat/tatMinが適用される\",\\n'\r\n                + '\"//\" : \"tat/tatMin：リソースの取得に要する平均/最小時間、tatMinのデフォルトはtat\",\\n'\r\n                + '\"//\" : \"　　　　　　★注：tatはリソースの使用時間ではない、リソース使用時間を指定す場合はfreeで指定\",\\n'\r\n                + '\"//\" : \"数値はミリ秒単位、*ms,*sec,*min,*h,*day 指定可\",\\n'\r\n                + '\"//\" : \"times：繰返し回数\",\\n'\r\n                + '\"//\" : \"thinkTime/thinkTimeMin：繰返し時の間隔の平均/最小時間、thinkTimeMinのデフォルトはthinkTime\",\\n'\r\n                + '\"//\" : \"free：[リソース名の配列]、指定リソースを開放する、free指定の無いリソースはシーケンスの最後にfreeされる\",\\n'\r\n                + '\"models\" : [\\n' // 取引モデル一覧\r\n                + ' { \"TEST-AB\" : {\\n' // テスト取引\r\n                + '    \"baseModel\":  {\"holds\": [\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"2*ms\"},\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_A\", \"tatMin\":\"1*sec\", \"tat\":\"1*sec\"}],\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_B\", \"tatMin\":\"3*sec\", \"tat\":\"3*sec\"}],\\n'\r\n                + '    \"times\": 2, \"thinkTimeMin\":\"1*sec\", \"thinkTime\": \"1*sec\"}},\\n'\r\n                + ' { \"TEST-BA\" : {\\n' // テスト取引\r\n                + '    \"baseModel\":  {\"holds\": [\"DB\"], \"tatMin\": \"2*ms\", \"tat\":\"2*ms\"},\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_B\", \"tatMin\":\"1*sec\", \"tat\":\"1*sec\"}],\\n'\r\n                + '    \"sequence\": [{\"hold\":\"TBL_A\", \"tatMin\":\"3*sec\", \"tat\":\"3*sec\"}],\\n'\r\n                + '    \"times\": 2, \"thinkTimeMin\":\"1*sec\", \"thinkTime\": \"1*sec\"}}\\n'\r\n                + '    ],\\n'\r\n                + '\\n'\r\n                + '\"//\" : \"clients：仮想アプリケーションの起動クライアントの定義\",\\n'\r\n                + '\"//\" : \"num:作成クライアント数、start～endの間で、ランダム（指数分布）に指定回数起動する\",\\n'\r\n                + '\"//\" : \"start/end:仮想クライアント作成/終了時刻、先頭で宣言したstartからの相対時刻\",\\n'\r\n                + '\"//\" : \"model:modelsで宣言したモデル名\",\\n'\r\n                + '\"//\" : \"user:user+通番 のユーザ名で仮想クライアントが作成される\",\\n'\r\n                + '\"clients\" : [\\n' // ユーザ作成条件\r\n                + '  {\"num\": 1,\"start\":\"0*sec\", \"end\":\"0*sec\", \"model\":\"TEST-AB\",\"user\" :\"testAB1\"},\\n'\r\n                + '  {\"num\": 1,\"start\":\"1*sec\", \"end\":\"1*sec\", \"model\":\"TEST-AB\",\"user\" :\"testAB2\"},\\n'\r\n                + '  {\"num\": 1,\"start\":\"3*sec\", \"end\":\"3*sec\", \"model\":\"TEST-BA\",\"user\" :\"testBA3\"},\\n'\r\n                + '  {\"num\": 1,\"start\":\"4*sec\", \"end\":\"4*sec\", \"model\":\"TEST-BA\",\"user\" :\"testBA4\"}\\n'\r\n                + ' ]\\n'\r\n                + '}\\n';\r\n        }\r\n\r\n        return jsonText; \r\n    }\r\n\r\n    /* new */\r\n    return virtualSystemByJson;\r\n}());\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/HJN.utils.js\n// module id = 3\n// module chunks = 0","\"use strict\";\r\nimport * as HJN_util from './HJN.utils.js';\r\n// import {Dygraph} from '../libs/dygraph.js';\r\n// import Dygraph from '../libs/extras/synchronizer.js';\r\n\r\n\r\n/* ******1*********2*********3*********4*********5*********6*********7****** */\r\n/* HJN クラス変数 */\r\n// HJN = {};\r\nexport default function HJN(){};\r\nHJN.ver = \"v0.12.23\";\r\n/** @namespace */\r\n// HJN_util = {}; // utils登録変数\r\n/** @namespace */\r\nHJN.init = {}; // 初期登録処理関連\r\n\r\nHJN.chart = HJN.chartD = null;\r\nHJN.chartName = \"chart\";\r\n\r\nHJN.CONC = {\r\n    key : 'conc',\r\n    name : '多重度（詳細）',\r\n    label : 'conc:%N',\r\n    N : 0,\r\n    scale : 0,\r\n    color : 'rgba(  0,  0,127, 0.3)',\r\n    tpsN : 1\r\n}; // #7\r\nHJN.CTPS = {\r\n    key : 'cTps',\r\n    name : '多重度（区間最大）',\r\n    label : 'conc(max):%N',\r\n    N : 1,\r\n    scale : 0,\r\n    color : 'rgba(  0,  0,127, 0.1)',\r\n    detailN : 0\r\n};\r\nHJN.ETPS = {\r\n    key : 'eTps',\r\n    name : 'average tps / min (end) [line]', // #57\r\n    label : 'end:%Ntps',\r\n    N : 2,\r\n    scale : 0,\r\n    color : 'rgba(  0, 127, 127, 0.3)'\r\n};\r\nHJN.STAT = {\r\n    key : 'sTat',\r\n    name : 'response by start time [Y2軸:plot]',\r\n    label : 'start:%Nms',\r\n    N : 3,\r\n    scale : 1,\r\n    color : 'rgba(127, 127, 0, 0.3)'\r\n};\r\nHJN.ETAT = {\r\n    key : 'eTat',\r\n    name : 'response by end time   [Y2軸:plot]',\r\n    label : 'end:%Nms',\r\n    N : 4,\r\n    scale : 1,\r\n    color : 'rgba(127,  0,  0, 0.3)'\r\n};\r\nHJN.EMPS = {\r\n    key : 'eMps',\r\n    name : 'max response / min (end) [Y2軸:line]', // #57\r\n    label : 'max:%Nms',\r\n    N : 5,\r\n    scale : 1,\r\n    color : 'rgba(127,   0,  64, 0.3)'\r\n};\r\nHJN.EAPS = {\r\n    key : 'eAps',\r\n    name : 'average response / min (end) [Y2軸:line]', // #57\r\n    label : 'ave:%Nms',\r\n    N : 6,\r\n    scale : 1,\r\n    color : 'rgba(127,   0,  64, 0.1)'\r\n};\r\n// グラフ定数\r\nHJN.seriesConfig = [ HJN.CONC, HJN.CTPS, HJN.ETPS, HJN.STAT, HJN.ETAT,\r\n        HJN.EMPS, HJN.EAPS ];\r\n\r\nHJN.detailDateTime = new Date(); // 下段表示時刻\r\nHJN.detailRangePlus = 1.0; // 下段表示範囲（＋秒）\r\nHJN.detailRangeMinus = 1.0; // 下段表示範囲（－秒）\r\n\r\nHJN.files = [];\r\nHJN.filesArrayBuffer = [];\r\n\r\nHJN.timer = {};\r\n\r\n/**\r\n * seriesSet: dygraph用時系列データ配列\r\n * \r\n * @typedef {array.<CONC, CTPS, ETPS, STAT, ETAT, EMPS, EAPS>} seriesSet\r\n */\r\n/**\r\n * CONC:多重度の時系列データ<br>\r\n * [{x:変化時刻(ms) ,y:多重度数 }]\r\n * \r\n * @typedef {array.<xMs, yInt>} CONC\r\n */\r\n/**\r\n * CTPS: 秒間最大多重度の時系列データ<br>\r\n * [{x:秒毎時刻(ms), y:秒内最大多重度数 }]\r\n * \r\n * @typedef {array.<xMs, index>} CTPS\r\n */\r\n/**\r\n * ETPS: 秒間終了件数の時系列データ<br>\r\n * [{x:秒毎時刻(ms), y:秒内終了件数 }]\r\n * \r\n * @typedef {array.<xMs, yInt>} ETPS\r\n */\r\n/**\r\n * STAT: 開始時刻のTAT（応答時間）時系列データ<br>\r\n * [{x:開始時刻(ms) ,y:レスポンス(sec), eTatIdx: eTatの配列位置 }]\r\n * \r\n * @typedef {array.<xMs, ySec, index>} STAT\r\n */\r\n/**\r\n * ETAT: 終了時刻のTAT（応答時間）時系列データ<br>\r\n * [{x:変化時刻(ms) ,y:レスポンス(sec), fileIdx:ファイル配列位置, pos:レコード位置, len:レコード長, sTatIdx:\r\n * sTatの配列位置 }]\r\n * \r\n * @typedef {array.<xMs, ySec, index, index, number, index>} ETAT\r\n */\r\n/**\r\n * EMPS: 秒間最大TAT（応答時間）時系列データ（終了時刻ベース）<br>\r\n * [{x:秒毎時刻(ms), y:秒内最大レスポンス(sec) }]\r\n * \r\n * @typedef {array.<xMs, ySec>} EMPS\r\n */\r\n/**\r\n * EAPS: 秒間平均TAT（応答時間）時系列データ（終了時刻ベース）<br>\r\n * [{x:秒毎時刻(ms), y:秒内平均レスポンス(sec) }]\r\n * \r\n * @typedef {array.<xMs, ySec>} EAPS\r\n */\r\n/**\r\n * xMs: x軸に用いる時刻(ms)\r\n * \r\n * @typedef {number} xMs\r\n */\r\n/**\r\n * ySec: y軸に用いる秒単位の時間（応答時間など）\r\n * \r\n * @typedef {number} ySec\r\n */\r\n/**\r\n * yInt: y軸に用いる整数（個数など）\r\n * \r\n * @typedef {number} yInt\r\n */\r\n/**\r\n * index: 配列の位置（インデックス）に用いる整数\r\n * \r\n * @typedef {number} index\r\n */\r\n\r\n/**\r\n * インスタンス内の定数を設定する。併せて性能対策として頻繁に使うDOM要素を取り込む\r\n * \r\n * @namespace\r\n * @class\r\n * @classdesc TAT(Turnaround time)ログ分析用グラフ\r\n * @param {string}\r\n *            chartIdName グラフを作成するHTML要素のID\r\n * @param {string}\r\n *            [globalName=\"HJN.chartD\"] グラフのID\r\n * @param {Object}\r\n *            [config] グラフの設定\r\n * @example HJN.chart = new HJN(chartName, \"HJN.chart\"); HJN.chart.init();\r\n *          HJN.chartD = new HJN(chartName + \"Detail\", \"HJN.chartD\");\r\n *          HJN.chartD.init();\r\n */\r\nHJN.Graph = function (chartIdName, globalName, config) {\r\n    \"use strict\";\r\n    /* メンバ変数 */\r\n    this.seriesSet = [];\r\n    this.chartIdName = chartIdName; // arg0 \"chart\",\"chartD\"\r\n    this.globalName = globalName || \"HJN.chartD\"; // arg1\r\n    if (!config) { // arg2\r\n        var isMain = (globalName === \"HJN.chart\") ? true : false;\r\n        config = {\r\n            SERIESES: [ \r\n                { n: HJN.CONC.N, process: !isMain, visiblity: !isMain, renderer: 'area' },\r\n                { n: HJN.CTPS.N, process: true,    visiblity: true,    renderer: isMain ? 'scatterplot' : 'bar' },\r\n                { n: HJN.ETPS.N, process: true,    visiblity: isMain,  renderer: 'line' },\r\n                { n: HJN.STAT.N, process: !isMain, visiblity: !isMain, renderer: 'scatterplot' },\r\n                { n: HJN.ETAT.N, process: !isMain, visiblity: !isMain, renderer: 'scatterplot' },\r\n                { n: HJN.EMPS.N, process: true,    visiblity: true,    renderer: 'line' }, \r\n                { n: HJN.EAPS.N, process: true,    visiblity: isMain,  renderer: 'line' } ],\r\n            height : 0.40,\r\n            isVisiblity : true\r\n        };\r\n    }\r\n\r\n    // FileReaderを設定する\r\n    this.fileReader = HJN_util.FileReader(); // #24\r\n\r\n    // グラフ定義領域の宣言\r\n    this.windowId = document.getElementById(\"hjn_chart\");\r\n    this.menuId = document.getElementById(\"hjnBoxBuger\");\r\n    this.menuPlaceOnId = document.getElementById(\"hjnBoxPlaceOn\");\r\n    this.chartId = document.getElementById(this.chartIdName);\r\n    this.dyData = [];\r\n    this.dySeries = {};\r\n\r\n    this.scale = [ null, null ];\r\n    this.graph = null;\r\n    this.cycle = 1000 * 60; // ミリ秒 #57\r\n    this.cTpsUnit = HJN.Graph.prototype.UNIT_CTPS[0];\r\n\r\n    this.cash = null; // キャッシュオブジェクト\r\n\r\n    // グラフの設定(処理対象データの設定のみ this.SERIESES[] に取り込む）\r\n    this.SERIESES = [];\r\n    this.labels = [ 'Date' ];\r\n    for (var i = 0, j = 0; i < config.SERIESES.length; i++) {\r\n        if (config.SERIESES[i].process === true) {\r\n            this.SERIESES[j] = {\r\n                key : '',\r\n                name : '',\r\n                visiblity : false,\r\n                renderer : '',\r\n                order : 0,\r\n                scale : 0,\r\n                color : ''\r\n            };\r\n            // 定数(HJN.seriesConfig)指定項目を設定する\r\n            for ( var attr in HJN.seriesConfig[i]) {\r\n                this.SERIESES[j][attr] = HJN.seriesConfig[i][attr];\r\n            }\r\n            // 引数(config)指定項目を設定する\r\n            this.SERIESES[j].visiblity = config.SERIESES[i].visiblity;\r\n            this.SERIESES[j].renderer = config.SERIESES[i].renderer;\r\n\r\n            var renderer = config.SERIESES[i].renderer;\r\n            if (renderer === 'scatterplot') {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 0.0,\r\n                    drawPoints : true\r\n                };\r\n            } else if (renderer === 'line') {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 2.0,\r\n                    connectSeparatedPoints : true,\r\n                    stepPlot : true\r\n                };\r\n            } else if (renderer === 'area') {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 0.0,\r\n                    stepPlot : true,\r\n                    fillGraph : true\r\n                };\r\n            } else { // if (renderer === 'bar' ) {\r\n                this.dySeries[this.SERIESES[j].key] = {\r\n                    strokeWidth : 0.0,\r\n                    connectSeparatedPoints : true,\r\n                    stepPlot : true,\r\n                    fillGraph : true\r\n                };\r\n            }\r\n            this.dySeries[this.SERIESES[j].key].color = this.SERIESES[j].color;\r\n\r\n            if (this.SERIESES[j].scale === 1) {\r\n                this.dySeries[this.SERIESES[j].key].axis = 'y2';\r\n            }\r\n\r\n            this.labels.push(this.SERIESES[j].key);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    this.height = config.height;\r\n    this.isVisiblity = config.isVisiblity;\r\n};\r\n\r\n/**\r\n * クラス定数\r\n */\r\nHJN.Graph.prototype = {\r\n    UNIT_RANGE: [ // #48\r\n        { label: \"sec\",    val: \"1000\" },\r\n        { label: \"10sec\",  val: \"10000\", selected: \"selected\" },\r\n        { label: \"min\",    val: \"60000\" },\r\n        { label: \"10min\",  val: \"600000\" }, \r\n        { label: \"hour\",   val: \"3600000\" },\r\n        { label: \"6hours\", val: \"21600000\" },\r\n        { label: \"day\",    val: \"86400000\" }, \r\n        { label: \"year\",   val: \"31536000000\" } ],\r\n    UNIT_CTPS: [\r\n        { label: \"/sec\",   unit: 1000 },\r\n        { label: \"/min\",   unit: 60000 },\r\n        { label: \"/hour\",  unit: 3600000 },\r\n        { label: \"/day\",   unit: 86400000 } ]\r\n};\r\n\r\n/**\r\n * クラスメソッド：menuのFilterのｘｙ幅指定エリアにグラフのｘｙ幅を設定する<br>\r\n * dygraphのdrawCallbackに設定する関数<br>\r\n * menuのRadio(F_SYNC)選択時に呼び出す関数（このためにクラスメソッド）\r\n */\r\nHJN.Graph.DrawCallback = function (g, is_initial) { // #50 #51\r\n    // 初期表示時は、メニューを設定しない\r\n    if (is_initial)\r\n        return;\r\n    // Filterメニューで指定されている F_SYNC の状態を取得する\r\n    var syncMode = HJN_util.Config(\"Filter\").getValueByKey(\"F_SYNC\"); // #59\r\n    // \"F_SYNC_UPPER\"かつ上段グラフ もしくは、\"F_SYNC_DETAIL\"かつ下段グラフのとき処理する\r\n    if ((syncMode === \"F_SYNC_UPPER\" && g.HJN === HJN.chart)\r\n            || (syncMode === \"F_SYNC_DETAIL\" && g.HJN === HJN.chartD)) {\r\n        // ｘ軸の幅をFilterメニューフェールドに反映する\r\n        setText(\"Filter.F_TIME_FROM\", HJN_util.D2S(g.xAxisRange()[0],\r\n                \"yyyy/MM/dd hh:mm:ss.ppp\", true));\r\n        setText(\"Filter.F_TIME_TO\", HJN_util.D2S(g.xAxisRange()[1],\r\n                \"yyyy/MM/dd hh:mm:ss.ppp\", true));\r\n        // ｙ軸(右)の幅をFilterメニューフェールドに反映する\r\n        setText(\"Filter.F_TAT_FROM\", +(g.yAxisRange(1)[0].toPrecision(4)));\r\n        setText(\"Filter.F_TAT_TO\", +(g.yAxisRange(1)[1].toPrecision(4)));\r\n    }\r\n\r\n    function setText(id, val) {\r\n        document.getElementById(id).value = val;\r\n        document.getElementById(id).onchange();\r\n    }\r\n};\r\n\r\n/**\r\n * グラフを初期化する\r\n */\r\nHJN.Graph.prototype.init = function () {\r\n    \"use strict\";\r\n    // メニューを作成する\r\n    this.addMenu();\r\n    // 凡例を作成する\r\n    if (this.isVisiblity)\r\n        addLegend(this);\r\n    // 既にグラフがあるときは削除する\r\n    if (this.graph) {\r\n        this.graph.HJN = null; // （注：循環参照対策\r\n        this.graph.destroy();\r\n    }\r\n    // ウィンドウ枠に合わせて描画領域をリサイズするイベントを登録し、リサイズする\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n    // tablet回転時も、リサイズする #22\r\n    window.addEventListener(\"orientationchange\", this.resize.bind(this));\r\n    var resizes = document.getElementsByClassName(\"hjnResize\");\r\n    for (var i = 0; i < resizes.length; i++) {\r\n        resizes[i].addEventListener(\"change\", this.resize.bind(this)); // メニュ－の開閉\r\n        // #31\r\n    }\r\n\r\n    // legendを追加する（内部関数）\r\n    function addLegend(that) { // arg0 : this\r\n        var chartIdName = that.chartIdName;\r\n        var serieses = that.SERIESES;\r\n        var divLegend = document.getElementById(chartIdName + \"_legend\");\r\n        var formName = chartIdName + \"_LegendForm\";\r\n        var htmlText = '<form name=\"' + formName + '\">';\r\n        for (var i = 0; i < serieses.length; i++) {\r\n            var ckBox = serieses[i].visiblity ? 'checked=\"checked\"' : '';\r\n            htmlText += '<label class=\"legend\" style=\"background:'\r\n                    + serieses[i].color + ';\">' + '<input type=\"checkbox\" '\r\n                    + 'name=\"' + serieses[i].key + '\"' + 'onclick=\"'\r\n                    + that.globalName + '.onClickSetVisibility(' + i + ');\" '\r\n                    + ckBox + '>' + serieses[i].name + '</label><BR>';\r\n        }\r\n        htmlText += '</form>';\r\n        divLegend.innerHTML = htmlText;\r\n    }\r\n};\r\n\r\n/**\r\n * legendの表示指定をグラフに反映する(onclick呼出用）\r\n * \r\n * @param {index}\r\n *            i seriesSet配列の設定変更するグラフのインデックス\r\n */\r\nHJN.Graph.prototype.onClickSetVisibility = function (i) { //\r\n    \"use strict\";\r\n    var formName = this.chartIdName + \"_LegendForm\";\r\n    var ck = document[formName].elements[i].checked;\r\n    this.graph.setVisibility(i, ck);\r\n};\r\n\r\n/**\r\n * ウィンドウ枠に合わせて描画領域をリサイズする（dygraphは幅は自動、高さは指定）\r\n */\r\nHJN.Graph.prototype.resize = function () {\r\n    \"use strict\";\r\n    // 幅（メニューの状態に合わせて計算） #31\r\n    var dWidth = 0;\r\n    if (this.menuId.checked && !this.menuPlaceOnId.checked) {\r\n        dWidth = this.menuId.parentNode.clientWidth;\r\n    }\r\n    var width = window.innerWidth - dWidth;\r\n    this.windowId.style.width = width + \"px\";\r\n    // 高さ（ウィンドウサイズの比率(this.height)をかけて算出）\r\n    var height = Math.floor(window.innerHeight * this.height);\r\n    this.chartId.style.height = height + \"px\";\r\n\r\n    if (this.graph)\r\n        this.graph.resize(width, height);\r\n    return height;\r\n};\r\n\r\n/**\r\n * seriesSetを取り込む\r\n * \r\n * @param {seriesSet}\r\n *            seriesSet dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.setSeriesSet = function (seriesSet) { // #30\r\n    \"use strict\";\r\n    this.seriesSet = seriesSet;\r\n    HJN.seriesConfig.forEach(function (e) {\r\n        this[e.key] = seriesSet[e.N];\r\n    }, this);\r\n};\r\n\r\n/**\r\n * 終了時刻のTAT時系列データ(eTat)から、描画用時系列データ配列を作成する\r\n * \r\n * @param {ETAT}\r\n *            eTat [[終了時刻(ms), 処理時間(sec), （任意）ログレコード等], ...]\r\n * @return {seriesSet} dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.createSeries = function (eTat) {\r\n    \"use strict\";\r\n    // 時系列データを初期化する\r\n    var conc = [], cTps = [], eTps = [], sTat = [], eMps = [], eAps = [];\r\n\r\n    // 集計対象データがないとき\r\n    if (eTat.length === 0)\r\n        return [ conc, cTps, eTps, sTat, eTat, eMps, eAps ];\r\n\r\n    /** eTatをソートする * */\r\n    // 開始時刻でソートする #35\r\n    eTat.sort(function (a, b) {\r\n        return a.x - b.x;\r\n    });\r\n    HJN_util.Logger.ShowLogText(\"[1:eTat sorten ] \" + eTat.length + \" plots\",\r\n            \"calc\");\r\n\r\n    /** eTps(時間あたり処理件数),eMps,eAps(時間あたり最大/平均応答時間)時系列データを作成する * */\r\n    var dFrom = Math.floor(eTat[0].x / this.cycle) * this.cycle,\r\n        dTo = dFrom + this.cycle,\r\n        num = 0, // #39\r\n        maxTat = 0.0, // #19\r\n        aveTmp = 0.0;\r\n    eTat.forEach(function (e) {\r\n        if (e.x < dTo) {\r\n            num += 1;\r\n            if (maxTat < e.y)\r\n                maxTat = e.y; // #19\r\n            aveTmp += e.y;\r\n        } else {\r\n            eTps.push({\r\n                x : dFrom,\r\n                y : num * 1000 / this.cycle // #57\r\n            });\r\n            eMps.push({\r\n                x : dFrom,\r\n                y : maxTat\r\n            }); // #19\r\n            eAps.push({\r\n                x : dFrom,\r\n                y : aveTmp / num\r\n            });\r\n            dFrom = Math.floor(e.x / this.cycle) * this.cycle;\r\n            dTo = dFrom + this.cycle;\r\n            num = 1;\r\n            maxTat = e.y; // #19 #39\r\n            aveTmp = e.y; // #39\r\n        }\r\n    }, this);\r\n\r\n    eTps.push({\r\n        x : dFrom,\r\n        y : num * 1000 / this.cycle // #57\r\n    });\r\n    eTps.push({ // #57\r\n        x : dFrom + this.cycle,\r\n        y : num * 1000 / this.cycle\r\n    });\r\n\r\n    eMps.push({ // #19\r\n        x : dFrom,\r\n        y : maxTat\r\n    });\r\n    eMps.push({ // #57\r\n        x : dFrom + this.cycle,\r\n        y : maxTat\r\n    });\r\n\r\n    eAps.push({\r\n        x : dFrom,\r\n        y : aveTmp / num\r\n    });\r\n    eAps.push({ // #57\r\n        x : dFrom + this.cycle,\r\n        y : aveTmp / num\r\n    });\r\n\r\n    \r\n    HJN_util.Logger.ShowLogText(\"[3:eTps,eMps,eAps created] \" + eTps.length\r\n            + \" plots\", \"calc\");\r\n\r\n    /** sTat（開始時間）時系列データを作成する,同時に入力eTatを補正する * */\r\n    // eTatからsTatを登録する\r\n    eTat.forEach(function (e, i) {\r\n        // 処理時間=0 のとき、1マイクロ秒とみなす(有効桁0.2マイクロ秒に切上される）\r\n        if (e.y === 0) {\r\n            e.y = 0.001;\r\n            e.x += e.y;\r\n        } // ミリ秒\r\n        // sTatにeTatデータを登録する\r\n        sTat.push({\r\n            x : e.x - e.y,\r\n            y : e.y,\r\n            eTatIdx : i\r\n        });\r\n    });\r\n    // 開始時刻でソートする\r\n    sTat.sort(function (a, b) {\r\n        return a.x - b.x;\r\n    });\r\n    // eTatにsTatの位置を設定する\r\n    sTat.forEach(function (s, i) {\r\n        eTat[s.eTatIdx].sTatIdx = i;\r\n    });\r\n    HJN_util.Logger.ShowLogText(\"[2:sTat created] \" + sTat.length + \" plots\",\r\n            \"calc\");\r\n\r\n    /** CONC(多重度)時系列データを作成する * */\r\n    var concTmp = [];\r\n    // eTatから、多重度が変化した時刻の一覧を作成する\r\n    eTat.map(function (e, i) {\r\n        // 開始時刻にカウントアップ情報を追加する\r\n        concTmp.push({\r\n            x : e.x - e.y,\r\n            y : 1\r\n        });\r\n        // 終了時刻をカウントダウン情報を追加する\r\n        concTmp.push({\r\n            x : e.x,\r\n            y : -1\r\n        });\r\n    });\r\n    // concを変化した時刻（開始or終了）でソートする\r\n    concTmp.sort(function (a, b) {\r\n        return a.x - b.x;\r\n    });\r\n    // concに同時取引数を設定する\r\n    var concNum = 0;\r\n    concTmp.forEach(function (c, i, a) {\r\n        // 重複削除用フラグを立てる #23\r\n        if (i > 0 && c.x === a[i - 1].x) {\r\n            a[i - 1].del = true;\r\n        }\r\n        // 同時取引数を集計する(前提：c.y に、開始なら1、終了なら(-1)が設定されている)\r\n        concNum += c.y;\r\n        c.y = concNum;\r\n    });\r\n    // concの同じ時刻の点を削除する #23\r\n    conc = concTmp.filter(function (c) {\r\n        return !c.del;\r\n    });\r\n    HJN_util.Logger.ShowLogText(\"[4:conc created] \" + conc.length + \" plots\",\r\n            \"calc\");\r\n\r\n    /** cTPS秒間同時処理件数（concurrent transactions/sec）時系列データを作成する #18 * */\r\n    var XSec = floorTime(conc[0].x, this.cycle), // ミリ秒\r\n    YMax = conc[0].y, YNext = conc[0].y;\r\n    // concの先頭と末尾の時刻(x)の差よりPlot数を求め、Plot数が規定数(8000個)を超えたら、桁上げする #38\r\n    var cTpsMaxPlots = 8000, // 桁上げするPlot数\r\n    cTpsUnits = HJN.Graph.prototype.UNIT_CTPS, // #48\r\n    concTerm = conc[conc.length - 1].x - conc[0].x, // ミリ秒\r\n    cTpsIdx = 0;\r\n    while (cTpsIdx < cTpsUnits.length\r\n            && concTerm / cTpsUnits[cTpsIdx].unit > cTpsMaxPlots) {\r\n        cTpsIdx++;\r\n    }\r\n    cTpsIdx = (cTpsUnits.length > cTpsIdx) ? cTpsIdx : cTpsUnits.length - 1;\r\n    this.cTpsUnit = cTpsUnits[cTpsIdx];\r\n    // メニューのViewのcTPSのラベルに単位を追加する\r\n    var pos = (this === HJN.chart) ? 0 : 1;\r\n    document.getElementsByName(\"cTps\")[pos].parentNode.lastChild.data = HJN.CTPS.name\r\n            + this.cTpsUnit.label;\r\n\r\n    // 規定時間単位の最大同時処理数cTPSを作成する\r\n    conc.forEach(function (c) {\r\n        if (floorTime(c.x, this.cTpsUnit.unit) === XSec) { // c.xは ミリ秒\r\n            YMax = Math.max(YMax, c.y);\r\n        } else {\r\n            cTps.push({\r\n                x : XSec,\r\n                y : Math.max(YMax, YNext)\r\n            });\r\n            for (var t = XSec + this.cTpsUnit.unit; t < floorTime(c.x,\r\n                    this.cTpsUnit.unit); t += this.cTpsUnit.unit) { // c.xはミリ秒\r\n                cTps.push({\r\n                    x : t,\r\n                    y : YNext\r\n                });\r\n                if (YNext === 0)\r\n                    break;\r\n            }\r\n            XSec = floorTime(c.x, this.cTpsUnit.unit);\r\n            YMax = Math.max(YNext, c.y);\r\n        }\r\n        YNext = c.y;\r\n    }, this);\r\n    cTps.push({\r\n        x : XSec,\r\n        y : YMax\r\n    });\r\n    cTps.push({\r\n        x : XSec + this.cTpsUnit.unit,\r\n        y : YNext\r\n    });\r\n\r\n    // HJN_util.Logger.ShowLogText(\"[5-1:cTps created] \" + cTps.length + \"\r\n    // plots\",\"calc\");\r\n\r\n    // cTpsのxからindexを引くMapを作成する #18\r\n    eTat.tatMap = new HJN_util.MappedETat(eTat);\r\n    eTat.cash = HJN_util.Cash();\r\n    HJN_util.Logger.ShowLogText(\"[5:cTps created] \" + cTps.length + \" plots(\"\r\n            + +Math.floor(concTerm / 1000) + \"sec\" + cTpsUnits[cTpsIdx].label\r\n            + \")\", \"calc\");\r\n\r\n    // 集計結果をHJN.Graphに設定する 注）this.SERIESESと同じ順番にすること\r\n    var seriesSet = [ conc, cTps, eTps, sTat, eTat, eMps, eAps ];\r\n    this.setSeriesSet(seriesSet);\r\n    return seriesSet;\r\n\r\n    // 時刻を指定ミリ秒間隔で切り捨てる（内部関数）\r\n    function floorTime(t, cycle) {\r\n        return Math.floor(Math.floor(t / cycle) * cycle);\r\n    }\r\n};\r\n\r\n/**\r\n * データを変更し描画する\r\n * \r\n * @param {seriesSet}\r\n *            seriesSet dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.update = function (seriesSet, n) {\r\n    \"use strict\";\r\n    // 指定データがあるとき取り込む\r\n    if (seriesSet)\r\n        this.setSeriesSet(seriesSet);\r\n    // dygraph用表示データを作成する\r\n    var xy = [], // グラフデータ({x:,y:}ペアの配列）の一覧（グラフ１本が配列要素）\r\n    idx = [], // グラフデータの処理中配列位置を保有する配列\r\n    x = [], // グラフデータの処理中配列のｘ(時刻)の値を保有する配列\r\n    row = [], // dygraph１レコードワーク配列：（[x,y0,y1...]の配列）の一レコード分を保持する配列\r\n    minX = 0, i = 0; // グラフ番号用ワーク\r\n    // xy[] に処理対象seriesを指定する\r\n    for (i = 0; i < this.SERIESES.length; i++) {\r\n        xy[i] = this.seriesSet[this.SERIESES[i].N];\r\n        idx[i] = 0;\r\n    }\r\n    // dygraph表示時間帯を設定する（上段グラフは全期間が処理対象）\r\n    var xRangeMin = Number.MIN_VALUE,\r\n        xRangeMax = Number.MAX_VALUE,\r\n        xRangeUnit = HJN.detailRangeUnit; // #61\r\n    if (HJN.chartD === this) { // 詳細（下段グラフ）のとき画面で指定された期間を設定する // ミリ秒\r\n        if ((n === HJN.ETPS.N || n === HJN.EMPS.N || n === HJN.EAPS.N)  // #57\r\n                && xRangeUnit < HJN.chartD.cycle){ // #61\r\n            var dt = Math.floor(+HJN.detailDateTime / HJN.chartD.cycle) * HJN.chartD.cycle;\r\n            xRangeMin = dt - HJN.detailRangeMinus * HJN.detailRangeUnit;\r\n            xRangeMax = dt + HJN.detailRangePlus * HJN.detailRangeUnit;\r\n        } else { // undefined, HJN.CTPS.N, HJN.CONC.N, HJN.STAT.N, HJN.ETAT.N\r\n            var dt = Math.floor(+HJN.detailDateTime / xRangeUnit) * xRangeUnit; // #61\r\n            xRangeMin = dt - HJN.detailRangeMinus * HJN.detailRangeUnit; // #48\r\n            xRangeMax = dt + HJN.detailRangePlus * HJN.detailRangeUnit; // #48\r\n        }\r\n    }\r\n\r\n    // dygraph用arrayを空にする\r\n    this.dyData = [];\r\n\r\n    // 指定範囲の先頭が秒単位の端数のとき、dygraph用arrayに、先頭ワークデータを登録する #3\r\n    var xVal = Math.floor(xRangeMin / 1000) * 1000;\r\n    if (Number.MIN_VALUE < xRangeMin && xRangeMin !== xVal) { // 範囲指定（＝下段）\r\n        var firstRow = [ xRangeMin ]; // 先頭はx（時刻）\r\n        xy.forEach(function (xyData, i) {\r\n            // 秒間最大値系のyは最大値or０を、他はnullを設定する\r\n            var yVal = null;\r\n            if (this.SERIESES[i].key === HJN.CTPS.key) {\r\n                // 始端時刻を含む秒の値（最大値）を、始端時刻にセットする\r\n                var j = HJN_util.binarySearch(xVal, xyData, function (e) {\r\n                    return e.x;\r\n                });\r\n                yVal = (0 <= j) ? xyData[j].y : 0;\r\n            }\r\n            firstRow.push(yVal);\r\n        }, this);\r\n        this.dyData.push(firstRow);\r\n    }\r\n\r\n    // dygraph用arrayに表示データを登録する\r\n    while (xy.some(function (e, i) {\r\n        return (idx[i] < e.length);\r\n    })) {\r\n        // dygraph１レコードワーク配列 を空にする\r\n        row = [];\r\n        // dygraph１レコードワーク配列 の先頭に、次に追加するｘ（時刻＝各ｘｙ処理位置が持つｘの最小値）を設定する\r\n        xy.forEach(function (e, i) {\r\n            x[i] = (idx[i] < e.length) ? e[idx[i]].x : Number.MAX_VALUE;\r\n        });\r\n        minX = x[0]; // minX = Math.min.apply(null, x);\r\n        for (i = 1; i < x.length; i++) {\r\n            if (x[i] < minX)\r\n                minX = x[i];\r\n        }\r\n        row.push(minX); // ミリ秒\r\n        // dygraph１レコードワーク配列 の２番目以降に、各ｘｙのｘを設定する\r\n        xy.forEach(function (e, i) {\r\n            if (e.length <= idx[i]) {\r\n                row.push(null); // 末尾を過ぎたｘｙのyはnull\r\n            } else if (e[idx[i]].x === minX) {\r\n                // ｘｙのｘ(e[idx[i]].x)が、出力するｘ(minX)と同じとき、ｙを設定し、ｘｙの処理位置(idx[i])を次に進める\r\n                row.push(e[idx[i]].y);\r\n                idx[i]++;\r\n            } else {\r\n                row.push(null); // xと ｘｙのｘが異なる場合 null\r\n            }\r\n        });\r\n        // dygraph用arrayに、編集したdygraph１レコードワーク配列 を登録する\r\n        if (xRangeMin <= minX && minX <= xRangeMax) {\r\n            this.dyData.push(row);\r\n        }\r\n    }\r\n    // 指定範囲の先頭が秒単位の端数のとき、dygraph用arrayに、末尾ワークデータを登録する #3\r\n    if (xRangeMax < Number.MAX_VALUE && // 範囲指定（＝下段）\r\n    xRangeMax !== Math.floor(xRangeMax / 1000) * 1000) {\r\n        var lastRow = [ xRangeMax ]; // 先頭はx（時刻）\r\n        xy.forEach(function (e, i) { // 秒間最大値系のyは始端：最大値、終端：０を、他はnullを設定\r\n            lastRow.push((this.SERIESES[i].key === HJN.CTPS.key) ? 0 : null);\r\n        }, this);\r\n        this.dyData.push(lastRow);\r\n    }\r\n\r\n    HJN_util.Logger.ShowLogText(\"[7:dygraph data created] \"\r\n            + this.dyData.length + \" rows\", \"calc\");\r\n\r\n    // グラフの設定\r\n    var visibility = [];\r\n    if (this.isVisiblity) {\r\n        // visiblity指定できるとき画面の表示指定を取り込む\r\n        var inputs = document[this.chartIdName + \"_LegendForm\"];\r\n        for (i = 0; i < this.SERIESES.length; i++) {\r\n            visibility.push(inputs[this.SERIESES[i].key].checked);\r\n        }\r\n    } else {\r\n        // visiblity指定できないとき、デフォルト設定を取り込む\r\n        for (i = 0; i < this.SERIESES.length; i++) {\r\n            visibility.push(this.SERIESES[i].visiblity);\r\n        }\r\n    }\r\n\r\n    // グラフの作成\r\n    if (this.graph) {\r\n        // 既にグラフがあるときはデータのみ変更する（注：ここでdestroy()すると下段のpointClickCallback時にエラー）\r\n        this.graph.updateOptions( {\r\n            file : this.dyData\r\n        } );\r\n        this.graph.resetZoom(); // #51\r\n    } else {\r\n        // グラフが無いときは新規作成する\r\n        this.graph = new Dygraph(this.chartId, this.dyData, {\r\n            height : this.resize(),\r\n            labels : this.labels,\r\n            title : this === HJN.chart ? '' : '', // タイトル\r\n            titleHeight : 10, // タイトルの高さ＆フォントサイズ（デフォルト18px)\r\n            legend : 'always', // 'follow', //\r\n            showLabelsOnHighlight : false, // 効果不明\r\n            // labelsDiv : document.getElementById(HJN.chartName + 'Labels'), //\r\n            // ラベル表示先の変更\r\n            labelsSeparateLines : false,\r\n            // legendFormatter: this.legendFormatter, // コメントアウトでlegendが非表示\r\n            axes : {  // 軸の設定\r\n                x : { // X軸の設定\r\n                    axisLabelFormatter : xAxisLabelFormatter, // ラベル表示文字列編集関数\r\n                    axisLabelWidth : 100        // X軸ラベルの表示幅（幅が不足すると文字が切れる）\r\n                },\r\n                y : { // Y2（左）軸の設定\r\n                    independentTicks : true,    // 目盛合わせ（falseはY2軸に合わせる）\r\n                    axisLabelWidth : 40,        // ラベル表示幅\r\n                    // axisLineColor : 'rgb(0,0,0)',// 軸の色\r\n                    // axisLabelFontSize : 14, // ラベルのフォントサイズ(デフォルト:14)\r\n                    logscale : false            // 対数軸\r\n                },\r\n                y2 : { // Y2（右）軸の設定\r\n                    axisLabelFormatter : yAxisLabelFormatter, // ラベル表示文字列編集関数\r\n                    independentTicks : true,    // 目盛合わせ（falseはY1軸に合わせる）\r\n                    axisLabelWidth : 65,        // ラベル表示幅\r\n                    drawGrid : true,            // 横罫線\r\n                    gridLinePattern : [ 1, 2 ], // 罫線形状（破線）\r\n                    logscale : false            // 対数軸\r\n                }\r\n            },\r\n            includeZero : true,\r\n            // axisLabelFontSize: 10,\r\n            axisLineColor : 'rgba(0, 0, 0, 0.2)',\r\n            gridLineColor : 'rgba(0, 0, 0, 0.2)',\r\n            strokeWidth : 2,\r\n            pointSize : 3,\r\n            ylabel: 'Number of transactions',\r\n            y2label : 'Sec', // this === HJN.chart ? '' : 'Sec',\r\n            // rollPeriod: 7,\r\n            // errorBars: true,\r\n            // showRangeSelector: true\r\n            // drawPointCallback: drawPointCallback,\r\n            drawHighlightPointCallback : drawHighlightPointCallback,\r\n            highlightCircleSize : 3,\r\n            highlightCallback : highlightCallback,\r\n            pointClickCallback : pointClickCallback,\r\n            annotationClickHandler : annotationClickHandler,\r\n            annotationDblClickHandler : annotationDblClickHandler,\r\n            // clickCallback: clickCallback,\r\n            drawCallback : HJN.Graph.DrawCallback, // #50 #51\r\n            highlightSeriesOpts : {\r\n            // strokeWidth: 3,\r\n            // strokeBorderWidth: 1,\r\n            // highlightCircleSize: 5\r\n            },\r\n            series : this.dySeries,\r\n            labelsKMB : true,\r\n            visibility : visibility,\r\n            interactionModel: { // #22\r\n                mousedown: Dygraph.defaultInteractionModel.mousedown,\r\n                willDestroyContextMyself: true,\r\n                // touchstart: function(){}, 空functionと未登録は同じ効果\r\n                // touchmove: function(){},\r\n                // touchend: function(){},\r\n                dblclick: Dygraph.defaultInteractionModel.dblclick\r\n            },\r\n            animatedZooms : true, // ズームするときのアニメーション有無（デフォルト:false）\r\n            connectSeparatedPoints : true\r\n        });\r\n        // dygraphイベント処理でHJJを取れるように（注：循環参照）\r\n        this.graph.HJN = this;\r\n        // スマフォ対応 #22\r\n        HJN_util.TouchPanel.DispatchEventTouchToMouse(this.graph.canvas_);\r\n        HJN_util.TouchPanel.DispatchEventTouchToMouse(this.graph.canvas_ctx_.canvas);\r\n    }\r\n    // zoom reset ボタン追加 #22\r\n    this.addIcon_ZoomReset();\r\n    HJN_util.Logger.ShowLogText(\"[8:dygraph showen] \", \"calc\");\r\n\r\n    // 初期表示の不活性グラフの設定\r\n    function xAxisLabelFormatter(d, gran, opts) {\r\n        // return Dygraph.dateAxisLabelFormatter(new Date(d), gran, opts); #63\r\n        var isTop = (this.xAxisRange()[0] === d);\r\n        var format = \"\";\r\n        var diffTime = this.xAxisRange()[1] - this.xAxisRange()[0];\r\n        if (diffTime < 60000) { \r\n            format = isTop ? \"hh:mm:ss.ppp\" : \"ss.ppp\";\r\n        } else if (diffTime < 86400000) { // 1日未満\r\n            format = \"hh:mm:ss\";\r\n        } else if (diffTime < 31536000000) { // 365日未満\r\n            format = isTop ? \"yyyy/MM/dd\": \"MM/dd hh\";\r\n        } else { // 365日以上\r\n            format = \"yyyy/MM/dd\";\r\n        }\r\n        return HJN_util.D2S(d,format,true);\r\n    }\r\n    function yAxisLabelFormatter(d, gran, opts) { // #63\r\n        var range = this.yAxisRanges()[1];\r\n        var format = \"\";\r\n        var diff = range[1] - range[0];\r\n        if (diff < 300000) { // 300秒未満\r\n            return \"\" + d / 1000;\r\n        } else if (diff < 86400000) { // 1日未満\r\n            return HJN_util.D2S(d, \"hh:mm:ss\", true);\r\n        } else if (diff < 172800000) { // 2日未満\r\n            var hours = Math.ceil(d / 3600000) + \":\";\r\n            return hours + HJN_util.D2S(d, \"mm:ss\", true);\r\n        } else { // 2日以上\r\n            var days = Math.ceil(d / 86400000) + \" days+\";\r\n            var time = HJN_util.D2S(d, \" hh:mm:ss\", false);\r\n            return (d < 172800000) ? time : days; // 2日未満？\r\n        }\r\n    }\r\n\r\n    // 再描画する\r\n    this.showBalloon();\r\n    HJN_util.Logger.ShowLogText(\"[9:balloon showen] \", \"calc\");\r\n\r\n    // updateメソッド内部関数宣言\r\n    // 点がハイライトになったときの描画処理（内部関数宣言） g:{dygraph} HJN.chartD.graph\r\n    function drawHighlightPointCallback(g, name, ctx, cx, cy, color, r, idx) {\r\n        // file dropのとき、新グラフデータに更新後に、旧グラフのidx値が引き渡されたとき 処理しない #12\r\n        if (!g.rawData_ || g.rawData_.length - 1 < idx)\r\n            return;\r\n        var x = g.rawData_[idx][HJN.CONC.N]; // 選択されている点(時刻)のCONCのxの値（無いときundefined)\r\n        var eTat = HJN.chart.eTat;\r\n        var sTat = HJN.chart.sTat;\r\n        var n = 0;\r\n\r\n        // ETAT,STATのときlogレコードを表示する #28\r\n        if ((name === HJN.STAT.key || name === HJN.ETAT.key)\r\n                && typeof x != 'undefined') { // #41\r\n            // eTatの配列位置をを求める\r\n            if (name === HJN.ETAT.key) {\r\n                // ETATのとき、終了時刻(x)からeTatの配列位置(n)を検索する\r\n                n = HJN_util.binarySearch(x, eTat, \r\n                                    function (e) { return e.x; });\r\n            } else {\r\n                // STATのとき、開始時刻(x)からsTatの配列位置(sTatN)を検索し、sTatからeTatの配列位置を取得する\r\n                var sTatN = HJN_util.binarySearch(x, sTat, \r\n                                    function (e) { return e.x; });\r\n                n = sTat[sTatN].eTatIdx;\r\n            }\r\n            // ログデータを表示し、線を引く\r\n            if (0 <= n) {\r\n                var e = eTat[n];\r\n                // ログデータを表示する\r\n                document.getElementById(\"lineViewer\").innerHTML =\r\n                            this.HJN.fileReader.getRecordAsText(e); // #62\r\n                // 線を引く #30\r\n                drawTatLine(ctx, e.x, e.y, 2, color);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n\r\n        // CONCのとき同時処理の線を引く\r\n        if (name === HJN.CONC.key && typeof eTat.tatMap != 'undefined') { // #17\r\n            // #41\r\n            // 指定時刻に動いているeTatの一覧(trans)を取得する\r\n            var trans = eTat.tatMap.search(x, x, 1000); // #18\r\n            // 以前に選択した線を消す\r\n            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n            // 同時処理の線を引く\r\n            if (0 <= i && 0 < trans.length) {\r\n                // TRANS分の線を引く\r\n                trans.forEach(function (e) {\r\n                    drawTatLine(ctx, e.x, e.y, 1, HJN.CONC.color);\r\n                });\r\n            }\r\n            ctx.stroke();\r\n        }\r\n\r\n        // 選択点の点と数値を表示する\r\n        var val = \"\";\r\n        var time = \"\";\r\n        if (0 <= idx) {\r\n            time = g.rawData_[idx][0]; // #60\r\n            val = name ? g.rawData_[idx][g.setIndexByName_[name]] : \"\";\r\n            // valが時間のとき、 時間表記に文字列編集する\r\n            if (name === HJN.STAT.key || name === HJN.ETAT.key \r\n                    || name === HJN.EMPS.key || name === HJN.EAPS.key) {\r\n                val = HJN_util.D2S(val);\r\n            }\r\n        }\r\n        drawPoint(ctx, cx, cy, r, color, val, time);\r\n        // 縦線を引く\r\n        drawLine(ctx, [ {\r\n            x : cx,\r\n            y : 0\r\n        }, {\r\n            x : cx,\r\n            y : ctx.canvas.height\r\n        } ], 1, \"rgba(127,127,127,0.5)\", [ 1, 2 ]);\r\n\r\n        // drawHighlightPointCallback 内部関数宣言\r\n        // TAT線を表示する（内部関数）\r\n        function drawTatLine(ctx, x, y, heigth, color) {\r\n            // isXend指定の始点(false)／終点（true)に合わせて、線の座標を求める\r\n            var tXs = g.toDomXCoord(x - y), // ミリ秒\r\n            tXe = g.toDomXCoord(x), // ミリ秒\r\n            tY = g.toDomYCoord(y, 1); // 第二軸:1\r\n            drawLine(ctx, [ {\r\n                x : tXs,\r\n                y : tY\r\n            }, {\r\n                x : tXe,\r\n                y : tY\r\n            } ], heigth, color);\r\n            drawPoint(ctx, tXs, tY, r, HJN.STAT.color);\r\n            drawPoint(ctx, tXe, tY, r, HJN.ETAT.color);\r\n        }\r\n\r\n        // 線を表示する（内部関数）\r\n        function drawLine(ctx, plots, r, color, lineDashSegments) {\r\n            ctx.beginPath();\r\n            ctx.lineWidth = r;\r\n            ctx.lineCap = \"round\";\r\n            ctx.strokeStyle = color;\r\n            if (lineDashSegments)\r\n                ctx.setLineDash(lineDashSegments); // lineDashは[num]\r\n            ctx.moveTo(plots[0].x, plots[0].y);\r\n            plots.forEach(function (p) {\r\n                ctx.lineTo(p.x, p.y);\r\n            });\r\n            ctx.stroke();\r\n        }\r\n\r\n        // 点を表示する（内部関数）\r\n        function drawPoint(ctx, cx, cy, r, color, val, time) {\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = color;\r\n            ctx.fillStyle = color;\r\n            ctx.arc(cx, cy, r, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            var text = \"\";\r\n            if (val || time) {\r\n                if (typeof(val) === \"number\") {\r\n                    text += Math.round(val * 10) / 10;\r\n                } else if (typeof(val) === \"string\") { // #60\r\n                    text += val;\r\n                }\r\n                if (val && time) text += \" \";\r\n                if (time) text += \"[\" + HJN_util.D2S(time, \"hh:mm:ss.ppp\", true) + \"]\"; // #60\r\n                ctx.beginPath();\r\n                ctx.fillStyle = color.replace(/\\,[\\s\\.0-9]*\\)/,\",1)\"); // #60\r\n                ctx.textAlign = \"left\"; // \"rigth\" \"center\" #60\r\n                ctx.fillText(text, cx, cy - 12);\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 点がハイライトになったときの処理（内部関数宣言）\r\n    function highlightCallback(e, x, pts, row, seriesName) {\r\n        // マウスクリック用に座標をHJN.hoverXYに退避する\r\n        HJN.hoverXY = {\r\n            x : x,\r\n            pts : pts,\r\n            row : row,\r\n            seriesName : seriesName\r\n        };\r\n    }\r\n\r\n    // 点をクリックしたときの処理(内部関数宣言）\r\n    function pointClickCallback(event, p) {\r\n        if (!p.annotation)\r\n            HJN.Plot.PointClickCallback(p);\r\n    }\r\n\r\n    // アノテーション（グラフ中の吹出し）をクリックしたときの処理(内部関数宣言）\r\n    function annotationClickHandler() { // annotation, p, dygraph, event\r\n        HJN.Plot.PointClickCallback(arguments[1]);\r\n    }\r\n\r\n    // アノテーション（グラフ中の吹出し）をダブルクリックしたときの処理(内部関数宣言）\r\n    function annotationDblClickHandler() { // annotation, p, dygraph, event\r\n        // 指定ポイントを削除する\r\n        HJN.Plot.PointDblClickCallback(arguments[1]);\r\n    }\r\n\r\n    // グラフをクリックしたときの処理(内部関数宣言）\r\n    // function clickCallback(e, x, pts) {}\r\n};\r\n\r\n/**\r\n * dygraphのBalloonを再描画する\r\n */\r\nHJN.Graph.prototype.showBalloon = function () {\r\n    \"use strict\";\r\n    if (this.cTps.length === 0)\r\n        return; // ctpsが空の時何もしない\r\n\r\n    var ann = {\r\n        series : \"\",\r\n        xval : 0,\r\n        shortText : \"\",\r\n        text : \"\"\r\n    }, anns = [];\r\n    // 表示時間帯を求める\r\n    var ctps = this.cTps, minX = ctps[0].x, maxX = ctps[ctps.length - 1].x;\r\n    // アノテーションをdygparhに追加する\r\n    HJN.Plot.List.forEach(function (e) {\r\n        if (minX <= e.x && e.x <= maxX) {\r\n            ann = {\r\n                series : HJN.seriesConfig[e.n].key,\r\n                xval : e.x, // ミリ秒\r\n                shortText : e.y,\r\n                text : e.label\r\n            };\r\n            anns.push(ann);\r\n            // 詳細Plot＆詳細グラフデータが無いとき、詳細Plot内のTPS Plotを追加する #7\r\n            if (\"tpsPlot\" in e) { // 詳細plotのとき\r\n                if (this.SERIESES.findIndex(function (s) {\r\n                    return s.N === e.n;\r\n                }) < 0) { // 詳細グラフデータが無いとき\r\n                    ann = {\r\n                        series : HJN.seriesConfig[e.tpsPlot.n].key,\r\n                        xval : e.tpsPlot.x, // ミリ秒\r\n                        shortText : e.tpsPlot.y,\r\n                        text : e.tpsPlot.label\r\n                    };\r\n                    anns.push(ann);\r\n                }\r\n            }\r\n        }\r\n    }, this);\r\n    // dygraphの残描画処理が完了してからアノテーションをセットする\r\n    this.graph.ready(function () {\r\n        this.setAnnotations(anns);\r\n    });\r\n};\r\n\r\n/**\r\n * dygraphのlegendを編集する(dygraph オプション登録用関数）\r\n * {@link http://dygraphs.com/options.html#legendFormatter}\r\n * \r\n * @param {ETAT}\r\n *            data [[終了時刻(ms), 処理時間(sec), （任意）ログレコード等], ...]\r\n * @return {string} dygraphのlegendに表示する文字（HTML)\r\n */\r\nHJN.Graph.prototype.legendFormatter = function (data) {\r\n    \"use strict\";\r\n    // legend: 'always'指定のとき、マウスがグラフ外にあると dataに値が設定されていなことを考慮\r\n    var html = (typeof data.x === \"undefined\") ? '' : HJN_util.DateToString(\r\n            new Date(data.xHTML), \"yyyy/MM/dd hh:mm:ss.ppp\");\r\n    html = '<label class=\"datetime\">' + html + '</label>';\r\n    data.series\r\n            .forEach(function (series) {\r\n                if (!series.isVisible)\r\n                    return;\r\n                var val = (typeof series.yHTML === \"undefined\") ? \"\"\r\n                        : series.yHTML, text = '<label '\r\n                        + getStyle(series.label)\r\n                        + '\">'\r\n                        + \"&nbsp;\"\r\n                        + series.labelHTML\r\n                        + ':'\r\n                        + ('####' + val.replace(/\\.[0-9]*/, \"\")).slice(-4)\r\n                                .replace(/#/g, \"&nbsp;\") + '</label>';\r\n                html += series.isHighlighted ? '<b>' + text + '</b>' : text;\r\n                html += '&nbsp;';\r\n            });\r\n    return html;\r\n    // keyに設定された色指定するstyle文字列を取得する（legendFormatter内部関数宣言）\r\n    function getStyle(key) {\r\n        var i = HJN.seriesConfig.findIndex(function (e) {\r\n            return (e.key === key);\r\n        });\r\n        return 'style=\"background:' + HJN.seriesConfig[i].color + ';';\r\n    }\r\n};\r\n\r\n/*\r\n * メニュー関連機能 ************************************\r\n */\r\n/**\r\n * メニューを追加する\r\n * \r\n * @param {ETAT}\r\n *            eTat [[終了時刻(ms), 処理時間(sec), （任意）ログレコード等], ...]\r\n * @return {seriesSet} dygraph用時系列データ配列\r\n */\r\nHJN.Graph.prototype.addMenu = function () {\r\n    \"use strict\";\r\n    // メニュー用のエレメントを取得する\r\n    var divMenuId = this.chartIdName + \"_menu\";\r\n    var divMenu = document.getElementById(divMenuId);\r\n    // menu用divがないとき、chartの直前に追加する #13\r\n    if (!divMenu) {\r\n        var div = document.createElement('div');\r\n        div.id = divMenuId;\r\n        div.className = \"menuBar\";\r\n        divMenu = this.chartId.parentNode.insertBefore(div, this.chartId);\r\n    }\r\n    // メニューボタン定義を登録する\r\n    var g = this.globalName;\r\n    // 上下段共通ボタンの定義(Download Menu)\r\n    var menuDownloadImg = { // getATag\r\n        menuLabel : \"graph image(.png)\",\r\n        funcName : g + \".menuDownloadImg\",\r\n        menuId : divMenuId + \"_DownloadImg\",\r\n        fileName : \"graph.png\"\r\n    };\r\n    var menuDownloadCsv = { // getATag\r\n        menuLabel : \"graph data(.csv)\",\r\n        funcName : g + \".menuDownloadCsv\",\r\n        menuId : divMenuId + \"_DownloadCsv\",\r\n        fileName : \"graph.csv\"\r\n    };\r\n    var menuDownloadLog = { // getATag\r\n        menuLabel : \"graph log records(.csv)\",\r\n        funcName : g + \".menuDownloadLog\",\r\n        menuId : divMenuId + \"_DownloadLog\",\r\n        fileName : \"tatlog.csv\"\r\n    };\r\n    var menuDownloadConc = { // getATag\r\n        menuLabel : \"conc log records(.csv)\",\r\n        funcName : g + \".menuDownloadConc\",\r\n        menuId : divMenuId + \"_DownloadConc\",\r\n        fileName : \"conclog.csv\"\r\n    };\r\n\r\n    // メニューを追加する\r\n    var accordion = document.createElement('div'); // 要素の作成\r\n    var _id = 0;\r\n    if (HJN.chart.chartId === this.chartId) { // 上段グラフ用機能のメニュー追加\r\n        // File Menu\r\n        var menuOpenCsv = { // getInputTag\r\n            menuLabel : \"Open csv data file\",\r\n            funcName : g + \".menuOpenCsv\",\r\n            menuId : divMenuId + \"_OpenCsv \"\r\n        };\r\n        var menuSaveConfig = { // getATag\r\n            menuLabel : \"save format (.json)\",\r\n            funcName : g + \".menuSaveConfig\",\r\n            menuId : divMenuId + \"_SaveCongig\",\r\n            fileName : \"hjnconfig.json\"\r\n        };\r\n        var menuLoadConfig = { // getInputTag #10\r\n            menuLabel : \"load format (.json)\",\r\n            funcName : g + \".menuLoadConfig\",\r\n            menuId : divMenuId + \"_LoadCongig\"\r\n        };\r\n        accordion.innerHTML = '<li class=\"hjnMenuLv1\">'\r\n                + getAccordionTag(this, ++_id, \"File\") + '<ul class=\"hjnMenuLv2\">'\r\n                + getInputTag(menuOpenCsv)\r\n                + this.fileReader.getConfigHtml(\"File\") // #24\r\n                + getATag(menuSaveConfig) + getInputTag(menuLoadConfig) // #10\r\n                + '</ul>' + '</li>';\r\n\r\n        // Filter Menu #34\r\n        var menuFilterApply = { // getFuncTag #34\r\n            menuLabel : \"Apply filter & reload\",\r\n            funcName : g + \".menuFilterApply\",\r\n            menuId : divMenuId + \"_FilterApply\"\r\n        };\r\n        var menuFilterClear = { // getFuncTag #34\r\n            menuLabel : \"Clear filter condition\",\r\n            funcName : g + \".menuFilterClear\",\r\n            menuId : divMenuId + \"_FilterClear\"\r\n        };\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_Filter\">'\r\n                + getAccordionTag(this, ++_id, \"Filter\")\r\n                + '<ul class=\"hjnMenuLv2\">'\r\n                + this.fileReader.getConfigHtml(\"Filter\") // #24\r\n                + getFuncTag(menuFilterApply)\r\n                + getFuncTag(menuFilterClear)\r\n                + '</ul>' + '</li>';\r\n\r\n        // Simulator Menu #53\r\n        var menuSimulatorSimulate = {\r\n            menuLabel : \"Simulate\",\r\n            funcName : g + \".menuSimulatorSimulate\",\r\n            menuId : divMenuId + \"_SimulatorSimulate\"\r\n        };\r\n        var menuSimulatorEditor = {\r\n                menuLabel : \"JSON Editor(Open/Close)\",\r\n                funcName : g + \".menuSimulatorEditor\",\r\n                menuId : divMenuId + \"_SimulatorEditor\"\r\n            };\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_Simulator\">'\r\n                + getAccordionTag(this, ++_id, \"Simulator\")\r\n                + '<ul class=\"hjnMenuLv2\">'\r\n                + getFuncTag(menuSimulatorSimulate)\r\n                + getFuncTag(menuSimulatorEditor)\r\n                + this.fileReader.getConfigHtml(\"Simulator\") // #53\r\n                + '</ul>' + '</li>';\r\n        // シミュレーション条件JSON Editエリアを設定する\r\n        var divSimulator = document.getElementById(\"Simulator\");\r\n        var jsonEditor = document.createElement('div'); // 要素の作成\r\n        jsonEditor.innerHTML = '<textarea id=\"SimulatorEditor\" '\r\n            + 'style=\"width:99%;border:none;resize:none;background:rgba(255,255,255,0.5);height:500px;\">'\r\n        divSimulator.appendChild(jsonEditor);\r\n        var divSimulatorEditor = document.getElementById(\"SimulatorEditor\");\r\n        divSimulatorEditor.readOnly = true; // #22\r\n        divSimulatorEditor.value = HJN_util.virtualSystemByJson.GetJsonConfig(); // デフォルトJSON\r\n        \r\n        // View Menu\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_View\">'\r\n                + getAccordionTag(this, ++_id, \"View\", true)\r\n                + '<ul class=\"hjnMenuLv2\">' // \r\n                + '<li><div id=\"' + this.chartIdName + '_legend\"></div></li>'\r\n                + '</ul>' + '</li>';\r\n\r\n        // Download Menu\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\" id=\"menu_Download\">'\r\n                + getAccordionTag(this, ++_id, \"Download\")\r\n                + '<ul class=\"hjnMenuLv2\">' //\r\n                + getATag(menuDownloadImg, \"Upper \")\r\n                + getATag(menuDownloadCsv, \"Upper \")\r\n                + getATag(menuDownloadLog, \"Upper \")\r\n                + getATag(menuDownloadConc, \"Upper \") + '</ul>' + '</li>';\r\n\r\n        // メニュー登録\r\n        divMenu.appendChild(accordion);\r\n        // イベントリスナー登録\r\n        document.getElementById(menuOpenCsv.menuId).addEventListener('change',\r\n                this.menuOpenCsv.bind(this), false); // File Open用\r\n        document.getElementById(menuLoadConfig.menuId).addEventListener(\r\n                'change', this.menuLoadConfig.bind(this), false); // LoadConfig用\r\n\r\n    } else { // 下段用グラフ機能のメニュー追加\r\n        _id += 100;\r\n        // Download Menu\r\n        var chartDownloadUl = document.createElement('ul');\r\n        chartDownloadUl.className = \"hjnMenuLv2\";\r\n        chartDownloadUl.innerHTML = '' //\r\n                + getATag(menuDownloadImg, \"Detail \")\r\n                + getATag(menuDownloadCsv, \"Detail \")\r\n                + getATag(menuDownloadLog, \"Detail \")\r\n                + getATag(menuDownloadConc, \"Detail \");\r\n        var chartDownload = document.getElementById(\"menu_Download\");\r\n        chartDownload.appendChild(chartDownloadUl);\r\n\r\n        // View Menu\r\n        var chartViewUl = document.createElement('ul');\r\n        chartViewUl.className = \"hjnMenuLv2\";\r\n        chartViewUl.innerHTML = '<li><div id=\"' + this.chartIdName\r\n                + '_legend\"></div></li>';\r\n        var chartView = document.getElementById(\"menu_View\");\r\n        chartView.appendChild(chartViewUl);\r\n\r\n        // \"Bottom detail graph\" Menu\r\n        accordion.innerHTML = '<li class=\"hjnMenuLv1\">'\r\n                + getAccordionTag(this, ++_id, \"Bottom detail graph\", true)\r\n                + '<ul class=\"hjnMenuLv2\">' //\r\n                + '<ol><div id=\"detailTimeRange\">' + getDetailTimeRangeTag()\r\n                + '</div></ol>' // #51\r\n                + '<li><div id=\"chartPlots\"></div></li>' //\r\n                + '</ul>' + '</li>';\r\n\r\n        // Help Menu\r\n        var menuHelpAbout = { // getAlertTag\r\n            menuLabel : \"about TAT log diver\",\r\n            menuId : divMenuId + \"_HelpAbout\",\r\n            strFuncName : \"HJN.init.Copyright()\"\r\n        };\r\n        accordion.innerHTML += '<li class=\"hjnMenuLv1\">'\r\n                + getAccordionTag(this, ++_id, \"Help\")\r\n                + '<ul class=\"hjnMenuLv2\" style=\"width: 100%;\">' //\r\n                + getAlertTag(menuHelpAbout)\r\n                + '</ul>' + '</li>';\r\n\r\n        // メニュー登録\r\n        divMenu.appendChild(accordion);\r\n    }\r\n\r\n    // アコーディオンラベル用<input><label>タグ編集（内部関数宣言） #31\r\n    // idは、ユニークな英数字なら何でもよい（ラベル押下時のアコーディオン開閉ラジオボタン連動用の接尾語）\r\n    function getAccordionTag(that, id, labelText, isChecked) {\r\n        var isAccordion = true, // true:アコーディオン型 false:折りたたみ型 #21\r\n        typeStr = isAccordion ? ' type=\"checkbox\" name=\"accordion\" '\r\n                : ' type=\"radio\" name=\"accordion\" ', //\r\n        checkedStr = ' checked=\"checked\" ';\r\n        return '' + '<input id=\"ac-' + that.chartIdName + id + '\"' + typeStr\r\n                + (isChecked ? checkedStr : '') + '\">' + '<label for=\"ac-'\r\n                + that.chartIdName + id + '\">' + labelText + '</label>';\r\n    }\r\n\r\n    // File Open用<input>タグ編集（内部関数宣言）\r\n    // '<ol><a><label>Child Menu<input type=\"file\" id=\"xxx\"\r\n    // multiple/></label></a></ol>\r\n    function getInputTag(arg) {\r\n        return '' + '<ol><a><label class=\"hjnButton4Input\">' + arg.menuLabel // #51\r\n                + '<input type=\"file\" id=\"' + arg.menuId + '\"  multiple />'\r\n                + '</label></a></ol>';\r\n    }\r\n\r\n    // ダウンロード用<A>タグ編集（内部関数宣言）\r\n    // '<li><a id=\"xxx\" href=\"#\">Child Menu</a><li/>'\r\n    function getATag(arg, preLabel) {\r\n        preLabel = preLabel || \"\";\r\n        return '' + '<li><a id=\"' + arg.menuId + '\" '\r\n                + 'class=\"hjnButton4Input\" href=\"#\" ' // #51\r\n                + 'download=\"' + arg.fileName + '\" ' //\r\n                + 'onclick=\"' + arg.funcName + '(' + \"'\" + arg.menuId + \"', '\"\r\n                + arg.fileName + \"'\" + ')\" ' + '>' + preLabel + arg.menuLabel\r\n                + '</a></li>';\r\n    }\r\n\r\n    // グローバルメソッド呼出用<A>タグ編集（内部関数宣言） #34\r\n    // '<li><a id=\"xxx\" href=\"#\">Child Menu</a></li>'\r\n    function getFuncTag(arg, preLabel) {\r\n        preLabel = preLabel || \"\";\r\n        return '' + '<li><a id=\"' + arg.menuId + ' \"'\r\n                + 'class=\"hjnButton4Input\" href=\"#\" ' // #51\r\n                + 'onclick=\"' + arg.funcName + '()\">' //\r\n                + preLabel + arg.menuLabel + '</a></li>';\r\n    }\r\n\r\n    // Alert用<A>タグ編集（内部関数宣言）\r\n    // '<a id=\"xxx\" onclick=Alert(\"xxx\")>Child Menu</a>'\r\n    function getAlertTag(arg) {\r\n        return '' + '<ol><a id=\"' + arg.menuId + '\"'\r\n                + 'class=\"hjnButton4Input\" ' // #51\r\n                + ' onclick=\"alert(' + arg.strFuncName + \")\" + '\"' + '>' //\r\n                + '<label>' + arg.menuLabel + '</label></a></ol>';\r\n    }\r\n\r\n    // 下段表示幅指定用<div>タグ編集\r\n    function getDetailTimeRangeTag() {\r\n        var initPlus = 1, initMinus = 2; // #3\r\n        return 'Range: '\r\n                + '- <input type=\"number\" id=\"DetailRangeMinus\" min=\"0\" step=\"1\"'\r\n                + 'value=\"'\r\n                + initPlus\r\n                + '\" style=\"width:40px; \"  onchange=\"HJN.init.setDetailRange()\"> '\r\n                + '+ <input type=\"number\" id=\"DetailRangePlus\" min=\"0\" step=\"1\"'\r\n                + 'value=\"'\r\n                + initMinus\r\n                + '\" style=\"width:40px; \"  onchange=\"HJN.init.setDetailRange()\"> '\r\n                + '<select id=\"DetailRangeUnit\" class=\"hjnLabel4Input\" onchange=\"HJN.init.setDetailRange()\">' // #48\r\n                + HJN.Graph.prototype.UNIT_RANGE.reduce(\r\n                        function (prev, e, i, a) {\r\n                            return prev + '<option value=\"' + e.val + '\" '\r\n                                    + (e.selected || \"\") + '>' + e.label // #53\r\n                                    + '</option>';\r\n                        }, '') + '</select>';\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー機能：CSVデータファイルを開く\r\n * \r\n * @param {evt}\r\n *            evt ファイルオープンイペント\r\n */\r\nHJN.Graph.prototype.menuOpenCsv = function (evt) {\r\n    \"use strict\";\r\n    var file_list = evt.target.files;\r\n    // 指定されたファイルを処理する\r\n    HJN.init.FileReader(file_list);\r\n};\r\n\r\n/**\r\n * メニュー機能：画面設定をJSON形式のセーブファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuSaveConfig = function (menuId, fileName) {\r\n    \"use strict\";\r\n    // plotsをjsonに変換する\r\n    var save = {\r\n        \"HJN.Plot.List\" : HJN.Plot.List,\r\n        \"HJN.chart.fileReader\" : HJN.chart.fileReader._config_File.__config,\r\n        \"HJN.chartD.fileReader\" : HJN.chartD.fileReader._config_File.__config\r\n    };\r\n    var json = JSON.stringify(save, null, 4);\r\n    // ダウンロードする\r\n    this.menuDownloadBlob(this.menuBuffToBlob(json), menuId, fileName);\r\n};\r\n/**\r\n * メニュー機能：JSON形式の画面設定ファイルをロードし画面表示に反映する TODO\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ？\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名 ？\r\n */\r\nHJN.Graph.prototype.menuLoadConfig = function (evt) { // #10\r\n    \"use strict\";\r\n    // 指定されたファイルを開く\r\n    var files = evt.target.files;\r\n    for (var i = 0; i < files.length; i++) { // データを順番に取得する\r\n        try {\r\n            // ファイルを取得する\r\n            var file = files[i];\r\n            // ログ出力用にファイル名（サイズ）を編集する\r\n            if (10000 < file.size) {\r\n                var msg = \"Too large(>10KB) \" + file.name + \" [\" + file.size\r\n                        + \"byte]\";\r\n                HJN_util.Logger.ShowText([ \"<mark>\" + msg + \"</mark>\" ]);\r\n                return;\r\n            }\r\n            // ファイルの読み込みに成功したら、その内容をドロップエリアに追記して表示する\r\n            var reader = new FileReader();\r\n            reader.onloadend = funcOnloadend.bind(this, files[i], i);\r\n            // ファイルにArrayBufferで参照を取得する（onloadendイベントを起こす）\r\n            reader.readAsArrayBuffer(files[i]);\r\n        } catch (e) {\r\n            // 第一引数のテキストアレイの内容を#fileInfoのiframeに表示する\r\n            var msg = \"The \" + i + \"th dropped object is not a file\";\r\n            HJN_util.Logger.ShowText([ \"<mark>\" + msg + \"</mark>\" ]);\r\n            console.error(\"[%o]%o\", msg, e);\r\n        }\r\n    }\r\n\r\n    // 内部関数：ファイルを読み込み後の処理（指定ファイルを読み込んだ後に呼び出される）\r\n    function funcOnloadend(file, i, evt) {\r\n        if (evt.target.readyState === FileReader.DONE) {\r\n            // ファイルからjsonを読み込む\r\n            var filesArrayBuffer = evt.target.result;\r\n            var buf = new Uint8Array(filesArrayBuffer);\r\n            var json = String.fromCharCode.apply(null, buf);\r\n            alert(json);\r\n            var jsonObj = JSON.parse(json);\r\n\r\n            // jsonからHJN.chartD.fileReaderに登録されているHJN_util.Config の定義を作成する\r\n            var conf = jsonObj[\"HJN.chart.fileReader\"];\r\n            HJN.chart.fileReader._config_File.__config = conf;\r\n            var confD = jsonObj[\"HJN.chartD.fileReader\"];\r\n            HJN.chartD.fileReader._config_File.__config = confD;\r\n\r\n            // jsonからHJN.Plot.Listを作成する\r\n            var tmpPlots = jsonObj[\"HJN.Plot.List\"];\r\n            var plots = [];\r\n            // フォーマットに合致する項目のみ抽出する\r\n            if (isSameType([], tmpPlots)) { // 最上位が配列\r\n                tmpPlots.forEach(function (e) { // 2層目がオブジェクト\r\n                    if (isSameType(0, e.x))\r\n                        plots.push(e);\r\n                });\r\n            }\r\n            if (0 < plots.length) {\r\n                HJN.Plot.List = plots;\r\n            }\r\n            HJN.Plot.Render();\r\n            // グラフ内の吹き出しを再表示する\r\n            HJN.Plot.ShowBalloon();\r\n\r\n            // 型判定\r\n            function isSameType(sample, obj) {\r\n                var clas0 = Object.prototype.toString.call(sample);\r\n                var clas1 = Object.prototype.toString.call(obj);\r\n                return clas0 === clas1;\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * メニュー機能：メニューで指定されたフィルタの条件で再描画する\r\n * \r\n */\r\nHJN.Graph.prototype.menuFilterApply = function () { // #34\r\n    \"use strict\";\r\n    if (HJN.files && HJN.files.length === 0) {\r\n        // 自動生成データのグラフを表示しているとき\r\n        HJN.init.ChartShow(HJN.chart.eTatOriginal)\r\n    } else {\r\n        // ファイル指定のグラフを表示しているとき\r\n        HJN.init.FileReader(HJN.files);\r\n    }\r\n};\r\n/**\r\n * メニュー機能：フィルタ条件を初期値にし、再描画する\r\n * \r\n */\r\nHJN.Graph.prototype.menuFilterClear = function () { // #34\r\n    \"use strict\";\r\n    // メニュー画面おフィルタ条件に、初期値を設定する\r\n    setText(\"Filter.F_TIME_FROM\", null);\r\n    setText(\"Filter.F_TIME_FROM\", null);\r\n    setText(\"Filter.F_TIME_TO\", null);\r\n    setText(\"Filter.F_TAT_FROM\", 0);\r\n    setText(\"Filter.F_TAT_TO\", null);\r\n    setSelector(\"Filter.F_TEXT_NON\");\r\n    setText(\"Filter.F_TEXT_LEN\", null);\r\n    setText(\"Filter.F_TEXT_POS\", 1);\r\n    setText(\"Filter.F_TEXT_COL\", 3);\r\n    setText(\"Filter.F_TEXT_REG\", null);\r\n\r\n    function setText(id, val) {\r\n        document.getElementById(id).value = val;\r\n        document.getElementById(id).onchange();\r\n    }\r\n    function setSelector(id) {\r\n        document.getElementById(id).checked = true;\r\n        document.getElementById(id).onchange();\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー機能：シミュレータ 指定JSONでシミュレートする\r\n * \r\n */\r\nHJN.Graph.prototype.menuSimulatorSimulate = function () { // #53\r\n    \"use strict\";\r\n    // グラフを再生成する\r\n    var json = document.getElementById(\"SimulatorEditor\").value;\r\n    HJN.files = []; // #61\r\n    HJN.Plot.List = [];\r\n    HJN.init.CreateSampleTatLogAndChartShow(json);\r\n\r\n};\r\n/**\r\n * メニュー機能：シミュレータ JSON入力エリアを広げる\r\n * \r\n */\r\nHJN.Graph.prototype.menuSimulatorEditor = function () { // #53\r\n    \"use strict\";\r\n    var divSimulator = document.getElementById(\"Simulator\");\r\n    var divSimulatorEditor = document.getElementById(\"SimulatorEditor\");\r\n    if (divSimulator.style.height === \"100%\") { // #60\r\n        // 開いているとき、textareaの親を閉じる\r\n        divSimulator.style.height = \"0\";\r\n        divSimulator.style.width = \"190px\";\r\n    } else{ // 閉じているとき\r\n        // textareaを一度閉じる（textareaが大きいとき親が大きくなりスクロールが出るため）\r\n        divSimulatorEditor.style.height = \"0\";\r\n        // textareaの親を開く\r\n        divSimulator.style.height = \"100%\";\r\n        divSimulator.style.width = \"70%\";\r\n        divSimulatorEditor.style.height = (divSimulator.scrollHeight - 10) + \"px\";\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * メニュー機能：canvas画像をファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadImg = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var type = 'image/png';\r\n    // canvas から DataURL で画像を出力\r\n    var canvas = this.chartId.getElementsByTagName('canvas')[0], dataurl = canvas\r\n            .toDataURL(type);\r\n    // DataURL のデータ部分を抜き出し、Base64からバイナリに変換\r\n    var bin = atob(dataurl.split(',')[1]);\r\n    // Uint8Array ビューに 1 バイトずつ値を埋める\r\n    var buffer = new Uint8Array(bin.length);\r\n    for (var i = 0; i < bin.length; i++) {\r\n        buffer[i] = bin.charCodeAt(i);\r\n    }\r\n    // Uint8Array ビューのバッファーを抜き出し、それを元に Blob を作る\r\n    var blob = new Blob([ buffer.buffer ], {\r\n        type : type\r\n    });\r\n    // var url = window.URL.createObjectURL(blob);\r\n\r\n    // ダウンロードする\r\n    this.menuDownloadBlob(blob, menuId, fileName);\r\n};\r\n\r\n/**\r\n * メニュー機能：グラフ全データをCSVファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadCsv = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var bom = new Uint8Array([ 0xEF, 0xBB, 0xBF ]), // Excel対応UTF8のBOMコード指定\r\n    csv = this.labels.join(','); // csvヘッダ行の作成\r\n    this.dyData.forEach(function (e) {\r\n        csv += \"\\r\\n\" + e.join(',');\r\n    }); // csvデータ展開\r\n    var blob = new Blob([ bom, csv ], {\r\n        \"type\" : \"text/csv\"\r\n    }); // blob変換\r\n    // ダウンロードする\r\n    this.menuDownloadBlob(blob, menuId, fileName);\r\n};\r\n\r\n/**\r\n * メニュー機能：グラフ全データの編集元に該当するTATログの該当行をCSVファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadLog = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var eTat = this.eTat;\r\n    if (0 < eTat.length) { // 出力対象データがあるとき\r\n        if (typeof eTat[0].pos === \"undefined\") { // 生成データのとき\r\n            // 生成データをCSVに編集する\r\n            var eTatCsv = \"\";\r\n            var delimiter = '\"';\r\n            var separator = delimiter + HJN.chart.fileReader.getValue(\"SEP\") + delimiter;\r\n            eTat.forEach(function (e) {\r\n                eTatCsv += delimiter + HJN_util.D2S(e.x, 'yyyy/MM/dd hh:mm:ss.ppp') + separator\r\n                        + e.y + separator + e.message + delimiter + '\\r\\n'; // #61\r\n            });\r\n            // ダウンロードする\r\n            this.menuDownloadBlob(this.menuBuffToBlob(eTatCsv), menuId,\r\n                    fileName);\r\n        } else { // ファイル読込のとき\r\n            // 出力データを元ファイルのpos順にソートする（改行コードのないファイル末尾レコートがある場合も最後に来るように） #45\r\n            eTat.sort(function (a, b) {\r\n                return a.pos - b.pos;\r\n            });\r\n            // 最大作業領域として元ファイルサイズの合計分のメモリを確保する #23\r\n            var maxSize = HJN.filesArrayBuffer.reduce(function (p, c) {\r\n                return p + c.byteLength + 2;\r\n            }, 0);\r\n            var buff = new Uint8Array(maxSize), offset = 0;\r\n            // ファイルの該当行を Uint8Arrayに登録する\r\n            eTat.forEach(function (e) {\r\n                buff.set(new Uint8Array(HJN.filesArrayBuffer[e.fileIdx], e.pos,\r\n                        Math.min(e.len + 2,\r\n                                HJN.filesArrayBuffer[e.fileIdx].byteLength\r\n                                        - e.pos)), offset);\r\n                offset += (e.len + 2);\r\n            });\r\n            // 未使用作業領域を削除する\r\n            var buff2 = new Uint8Array(buff.slice(0, offset));\r\n            // ダウンロードする\r\n            this.menuDownloadBlob(this.menuBuffToBlob(buff2), menuId, fileName);\r\n        }\r\n    } else { // 出力対象データがないとき\r\n        var str = \"No log in the time.\";\r\n        // ダウンロードする\r\n        this.menuDownloadBlob(this.menuBuffToBlob(str), menuId, fileName);\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー機能：plotsでconcが選択されているとき、同時処理に該当するTATログの該当行をCSVファイルとしてダウンロードする\r\n * \r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadConc = function (menuId, fileName) {\r\n    \"use strict\";\r\n    var plot = HJN.Plot.List.find(function (e) {\r\n        return e.radio;\r\n    });\r\n    if (plot.n === HJN.CONC.N || plot.n === HJN.STAT.N || plot.n === HJN.ETAT.N) {\r\n        // CONC|STAT|ETATが選択されているとき\r\n        var trans = this.eTat.tatMap.search(plot.x); // #18\r\n        if (0 < trans.length) { // 出力テキストを編集する\r\n            if (typeof trans[0].pos === \"undefined\") {\r\n                // 初期表示データのとき、CSVを編集する\r\n                // 生成データをCSVに編集する\r\n                var csv = \"\";\r\n                trans.forEach(function (e) {\r\n                    csv += HJN_util.D2S(e.x, \"yyyy/MM/dd hh:mm:ss.ppp\") + \",\"\r\n                            + e.y + \"\\r\\n\";\r\n                });\r\n                // ダウンロードする\r\n                this.menuDownloadBlob(this.menuBuffToBlob(csv), menuId,\r\n                        fileName);\r\n            } else {\r\n                // ファイル読み込みの時、対象レコードを表示する\r\n                // 出力データを元ファイルのpos順にソートする（改行コードのないファイル末尾レコートがある場合も最後に来るように） #45\r\n                trans.sort(function (a, b) {\r\n                    return a.pos - b.pos;\r\n                });\r\n                // 最大作業領域として元ファイルサイズの合計分のメモリを確保する #23\r\n                var maxSize = HJN.filesArrayBuffer.reduce(function (p, c) {\r\n                    return p + c.byteLength + 2;\r\n                }, 0);\r\n                var buff = new Uint8Array(maxSize), offset = 0;\r\n                // ファイルの該当行を Uint8Arrayに登録する\r\n                trans.forEach(function (e) {\r\n                    buff.set(new Uint8Array(HJN.filesArrayBuffer[e.fileIdx],\r\n                            e.pos, Math.min(e.len + 2,\r\n                                    HJN.filesArrayBuffer[e.fileIdx].byteLength\r\n                                            - e.pos)), offset);\r\n                    offset += (e.len + 2);\r\n                });\r\n                // 未使用作業領域を削除する\r\n                var buff2 = new Uint8Array(buff.slice(0, offset));\r\n                // ダウンロードする\r\n                this.menuDownloadBlob(this.menuBuffToBlob(buff2), menuId,\r\n                        fileName);\r\n            }\r\n        }\r\n\r\n    } else { // CONCが選択されていないとき\r\n        var msg = \"抽出対象データがありません。空データがダウンロードされます\\r\\n\"\r\n                + \"conc：多重度（詳細）の点を選択した状態で行ってください\";\r\n        alert(msg);\r\n        this.menuDownloadBlob(this.menuBuffToBlob(msg), menuId, fileName);\r\n    }\r\n};\r\n\r\n/**\r\n * メニュー共通機能：BinaryString, UintXXArray, ArrayBuffer をBlobに変換する\r\n * \r\n * @param {Object}\r\n *            arrayBuffer 変換元\r\n * @param {Blob} -\r\n *            変換後\r\n */\r\nHJN.Graph.prototype.menuBuffToBlob = function (arrayBuffer) {\r\n    \"use strict\";\r\n    return new Blob([ arrayBuffer ], {\r\n        type : \"application/octet-stream\"\r\n    });\r\n};\r\n\r\n/**\r\n * メニュー共通機能：指定blobをファイルとしてダウンロードする\r\n * \r\n * @param {Objcet}\r\n *            blob ダウンロードさせるblogデータ\r\n * @param {String}\r\n *            menuId Chrome, FireFoxのときに使用：ダウンロードファイルの一時作成に使うHTMLタグ\r\n * @param {String}\r\n *            fileName ie11以降のときに使用：ダウンロードファイル名\r\n */\r\nHJN.Graph.prototype.menuDownloadBlob = function (blob, menuId, fileName) {\r\n    \"use strict\";\r\n    if (window.navigator.msSaveBlob) { // ie11以降のとき\r\n        window.navigator.msSaveBlob(blob, fileName);\r\n        // msSaveOrOpenBlobの場合はファイルを保存せずに開ける\r\n        window.navigator.msSaveOrOpenBlob(blob, fileName);\r\n    } else { // Chrome, FireFoxのとき\r\n        document.getElementById(menuId).href = window.URL.createObjectURL(blob);\r\n    }\r\n};\r\n\r\nHJN.Graph.prototype.addIcon_ZoomReset = function () {\r\n    \"use strict\";\r\n    var divChart = this.chartId; // document.getElementById(\"Icons\");\r\n    var idName = this.chartIdName + \"Zoom\";\r\n    var input = document.getElementById(idName);\r\n    if (input !== null) { // 既にある場合削除する\r\n        var div = input.parentElement;\r\n        div.parentElement.removeChild(div);\r\n    }\r\n\r\n    if (divChart) {\r\n        var div = document.createElement('div');\r\n        var htmlText = '<input id=\"' + idName + '\" type=\"buttom\" class=\"hjnBoxSwitch hjnResize\" '\r\n                                + 'onClick=\"HJN.' + this.chartIdName + '.graph.resetZoom()\">'\r\n                     + '<label for=\"' + idName + '\" class=\"hjnCtrlBox\"><span></span></label>';\r\n        div.innerHTML = htmlText;\r\n        divChart.insertBefore(div, divChart.firstChild);\r\n    }\r\n    \r\n    // divIcons.appendChild(div);\r\n\r\n    // div.id = id;\r\n    // div.className = \"menuBar\";\r\n// div = element.parentElement;\r\n    /*\r\n     * var divIcons = document.getElementById(\"Icons\"); var idName =\r\n     * this.chartIdName + \"Zoom\"; if (divIcons) { var div =\r\n     * document.createElement('div'); var htmlText = '<input id=\"' + idName + '\"\r\n     * type=\"buttom\" class=\"hjnBoxSwitch hjnResize\" ' + 'onClick=\"HJN.' +\r\n     * this.chartIdName + '.graph.resetZoom()\">' + '<label for=\"' + idName + '\"\r\n     * class=\"hjnCtrlBox\"><span></span></label>'; div.innerHTML = htmlText;\r\n     * divIcons.appendChild(div); }\r\n     */\r\n\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/HJN.graph.js\n// module id = 4\n// module chunks = 0","import css from './HJN.css';\r\nimport css from '../libs/dygraph.css';\r\nimport {HJN_init_ChartRegist} from \"./HJN.graph.init.js\";   // JSの取込、JSのみネスト可\r\nwindow.addEventListener(\"DOMContentLoaded\",function(eve){\r\n    HJN_init_ChartRegist(\"chart\");      // チャートを作成する\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/main.js\n// module id = 5\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js!./HJN.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js!./HJN.css\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js!./HJN.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/HJN.css\n// module id = 6\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"@CHARSET \\\"UTF-8\\\";\\r\\n/*   ****1**** ****2**** ****3**** ****4**** ****5**** ****6**** ****7***** */\\r\\n/* リセットCSS */\\r\\nhtml, body, h1, h2, h3, h4, ul, ol, dl, li, dt, dd, p, div, span, img, a, table, tr, th, td, selector{\\r\\nmargin: 0; padding: 0; border: 0; font-weight: normal; font-size: 100%; vertical-align:baseline;\\r\\n-webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }\\r\\narticle, header, footer, aside, figure, figcaption, nav, section { display:block; }\\r\\nbody { line-height: 1; -ms-text-size-adjust: 100%; -webkit-text-size-adjust: 100%; }\\r\\nol, ul { list-style: none; list-style-type: none; }\\r\\n*:focus { outline: 0; }\\r\\n\\r\\n/* TAT log diver */\\r\\nbody\\t{ font-size: 12px; margin: 0;\\r\\n\\tfont-family:\\\"\\\\30E1\\\\30A4\\\\30EA\\\\30AA\\\",\\\"Meiriyo\\\",\\\"\\\\30D2\\\\30E9\\\\30AE\\\\30CE\\\\89D2\\\\30B4   ProN W3\\\",\\\"Hiragino Kaku Gothic ProN\\\",\\\"sans-serif\\\"; }\\r\\nnav \\t{ height: 36px }\\r\\ninput\\t{ border-width: 1px; font-size: 12px; }\\r\\nselect  { background: #eee;}\\r\\n#Simulator {overflow: auto; resize: both; position: absolute; z-index: 100;\\r\\n\\t\\t\\ttop: 0px; left: 0px; height: 0; width: 190px; background: rgba(255,255,255,0.5); }\\r\\n.statusbar\\t{ overflow: auto; resize: both; position: absolute; z-index: 99;\\r\\n\\t\\t\\ttop: 0px; left: 200px; height: 20px; width: 200px; background: #fff; }\\r\\n.statusbar > iframe { overflow: hidden; width: 95%; height: 100%; }\\r\\n.lineViewer { width: 100%; height: 42px; margin: 25px 0px; padding: 0px; border: 1px #cccccc dotted; }\\r\\nfooter { position: fixed; bottom: 0%; text-align: right; font-size: smaller; }\\r\\n\\r\\n/* ハンバーガーメニュー */\\r\\n.hjnBurgerTray { position :fixed; display: inline-block; visibility: hidden; z-index: 96;\\r\\n\\ttop :0; right :0; width :305px; height:100%; padding :0; background :#fff; }\\r\\n/* ハンバーガーボタン */\\r\\n.hjnCtrlBox { position: relative; float: right; cursor: pointer; z-index: 98;\\r\\n\\twidth: 40px; height: 40px; background-color: #fff; visibility: visible;\\r\\n\\tborder: 1px solid #ccc; box-shadow:\\t1px 1px 1px #ccc; border-radius: 4px;\\r\\n\\tline-height: 12px; box-sizing: border-box;\\ttransition: all 0.1s; }\\r\\n.hjnCtrlBox:hover { border: #ccc; }\\r\\n.hjnCtrlBox:active { border: 1px solid #999;  }\\r\\n.hjnBurger { display: none; }\\r\\n.hjnBurger + label span { top: 17px; height: 4px; border-radius: 2px;\\r\\n\\tposition: absolute; left: 6px; width: 69%; background-color: #888; }\\r\\n.hjnBurger + label span::before, .hjnBurger + label span::after { border-radius: 2px;\\r\\n\\tposition: absolute; width: 26px; height: 4px; background: #888;\\r\\n\\tdisplay: block; content: ''; transition: transform 0.1s; }\\r\\n.hjnBurger + label span::before { top: -8px; }\\r\\n.hjnBurger + label span::after { top: 8px; }\\r\\n.hjnBurger:checked + label span { background: #fff; }\\r\\n.hjnBurger:checked + label span::before { transform: translateY(8px) rotate(-45deg); }\\r\\n.hjnBurger:checked + label span::after { transform: translateY(-8px) rotate(45deg); }\\r\\n\\r\\n/* メニュー 全体 */\\r\\n.hjnBurgerTitle { /* ハンバーガーメニューオープン時の見出し */\\r\\n\\tposition: absolute;\\tvisibility: visible; color: #999; background:#fff; width: 100%;\\r\\n\\tpadding: 0 40px 0 15px; opacity: 0; z-index: 97;\\r\\n\\ttransform: translate3d(0, -15px, 0); transition: transform 0.1s, opacity 0.5s; }\\r\\n.hjnBurgerTitle p { word-wrap: break-word; line-height: 18px; width: 160px; }\\r\\n.hjnBurger:checked ~ .hjnBurgerTitle { transform: none;  opacity: 1; }\\r\\n.hjnBurgerWrap { position: absolute;  visibility: visible; width :100%; height :100%;\\r\\n\\tbackground: #fff; opacity: 0.9;\\ttop: 0; right: -100%; transition: right 0.1s; \\r\\n\\tpadding: 40px 0 0 0; overflow: scroll;}\\r\\n.hjnBurger:checked ~ .hjnBurgerWrap { right: 0; }\\r\\n/* Copyright表示 */\\r\\n.hjnBurgerTitle a {\\r\\n    color: #4d4e53; text-decoration: none; border-bottom: 1px dotted #afafaf; }\\r\\n/* モードボタン */\\r\\n.hjnBoxSwitch { display: none; }\\r\\n.hjnBoxSwitch + label span::before, .hjnBoxSwitch + label span::after\\r\\n\\t\\t{ display: inline-block; text-align:center; transition: all 0.1s; width: 100%}\\r\\n.hjnBoxSwitch + label span::before, .hjnBoxSwitch:checked + label span::after\\r\\n\\t\\t{ color: #ddd; }\\r\\n.hjnBoxSwitch + label span::after, .hjnBoxSwitch:checked + label span::before \\r\\n\\t\\t{ color: #888; font-weight: bold; }\\r\\n\\r\\n#hjnBoxPlaceOn + label span::before { content: \\\"Place on\\\"; }\\r\\n#hjnBoxPlaceOn + label span::after  { content: \\\"side\\\"; }\\r\\n#chartZoom + label span::before, #chartDZoom + label span::before  { content: \\\"reset zoom\\\"; }\\r\\n/* スイッチラベル */\\r\\n.hjnBoxOn { display: none; }\\r\\n.hjnBoxOn + label { text-align:center; color: #ddd; }\\r\\n.hjnBoxOn:checked + label { color: #888; font-weight: bold;}\\r\\n\\r\\n /* アコーデオンメニュー */\\r\\n.hjnAccordion { list-style-type: none; margin: 0; padding: 0; }\\r\\n.hjnMenuLv1 { position:rerative; margin: 0 10px; }\\r\\n.hjnMenuLv1 > input { display: none;}\\r\\n\\r\\n.hjnMenuLv1 > label::after { position: absolute; content: \\\"\\\"; border-style: solid;\\r\\n\\t\\tborder-color: #888 transparent transparent transparent;\\r\\n\\t\\tborder-width: 8px 4px 0 4px; right: 40px; transition: 0.1s;}\\r\\n.hjnMenuLv1 > input:checked ~ label::after { transform: rotate(90deg); }\\r\\n\\r\\n.hjnMenuLv1 > label, .hjnMenuLv1 > a { display: block; cursor: pointer;\\r\\n\\t\\tpadding: 10px; border-bottom: 1px solid #fff; background: #eee; transition: all 0.1s; }\\r\\n.hjnMenuLv1 > label:hover { background: rgba(0,0,0,0.2); }\\r\\n.hjnMenuLv1 > label:active { background: #999;  }\\r\\n.hjnMenuLv1 > input:checked ~ .hjnMenuLv2 { height: auto; padding: 10px; }\\r\\n\\r\\n/* 詳細メニューリスト   */\\r\\n.hjnMenuLv2 { transition: 0.1s; height: 0; overflow: hidden; padding: 0 10px; background: #ddd; }\\r\\n.hjnMenuLv2 ol { display: block; margin: 2px 0; }\\r\\n.hjnMenuLv2 label { height: 12px; }\\r\\n.hjnLabel4Input:hover,  .hjnButton4Input:hover { background: rgba(0,0,0,0.2); }\\r\\n.hjnLabel4Input:active, .hjnButton4Input:active { background: #999; }\\r\\n/* 詳細メニューリスト  ボタン */\\r\\n.hjnMenuLv2 .hjnButton4Input label, .hjnMenuLv2 label.hjnButton4Input, .hjnPlot \\r\\n\\t\\t{ display: block; padding: 8px 12px 8px 22px;}\\r\\n.hjnButton4Input { position: relative; display: block; overflow: hidden; transition: all 0.1s;  \\r\\n\\t\\ttext-decoration: none; color: #000; border: outset #fff; border-radius: 14px; }\\r\\n.hjnButton4Input:active { border: inset #fff; }\\r\\n.hjnMenuLv2 li .hjnButton4Input { padding: 8px 12px 8px 22px; } /* Download用 */\\r\\n.hjnMenuLv2 .hjnButton4Input input[type=\\\"file\\\"] { display: none; } /* File Open用 */\\r\\n/* 詳細メニューリスト  文字 */\\r\\n.hjnMenuLv2 .hjnLabel4Input { display: inline-block; position: relative;\\r\\n\\t\\t border-radius: 14px; padding-left: 1em; cursor: pointer; transition: all 0.1s; }\\r\\n.hjnMenuLv2 input { height: 12px; text-align: right; border-radius: 5px; }\\r\\n.hjnMenuLv2 .hjnLabel4Input input[type=\\\"radio\\\"] { position: absolute;\\r\\n\\t\\t top: 0; bottom: 0; left: 0; margin: auto;  cursor: pointer; }\\r\\n.hjnMenuLv2 select.hjnLabel4Input  {padding-left: 0; }\\r\\n/* 詳細メニューリスト  Legend */\\r\\n.hjnMenuLv2 .legend {cursor: pointer; width:206px; height: auto;\\r\\n \\t\\tdisplay: inline-block; padding: 8px 12px 8px 22px; border-radius: 14px;}\\r\\n.hjnMenuLv2 .legend > input { display: inline; cursor: pointer; margin: auto -15px; }\\r\\n.hjnMenuLv1 > input:checked ~ .hjnMenuLv2 .legend > input { position: absolute; }\\r\\n.hjnMenuLv2 .legend:hover { font-style: oblique; } \\r\\n\\r\\n/* dygraph用設定 */\\r\\n.item.active{ background: rgba(0,0,0,0.2) !important; border: rgba(0,0,0,0.2) !important; }\\r\\n.column { display: inline-block; }\\r\\n.dygraph-annotation { color: rgba(0,0,0,0.8) !important;\\r\\n\\t\\tbackground-color: rgba(256,256,256,0.2) !important; width: 40px !important; }\\r\\n\\r\\n/* Bottom detail graph用設定 */\\r\\n#detailTimeRange { padding: 8px; }\\r\\n#chartPlots div { float: left; padding: 2px 0;}\\r\\n.hjnPlot { margin: 2px 0; width:250px; }\\r\\n.hjnPlot > label { position:relative; margin: 2px 0px; background-color: #eee;\\r\\n\\t\\tpadding: 0px 5px; cursor: pointer; border-radius: 5px; }\\r\\n.hjnPlot > input[type=checkbox] { /* 削除アイコン */\\r\\n\\t\\tvisibility: hidden; z-index: 98; float: left; margin: -2px 0 0 0; \\r\\n\\t\\tbackground-color: #fff; box-shadow: 1px 1px 1px #ccc; height: 16px; width: 16px; }\\r\\n.hjnPlot > input[type=checkbox] + label{ /* 削除アイコンの横棒*/\\r\\n\\t\\tvisibility: hidden; z-index: 97; float: left; left: -13px; top: 2px;\\r\\n\\t\\tbackground: #aaa; height: 3px; width: 9px; padding: 0; border-radius: 2px;}\\r\\n.hjnPlot:hover > input[type=checkbox], .hjnPlot:hover > input[type=checkbox] + label \\r\\n\\t\\t{ visibility: visible; cursor: pointer; }\\r\\n.hjnPlot > input[type=radio] { display:none; }\\r\\n.hjnPlot > input[type=radio]:checked + label { background-color: #ccc; }\\r\\n.hjnPlot:hover { font-weight: bold; }\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./src/HJN.css\n// module id = 7\n// module chunks = 0","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/style-loader/lib/urls.js\n// module id = 8\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js!./dygraph.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js!./dygraph.css\", function() {\n\t\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js!./dygraph.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/dygraph.css\n// module id = 9\n// module chunks = 0","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/**\\n * Default styles for the dygraphs charting library.\\n */\\n\\n.dygraph-legend {\\n  position: absolute;\\n  font-size: 14px;\\n  z-index: 10;\\n  width: 250px;  /* labelsDivWidth */\\n  /*\\n  dygraphs determines these based on the presence of chart labels.\\n  It might make more sense to create a wrapper div around the chart proper.\\n  top: 0px;\\n  right: 2px;\\n  */\\n  background: white;\\n  line-height: normal;\\n  text-align: left;\\n  overflow: hidden;\\n}\\n\\n/* styles for a solid line in the legend */\\n.dygraph-legend-line {\\n  display: inline-block;\\n  position: relative;\\n  bottom: .5ex;\\n  padding-left: 1em;\\n  height: 1px;\\n  border-bottom-width: 2px;\\n  border-bottom-style: solid;\\n  /* border-bottom-color is set based on the series color */\\n}\\n\\n/* styles for a dashed line in the legend, e.g. when strokePattern is set */\\n.dygraph-legend-dash {\\n  display: inline-block;\\n  position: relative;\\n  bottom: .5ex;\\n  height: 1px;\\n  border-bottom-width: 2px;\\n  border-bottom-style: solid;\\n  /* border-bottom-color is set based on the series color */\\n  /* margin-right is set based on the stroke pattern */\\n  /* padding-left is set based on the stroke pattern */\\n}\\n\\n.dygraph-roller {\\n  position: absolute;\\n  z-index: 10;\\n}\\n\\n/* This class is shared by all annotations, including those with icons */\\n.dygraph-annotation {\\n  position: absolute;\\n  z-index: 10;\\n  overflow: hidden;\\n}\\n\\n/* This class only applies to annotations without icons */\\n/* Old class name: .dygraphDefaultAnnotation */\\n.dygraph-default-annotation {\\n  border: 1px solid black;\\n  background-color: white;\\n  text-align: center;\\n}\\n\\n.dygraph-axis-label {\\n  /* position: absolute; */\\n  /* font-size: 14px; */\\n  z-index: 10;\\n  line-height: normal;\\n  overflow: hidden;\\n  color: black;  /* replaces old axisLabelColor option */\\n}\\n\\n.dygraph-axis-label-x {\\n}\\n\\n.dygraph-axis-label-y {\\n}\\n\\n.dygraph-axis-label-y2 {\\n}\\n\\n.dygraph-title {\\n  font-weight: bold;\\n  z-index: 10;\\n  text-align: center;\\n  /* font-size: based on titleHeight option */\\n}\\n\\n.dygraph-xlabel {\\n  text-align: center;\\n  /* font-size: based on xLabelHeight option */\\n}\\n\\n/* For y-axis label */\\n.dygraph-label-rotate-left {\\n  text-align: center;\\n  /* See http://caniuse.com/#feat=transforms2d */\\n  transform: rotate(90deg);\\n  -webkit-transform: rotate(90deg);\\n  -moz-transform: rotate(90deg);\\n  -o-transform: rotate(90deg);\\n  -ms-transform: rotate(90deg);\\n}\\n\\n/* For y2-axis label */\\n.dygraph-label-rotate-right {\\n  text-align: center;\\n  /* See http://caniuse.com/#feat=transforms2d */\\n  transform: rotate(-90deg);\\n  -webkit-transform: rotate(-90deg);\\n  -moz-transform: rotate(-90deg);\\n  -o-transform: rotate(-90deg);\\n  -ms-transform: rotate(-90deg);\\n}\\n\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader!./libs/dygraph.css\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}